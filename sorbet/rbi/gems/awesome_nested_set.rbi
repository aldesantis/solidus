# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/awesome_nested_set/all/awesome_nested_set.rbi
#
# awesome_nested_set-3.2.1

module CollectiveIdea
end
module CollectiveIdea::Acts
end
module CollectiveIdea::Acts::NestedSet
  def acts_as_nested_set(options = nil); end
  def acts_as_nested_set_default_options; end
  def acts_as_nested_set_define_callbacks!; end
  def acts_as_nested_set_parse_options!(options); end
  def acts_as_nested_set_prevent_assignment_to_reserved_columns!; end
  def acts_as_nested_set_relate_children!; end
  def acts_as_nested_set_relate_parent!; end
end
module CollectiveIdea::Acts::NestedSet::Columns
  def counter_cache_column_name; end
  def depth_column_name; end
  def left_column_name; end
  def model_connection; end
  def order_column_name; end
  def parent_column_name; end
  def primary_column_name; end
  def quoted_depth_column_name; end
  def quoted_left_column_full_name; end
  def quoted_left_column_name; end
  def quoted_order_column_full_name; end
  def quoted_order_column_name; end
  def quoted_parent_column_full_name; end
  def quoted_parent_column_name; end
  def quoted_primary_column_name; end
  def quoted_primary_key_column_full_name; end
  def quoted_right_column_full_name; end
  def quoted_right_column_name; end
  def quoted_scope_column_names; end
  def right_column_name; end
  def scope_column_names; end
end
module CollectiveIdea::Acts::NestedSet::Model
  def change_descendants_depth!(diff); end
  def child?; end
  def has_depth_column?; end
  def leaf?; end
  def left(target = nil); end
  def nested_set_scope(options = nil); end
  def nested_set_scope_without_default_scope(*args); end
  def parent_id(target = nil); end
  def primary_id(target = nil); end
  def reload_nested_set; end
  def reload_target(target, position); end
  def right(target = nil); end
  def right_most_bound; end
  def right_most_node; end
  def root?; end
  def set_default_left_and_right; end
  def set_depth!; end
  def set_depth_for_self_and_descendants!; end
  def store_new_parent; end
  def to_text; end
  def update_counter_cache; end
  def update_depth(depth); end
  def without_self(scope); end
  extend ActiveSupport::Concern
end
module CollectiveIdea::Acts::NestedSet::Model::Prunable
  def destroy_descendants; end
  def destroy_or_delete_descendants; end
  def diff; end
  def update_siblings(direction); end
  def update_siblings_for_remaining_nodes; end
end
class CollectiveIdea::Acts::NestedSet::Move
  def case_condition_for_direction(column_name); end
  def case_condition_for_parent; end
  def conditions(a, b, c, d); end
  def get_boundaries; end
  def initialize(target, position, instance); end
  def instance; end
  def instance_arel_table(*args, &block); end
  def instance_base_class(*args, &block); end
  def instance_class(*args, &block); end
  def left(*args, &block); end
  def left_column_name(*args, &block); end
  def lock_nodes_between!(left_bound, right_bound); end
  def move; end
  def nested_set_scope_without_default_scope(*args, &block); end
  def new_parent_id; end
  def parent_column_name(*args, &block); end
  def position; end
  def prevent_impossible_move; end
  def primary_column_name(*args, &block); end
  def primary_id(*args, &block); end
  def quoted_left_column_name(*args, &block); end
  def quoted_parent_column_name(*args, &block); end
  def quoted_primary_column_name(*args, &block); end
  def quoted_right_column_name(*args, &block); end
  def right(*args, &block); end
  def right_column_name(*args, &block); end
  def root; end
  def target; end
  def target_bound; end
  def where_statement(left_bound, right_bound); end
end
module CollectiveIdea::Acts::NestedSet::Move::LegacyWhereStatementExt
  def where_statement(left_bound, right_bound); end
end
class CollectiveIdea::Acts::NestedSet::Move::ImpossibleMove < ActiveRecord::StatementInvalid
end
module CollectiveIdea::Acts::NestedSet::Model::Movable
  def after_move_to(target, position); end
  def find_left_neighbor(parent, order_attribute, ascending); end
  def move_left; end
  def move_possible?(target); end
  def move_right; end
  def move_to(target, position); end
  def move_to_child_of(node); end
  def move_to_child_with_index(node, index); end
  def move_to_left_of(node); end
  def move_to_new_parent; end
  def move_to_ordered_child_of(parent, order_attribute, ascending = nil); end
  def move_to_right_of(node); end
  def move_to_root; end
  def out_of_bounds?(left_bound, right_bound); end
  def prevent_unpersisted_move; end
  def within_bounds?(left_bound, right_bound); end
end
module CollectiveIdea::Acts::NestedSet::Model::Transactable
  def in_tenacious_transaction(&block); end
end
class CollectiveIdea::Acts::NestedSet::Model::Transactable::OpenTransactionsIsNotZero < ActiveRecord::StatementInvalid
end
class CollectiveIdea::Acts::NestedSet::Model::Transactable::DeadlockDetected < ActiveRecord::StatementInvalid
end
module CollectiveIdea::Acts::NestedSet::Model::Relatable
  def ancestors; end
  def compute_level; end
  def descendants; end
  def determine_depth(node = nil, nesting = nil); end
  def is_ancestor_of?(other); end
  def is_descendant_of?(other); end
  def is_or_is_ancestor_of?(other); end
  def is_or_is_descendant_of?(other); end
  def leaves; end
  def left_sibling; end
  def level; end
  def right_sibling; end
  def root; end
  def same_scope?(other); end
  def self_and_ancestors; end
  def self_and_descendants; end
  def self_and_siblings; end
  def siblings; end
  def within_node?(node, within); end
end
class CollectiveIdea::Acts::NestedSet::Tree
  def counter_cache_column_name(*args, &block); end
  def increment_indice!(node); end
  def indices; end
  def indices=(arg0); end
  def initialize(model, validate_nodes); end
  def left_column_name(*args, &block); end
  def model; end
  def node_children(node); end
  def order_for_rebuild(*args, &block); end
  def quoted_parent_column_full_name(*args, &block); end
  def rebuild!; end
  def reset_counter_cache(node); end
  def right_column_name(*args, &block); end
  def root_nodes; end
  def scope_for_rebuild(*args, &block); end
  def set_left!(node); end
  def set_left_and_rights(node); end
  def set_right!(node); end
  def validate_nodes; end
end
module CollectiveIdea::Acts::NestedSet::Model::Rebuildable
  def order_for_rebuild; end
  def rebuild!(validate_nodes = nil); end
  def scope_for_rebuild; end
end
class CollectiveIdea::Acts::NestedSet::SetValidator
  def arel_table(*args, &block); end
  def bound_is_null(column_name); end
  def bounds_outside_parent; end
  def filter_scope; end
  def initialize(model); end
  def join_scope; end
  def left_bound_greater_than_right; end
  def left_column_name(*args, &block); end
  def model; end
  def parent; end
  def parent_column_name(*args, &block); end
  def parent_not_null; end
  def primary_column_name(*args, &block); end
  def primary_key(*args, &block); end
  def query; end
  def quoted_left_column_full_name(*args, &block); end
  def quoted_left_column_name(*args, &block); end
  def quoted_parent_column_full_name(*args, &block); end
  def quoted_primary_column_name(*args, &block); end
  def quoted_right_column_full_name(*args, &block); end
  def quoted_right_column_name(*args, &block); end
  def quoted_table_name(*args, &block); end
  def right_column_name(*args, &block); end
  def scope; end
  def scope=(arg0); end
  def valid?; end
end
module CollectiveIdea::Acts::NestedSet::Model::Validatable
  def all_roots_valid?; end
  def all_roots_valid_by_scope?(roots_to_validate); end
  def each_root_valid?(roots_to_validate); end
  def left_and_rights_valid?; end
  def no_duplicates_for_columns?; end
  def roots_grouped_by_scope(roots_to_group); end
  def roots_reordered_by_column(roots_to_reorder, column); end
  def scope_string; end
  def valid?; end
end
class CollectiveIdea::Acts::NestedSet::Iterator
  def each_with_level; end
  def initialize(objects); end
  def objects; end
end
module CollectiveIdea::Acts::NestedSet::Model::ClassMethods
  def add_to_inverse_association(association, record); end
  def associate_parents(objects); end
  def children_of(parent_id); end
  def each_with_level(objects, &block); end
  def leaves; end
  def left_of(node); end
  def left_of_right_side(node); end
  def nested_set_scope(options = nil); end
  def primary_key_scope(id); end
  def right_of(node); end
  def root; end
  def roots; end
end
module CollectiveIdea::Acts::NestedSet::Helper
  def nested_set_options(class_or_item, mover = nil); end
end
class ActionView::Base
  include CollectiveIdea::Acts::NestedSet::Helper
end
