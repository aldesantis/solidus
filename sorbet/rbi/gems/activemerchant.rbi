# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activemerchant/all/activemerchant.rbi
#
# activemerchant-1.117.0

module ActiveMerchant
end
class ActiveMerchant::ActiveMerchantError < StandardError
end
class ActiveMerchant::ConnectionError < ActiveMerchant::ActiveMerchantError
  def initialize(message, triggering_exception); end
  def triggering_exception; end
end
class ActiveMerchant::RetriableConnectionError < ActiveMerchant::ConnectionError
end
class ActiveMerchant::ResponseError < ActiveMerchant::ActiveMerchantError
  def initialize(response, message = nil); end
  def response; end
  def to_s; end
end
class ActiveMerchant::ClientCertificateError < ActiveMerchant::ActiveMerchantError
end
class ActiveMerchant::InvalidResponseError < ActiveMerchant::ActiveMerchantError
end
module ActiveMerchant::Billing
end
module ActiveMerchant::Billing::Base
  def mode; end
  def mode=(obj); end
  def self.gateway(name); end
  def self.gateway_mode; end
  def self.gateway_mode=(mode); end
  def self.mode; end
  def self.mode=(obj); end
  def self.test?; end
end
class ActiveMerchant::Billing::AVSResult
  def code; end
  def initialize(attrs); end
  def message; end
  def postal_match; end
  def self.messages; end
  def street_match; end
  def to_hash; end
end
class ActiveMerchant::Billing::CVVResult
  def code; end
  def initialize(code); end
  def message; end
  def self.messages; end
  def to_hash; end
end
class ActiveMerchant::Billing::Error < ActiveMerchant::ActiveMerchantError
end
class ActiveMerchant::Billing::Response
  def authorization; end
  def avs_result; end
  def cvv_result; end
  def emv_authorization; end
  def error_code; end
  def fraud_review?; end
  def initialize(success, message, params = nil, options = nil); end
  def message; end
  def params; end
  def success?; end
  def test; end
  def test?; end
end
class ActiveMerchant::Billing::MultiResponse < ActiveMerchant::Billing::Response
  def <<(response); end
  def authorization; end
  def avs_result; end
  def cvv_result; end
  def emv_authorization; end
  def error_code; end
  def fraud_review?; end
  def initialize(use_first_response = nil); end
  def message; end
  def params; end
  def primary_response; end
  def process(ignore_result = nil); end
  def responses; end
  def self.run(use_first_response = nil, &block); end
  def success?; end
  def test; end
  def test?; end
end
module ActiveMerchant::Billing::CreditCardMethods
  def card_verification_value_length(brand); end
  def credit_card?; end
  def electron?; end
  def self.in_bin_range?(number, ranges); end
  def self.included(base); end
  def valid_card_verification_value?(cvv, brand); end
  def valid_expiry_year?(year); end
  def valid_issue_number?(number); end
  def valid_month?(month); end
  def valid_start_year?(year); end
end
module ActiveMerchant::Billing::CreditCardMethods::ClassMethods
  def brand?(number); end
  def card_companies; end
  def electron?(number); end
  def first_digits(number); end
  def last_digits(number); end
  def mask(number); end
  def matching_brand?(number, brand); end
  def matching_type?(number, brand); end
  def type?(number); end
  def valid_by_algorithm?(brand, numbers); end
  def valid_card_number_characters?(number); end
  def valid_card_number_length?(number); end
  def valid_luhn?(numbers); end
  def valid_naranja_algo?(numbers); end
  def valid_number?(number); end
  def valid_test_mode_card_number?(number); end
end
module ActiveMerchant::Billing::CreditCardFormatting
  def expdate(credit_card); end
  def format(number, option); end
end
module ActiveMerchant::Billing::Compatibility
  def self.deprecated; end
  def self.humanize(lower_case_and_underscored_word); end
  def self.rails_required!; end
end
module ActiveMerchant::Billing::Compatibility::Model
  def errors; end
  def valid?; end
  include ActiveMerchant::Billing::Rails::Model
end
module ActiveMerchant::Billing::Rails
end
module ActiveMerchant::Billing::Rails::Model
  def internal_errors; end
  def valid?; end
end
class ActiveMerchant::Billing::Rails::Model::Errors < Hash
  def [](key); end
  def []=(key, value); end
  def add(field, error); end
  def add_to_base(error); end
  def count; end
  def each_full; end
  def empty?; end
  def full_messages; end
  def initialize; end
  def on(field); end
end
module ActiveMerchant::Empty
  def empty?(value); end
end
class ActiveMerchant::Billing::Model
  def errors_hash(array); end
  def initialize(attributes = nil); end
  def validate; end
  include ActiveMerchant::Billing::Compatibility::Model
  include ActiveMerchant::Empty
end
class ActiveMerchant::Billing::CreditCard < ActiveMerchant::Billing::Model
  def brand; end
  def brand=(value); end
  def display_number; end
  def emv?; end
  def encrypted_pin_cryptogram; end
  def encrypted_pin_cryptogram=(arg0); end
  def encrypted_pin_ksn; end
  def encrypted_pin_ksn=(arg0); end
  def expired?; end
  def expiry_date; end
  def first_digits; end
  def first_name; end
  def first_name=(arg0); end
  def first_name?; end
  def icc_data; end
  def icc_data=(arg0); end
  def last_digits; end
  def last_name; end
  def last_name=(arg0); end
  def last_name?; end
  def manual_entry; end
  def manual_entry=(arg0); end
  def month; end
  def month=(v); end
  def name; end
  def name=(full_name); end
  def name?; end
  def number; end
  def number=(value); end
  def read_method; end
  def read_method=(arg0); end
  def require_verification_value=(value); end
  def requires_verification_value?; end
  def self.require_name; end
  def self.require_name=(arg0); end
  def self.require_verification_value; end
  def self.require_verification_value=(arg0); end
  def self.requires_name?; end
  def self.requires_verification_value?; end
  def start_month=(v); end
  def start_year=(v); end
  def track_data; end
  def track_data=(arg0); end
  def type; end
  def type=(value); end
  def validate; end
  def validate_card_brand_and_number; end
  def validate_essential_attributes; end
  def validate_verification_value; end
  def verification_value; end
  def verification_value=(arg0); end
  def verification_value?; end
  def year; end
  def year=(v); end
  extend ActiveMerchant::Billing::CreditCardMethods::ClassMethods
  include ActiveMerchant::Billing::CreditCardMethods
end
class ActiveMerchant::Billing::CreditCard::ExpiryDate
  def expiration; end
  def expired?; end
  def initialize(month, year); end
  def month; end
  def month_days; end
  def year; end
end
