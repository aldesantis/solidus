# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/teaspoon/all/teaspoon.rbi
#
# teaspoon-e952dbc35fb0

module Teaspoon
  def configuration; end
  def configuration=(obj); end
  def configured; end
  def configured=(obj); end
  def self.abort(message = nil, code = nil); end
  def self.configuration; end
  def self.configuration=(obj); end
  def self.configure; end
  def self.configured; end
  def self.configured=(obj); end
  def self.dep(message, category = nil); end
  def self.railtie_helpers_paths; end
  def self.railtie_namespace; end
  def self.railtie_routes_url_helpers(include_path_helpers = nil); end
  def self.root; end
  def self.setup(&block); end
  def self.table_name_prefix; end
  def self.use_relative_model_naming?; end
end
class Teaspoon::Error < StandardError
  def build_message(msg_or_options); end
end
class Teaspoon::Failure < Teaspoon::Error
end
class Teaspoon::EnvironmentNotFound < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::UnknownFramework < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::UnknownFrameworkVersion < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::UnknownDriver < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::UnknownFormatter < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::UnspecifiedFramework < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::UnspecifiedDependencies < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::UnknownSuite < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::UnknownCoverage < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::NotFoundInRegistry < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::RunnerError < Teaspoon::Error
end
class Teaspoon::FileWriteError < Teaspoon::Error
end
class Teaspoon::MissingDependencyError < Teaspoon::Error
  def initialize(msg = nil); end
end
class Teaspoon::DependencyError < Teaspoon::Error
  def initialize(msg = nil); end
end
class Teaspoon::ServerError < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::DriverOptionsError < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::AssetNotServableError < Teaspoon::Error
  def initialize(msg_or_options); end
end
class Teaspoon::IstanbulNotFoundError < Teaspoon::Error
  def initialize(msg = nil); end
end
class Teaspoon::CoverageResultsNotFoundError < Teaspoon::Error
  def initialize(msg = nil); end
end
module Teaspoon::Utility
  def which(cmd); end
end
module Teaspoon::Registry
  def available; end
  def fetch(name); end
  def matches?(one, two); end
  def normalize_name(name); end
  def not_found_exception; end
  def not_found_in_registry(klass); end
  def register(name, constant, path, options = nil); end
  def self.extended(host); end
end
module Teaspoon::Registry::HasDefault
  def default; end
end
module Teaspoon::Driver
  extend Teaspoon::Registry
  extend Teaspoon::Registry::HasDefault
end
module Teaspoon::Formatter
  extend Teaspoon::Registry
  extend Teaspoon::Registry::HasDefault
end
class Teaspoon::Configuration
  def asset_manifest; end
  def asset_manifest=(obj); end
  def asset_paths; end
  def asset_paths=(obj); end
  def color; end
  def color=(obj); end
  def coverage_configs; end
  def coverage_configs=(obj); end
  def driver; end
  def driver=(obj); end
  def driver_options; end
  def driver_options=(obj); end
  def driver_timeout; end
  def driver_timeout=(obj); end
  def fail_fast; end
  def fail_fast=(obj); end
  def fixture_paths; end
  def fixture_paths=(obj); end
  def formatters; end
  def formatters=(obj); end
  def mount_at; end
  def mount_at=(obj); end
  def root; end
  def root=(obj); end
  def self.allocate; end
  def self.asset_manifest; end
  def self.asset_manifest=(obj); end
  def self.asset_paths; end
  def self.asset_paths=(obj); end
  def self.branches_coverage_threshold=(*_args); end
  def self.color; end
  def self.color=(obj); end
  def self.context=(*_args); end
  def self.coverage(name = nil, &block); end
  def self.coverage=(*_args); end
  def self.coverage_configs; end
  def self.coverage_configs=(obj); end
  def self.coverage_output_dir=(*_args); end
  def self.coverage_reports=(*_args); end
  def self.driver; end
  def self.driver=(obj); end
  def self.driver_cli_options=(val); end
  def self.driver_options; end
  def self.driver_options=(obj); end
  def self.driver_timeout; end
  def self.driver_timeout=(obj); end
  def self.fail_fast; end
  def self.fail_fast=(obj); end
  def self.fixture_path=(*args); end
  def self.fixture_paths; end
  def self.fixture_paths=(obj); end
  def self.formatters; end
  def self.formatters=(obj); end
  def self.functions_coverage_threshold=(*_args); end
  def self.instance; end
  def self.lines_coverage_threshold=(*_args); end
  def self.mount_at; end
  def self.mount_at=(obj); end
  def self.new(*arg0); end
  def self.override(config, value); end
  def self.override_from_env(env); end
  def self.override_from_options(options); end
  def self.root; end
  def self.root=(path); end
  def self.server; end
  def self.server=(obj); end
  def self.server_host; end
  def self.server_host=(obj); end
  def self.server_port; end
  def self.server_port=(obj); end
  def self.server_timeout; end
  def self.server_timeout=(obj); end
  def self.statements_coverage_threshold=(*_args); end
  def self.suite(name = nil, &block); end
  def self.suite_configs; end
  def self.suite_configs=(obj); end
  def self.suppress_log; end
  def self.suppress_log=(obj); end
  def self.use_coverage; end
  def self.use_coverage=(obj); end
  def server; end
  def server=(obj); end
  def server_host; end
  def server_host=(obj); end
  def server_port; end
  def server_port=(obj); end
  def server_timeout; end
  def server_timeout=(obj); end
  def suite_configs; end
  def suite_configs=(obj); end
  def suppress_log; end
  def suppress_log=(obj); end
  def use_coverage; end
  def use_coverage=(obj); end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Teaspoon::Configuration::Suite
  def body_partial; end
  def body_partial=(arg0); end
  def boot_partial; end
  def boot_partial=(arg0); end
  def expand_assets; end
  def expand_assets=(arg0); end
  def helper; end
  def helper=(arg0); end
  def hook(group = nil, &block); end
  def hooks; end
  def hooks=(arg0); end
  def initialize(name = nil); end
  def javascripts; end
  def javascripts=(arg0); end
  def js_config=(*_args); end
  def js_extensions; end
  def js_extensions=(arg0); end
  def matcher; end
  def matcher=(arg0); end
  def no_coverage(*arg0); end
  def no_coverage=(*arg0); end
  def normalize_asset_path=(*_args); end
  def stylesheets; end
  def stylesheets=(arg0); end
  def use_framework(name, version = nil); end
  def use_framework=(name, _version = nil); end
end
class Teaspoon::Configuration::Coverage
  def branches; end
  def branches=(arg0); end
  def functions; end
  def functions=(arg0); end
  def ignore; end
  def ignore=(arg0); end
  def initialize; end
  def lines; end
  def lines=(arg0); end
  def output_path; end
  def output_path=(arg0); end
  def reports; end
  def reports=(arg0); end
  def statements; end
  def statements=(arg0); end
end
module Teaspoon::Framework
  def self.default; end
  extend Teaspoon::Registry
end
module Teaspoon::Environment
  def self.check_env!(override = nil); end
  def self.find_env(override = nil); end
  def self.load(options = nil); end
  def self.load_rails; end
  def self.rails_loaded?; end
  def self.require_env(file); end
  def self.require_environment(override = nil); end
  def self.standard_environments; end
end
class Teaspoon::Suite
  def asset_and_dependencies(asset); end
  def asset_from_file(original); end
  def asset_tree(sources); end
  def asset_url(asset); end
  def body_partial(*args, &block); end
  def boot_partial(*args, &block); end
  def config; end
  def config=(arg0); end
  def coverage_requested?; end
  def glob; end
  def helper(*args, &block); end
  def hooks(*args, &block); end
  def include_spec_for?(file); end
  def initialize(options = nil); end
  def instrument_file?(file); end
  def javascripts(*args, &block); end
  def matched_spec_file?(file); end
  def name; end
  def name=(arg0); end
  def normalize_js_extension(original_filename); end
  def self.all; end
  def self.resolve_spec_for(file); end
  def spec_assets(include_helper = nil); end
  def spec_files; end
  def specs; end
  def specs_from_file; end
  def stylesheets(*args, &block); end
  def suite_configuration; end
end
class Teaspoon::Coverage
  def check_thresholds(&block); end
  def generate_report(input, format); end
  def generate_reports(&block); end
  def initialize(suite_name, data); end
  def input_path(&block); end
  def self.configuration(name = nil); end
  def self.normalize_config_name(name); end
  def threshold_args; end
end
class Teaspoon::Instrumentation
  def add_instrumentation(asset); end
  def initialize(response); end
  def instrument(input); end
  def instrumented_response; end
  def self.add?(response, env); end
  def self.add_to(response, env); end
  def self.executable; end
  def self.ignored?(asset); end
  extend Teaspoon::Utility
end
module Teaspoon::SprocketsInstrumentation
  def call(env); end
end
class Teaspoon::Engine < Rails::Engine
  def self.add_precompiled_assets(assets); end
  def self.append_asset_paths(assets); end
  def self.default_root_path(root); end
  def self.inject_instrumentation; end
  def self.prepend_routes(app); end
end
module Anonymous_Module_35
end
module Anonymous_Module_36
end
module Teaspoon::Engine::ExceptionHandling
  def self.add_rails_handling; end
  def self.render_exceptions_with_javascript; end
  def self.using_phantomjs?; end
end
module ActionView::Helpers::AssetTagHelper
end
module Teaspoon::Mocha
end
class Teaspoon::Framework::Base
  def self._asset_paths; end
  def self._asset_paths=(arg0); end
  def self._install_path; end
  def self._install_path=(arg0); end
  def self._install_proc; end
  def self._install_proc=(arg0); end
  def self._template_paths; end
  def self._template_paths=(arg0); end
  def self._versions; end
  def self._versions=(arg0); end
  def self.add_asset_path(path); end
  def self.add_template_path(path); end
  def self.asset_paths; end
  def self.description; end
  def self.framework_name(name = nil); end
  def self.inherited(base); end
  def self.install_callback; end
  def self.install_path; end
  def self.install_to(path, &block); end
  def self.javascripts_for(version = nil); end
  def self.modify_config(_config); end
  def self.name; end
  def self.register_version(version, js_runner, options = nil); end
  def self.template_paths; end
  def self.versions; end
end
class Teaspoon::Mocha::Framework < Teaspoon::Framework::Base
end
class Teaspoon::SuiteController < ActionController::Base
  def _layout(lookup_context, formats); end
  def check_env; end
  def fixtures; end
  def hook; end
  def hook_params(params); end
  def index; end
  def prepend_fixture_paths; end
  def self.__callbacks; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self._routes; end
  def self._wrapper_options; end
  def self.before(*args); end
  def self.helpers_path; end
  def self.middleware_stack; end
  def show; end
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_37
end
module Anonymous_Module_37
  def _generate_paths_by_default; end
  def _routes; end
  def self._routes; end
  def self.full_url_for(options); end
  def self.optimize_routes_generation?; end
  def self.polymorphic_path(record_or_hash_or_array, options = nil); end
  def self.polymorphic_url(record_or_hash_or_array, options = nil); end
  def self.route_for(name, *args); end
  def self.url_for(options); end
  def self.url_options; end
  extend ActiveSupport::Concern
  extend Anonymous_Module_35
  extend Anonymous_Module_36
  include ActionDispatch::Routing::UrlFor
  include Anonymous_Module_35
  include Anonymous_Module_36
end
class Teaspoon::Driver::Base
end
class Teaspoon::Driver::Selenium < Teaspoon::Driver::Base
  def driver_options; end
  def initialize(options = nil); end
  def run_specs(runner, url); end
end
