# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class AbstractController::DoubleRenderError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

module AbstractController::Rendering
  DEFAULT_PROTECTED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module ActionCable
  INTERNAL = ::T.let(nil, ::T.untyped)
end

module ActionCable::Channel::TestCase::Behavior
  CHANNEL_IDENTIFIER = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::ClientSocket
  CLOSED = ::T.let(nil, ::T.untyped)
  CLOSING = ::T.let(nil, ::T.untyped)
  CONNECTING = ::T.let(nil, ::T.untyped)
  OPEN = ::T.let(nil, ::T.untyped)
end

module ActionCable::Connection::TestCase::Behavior
  DEFAULT_PATH = ::T.let(nil, ::T.untyped)
end

class ActionCable::RemoteConnections::RemoteConnection
  include ::ActionCable::Connection::InternalChannel
end

module ActionCable::Server::Connections
  BEAT_INTERVAL = ::T.let(nil, ::T.untyped)
end

module ActionCable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActionController::API
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::ActiveRecord::Railties::ControllerRuntime
  include ::AbstractController::Helpers
  include ::ActionController::Helpers
  include ::ActionController::ImplicitRender
  def _helper_methods(); end

  def _helper_methods=(val); end

  def _helper_methods?(); end

  def _helpers(); end

  def _helpers=(val); end

  def _helpers?(); end

  def helpers_path(); end

  def helpers_path=(val); end

  def helpers_path?(); end

  def include_all_helpers(); end

  def include_all_helpers=(val); end

  def include_all_helpers?(); end
end

class ActionController::API
  extend ::ActionController::Railties::Helpers
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionController::Helpers::ClassMethods
  def self._helper_methods(); end

  def self._helper_methods=(val); end

  def self._helper_methods?(); end

  def self._helpers(); end

  def self._helpers=(val); end

  def self._helpers?(); end

  def self.helpers_path(); end

  def self.helpers_path=(val); end

  def self.helpers_path?(); end

  def self.include_all_helpers(); end

  def self.include_all_helpers=(val); end

  def self.include_all_helpers?(); end
end

class ActionController::Base
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::ActiveRecord::Railties::ControllerRuntime
end

class ActionController::Base
  extend ::ActionController::Railties::Helpers
end

module ActionController::DataStreaming
  DEFAULT_SEND_FILE_DISPOSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SEND_FILE_TYPE = ::T.let(nil, ::T.untyped)
end

module ActionController::ForceSSL
  ACTION_OPTIONS = ::T.let(nil, ::T.untyped)
  REDIRECT_OPTIONS = ::T.let(nil, ::T.untyped)
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionController::HttpAuthentication::Token
  AUTHN_PAIR_DELIMITERS = ::T.let(nil, ::T.untyped)
  TOKEN_KEY = ::T.let(nil, ::T.untyped)
  TOKEN_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionController::Live::SSE
  PERMITTED_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionController::LogSubscriber
  def exist_fragment?(event); end

  def expire_fragment(event); end

  def expire_page(event); end

  def halted_callback(event); end

  def process_action(event); end

  def read_fragment(event); end

  def redirect_to(event); end

  def send_data(event); end

  def send_file(event); end

  def start_processing(event); end

  def unpermitted_parameters(event); end

  def write_fragment(event); end

  def write_page(event); end
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
end

class ActionController::MiddlewareStack
  EXCLUDE = ::T.let(nil, ::T.untyped)
  INCLUDE = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
end

class ActionController::Parameters
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  PERMITTED_SCALAR_TYPES = ::T.let(nil, ::T.untyped)
end

module ActionController::ParamsWrapper
  EXCLUDE_PARAMETERS = ::T.let(nil, ::T.untyped)
end

module ActionController::RequestForgeryProtection
  AUTHENTICITY_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
  NULL_ORIGIN_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActionController::TestCase
  include ::Rails::Controller::Testing::TestProcess
  include ::Rails::Controller::Testing::TemplateAssertions
end

class ActionController::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionController::TestSession
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
  def code(); end

  def code_and_name(); end

  def initialize(code_or_name); end

  def name(); end
  GENERIC_RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
end

module ActionDispatch::Assertions::ResponseAssertions
  RESPONSE_PREDICATES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::ContentSecurityPolicy::Middleware
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::ContentSecurityPolicy::Request
  NONCE = ::T.let(nil, ::T.untyped)
  NONCE_DIRECTIVES = ::T.let(nil, ::T.untyped)
  NONCE_GENERATOR = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies
  AUTHENTICATED_ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  COOKIES_DIGEST = ::T.let(nil, ::T.untyped)
  COOKIES_ROTATIONS = ::T.let(nil, ::T.untyped)
  COOKIES_SERIALIZER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_CIPHER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  ENCRYPTED_SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  GENERATOR_KEY = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
  MAX_COOKIE_SIZE = ::T.let(nil, ::T.untyped)
  SECRET_KEY_BASE = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_DIGEST = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  USE_AUTHENTICATED_COOKIE_ENCRYPTION = ::T.let(nil, ::T.untyped)
  USE_COOKIES_WITH_METADATA = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  DOMAIN_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Cookies::SerializedCookieJars
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

ActionDispatch::Cookies::SerializedCookieJars::SERIALIZER = ActiveSupport::MessageEncryptor::NullSerializer

class ActionDispatch::DebugLocks
  def call(env); end

  def initialize(app, path=T.unsafe(nil)); end
end

class ActionDispatch::DebugLocks
end

class ActionDispatch::DebugView
  def debug_hash(object); end

  def debug_headers(headers); end

  def debug_params(params); end

  def initialize(assigns); end

  def params_valid?(); end

  def protect_against_forgery?(); end

  def render(*_); end
  RESCUES_TEMPLATE_PATH = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::DebugView
end

class ActionDispatch::Flash
  KEY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::HostAuthorization
  DEFAULT_RESPONSE_APP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration::Runner
  APP_SESSIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Integration::Session
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Integration::RequestHelpers
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Format
  ESCAPE_PATH = ::T.let(nil, ::T.untyped)
  ESCAPE_SEGMENT = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Formatter::RegexCaseComparator
  DEFAULT_INPUT = ::T.let(nil, ::T.untyped)
  DEFAULT_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Builder
  DUMMY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Nodes::Symbol
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Route::VerbMatchers
  VERBS = ::T.let(nil, ::T.untyped)
  VERB_TO_CLASS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils::UriEncoder
  ALPHA = ::T.let(nil, ::T.untyped)
  DEC2HEX = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODE = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  SEGMENT = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Dot
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Each
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::FunctionalVisitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::String
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Visitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Reloader
end

class ActionDispatch::Reloader
end

class ActionDispatch::Request
  include ::ActionDispatch::Flash::RequestMethods
  ACTION_DISPATCH_REQUEST_ID = ::T.let(nil, ::T.untyped)
  ENV_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_LOOKUP = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  RFC2518 = ::T.let(nil, ::T.untyped)
  RFC2616 = ::T.let(nil, ::T.untyped)
  RFC3253 = ::T.let(nil, ::T.untyped)
  RFC3648 = ::T.let(nil, ::T.untyped)
  RFC3744 = ::T.let(nil, ::T.untyped)
  RFC4791 = ::T.let(nil, ::T.untyped)
  RFC5323 = ::T.let(nil, ::T.untyped)
  RFC5789 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::RequestId
  X_REQUEST_ID = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Constraints
  CALL = ::T.let(nil, ::T.untyped)
  SERVE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Mapping
  ANCHOR_CHARACTERS_REGEX = ::T.let(nil, ::T.untyped)
  JOINED_SEPARATORS = ::T.let(nil, ::T.untyped)
  OPTIONAL_FORMAT_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Resources
  CANONICAL_ACTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_ON_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Scope
  NULL = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_METHOD_SCOPES = ::T.let(nil, ::T.untyped)
  RESOURCE_SCOPES = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Scoping
  POISON = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::PathRedirect
  URL_PARTS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet::Generator
  PARAMETERIZE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  def _main_app(); end

  def _spree(); end

  def _teaspoon(); end

  def main_app(); end

  def spree(); end

  def teaspoon(); end
end

class ActionDispatch::Routing::RouteWrapper
  include ::Sprockets::Rails::RouteWrapper
  def assets_prefix(); end

  def assets_prefix=(val); end

  def assets_prefix?(); end
end

class ActionDispatch::Routing::RouteWrapper
  def self.assets_prefix(); end

  def self.assets_prefix=(val); end

  def self.assets_prefix?(); end
end

class ActionDispatch::Routing::RoutesProxy
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end

  def initialize(routes, scope, helpers, script_namer=T.unsafe(nil)); end

  def routes(); end

  def routes=(routes); end

  def scope(); end

  def scope=(scope); end
end

class ActionDispatch::Routing::RoutesProxy
  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

class ActionDispatch::SSL
  def call(env); end

  def initialize(app, redirect: T.unsafe(nil), hsts: T.unsafe(nil), secure_cookies: T.unsafe(nil)); end
  HSTS_EXPIRES_IN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SSL
  def self.default_hsts_options(); end
end

class ActionDispatch::Session::CacheStore
  def delete_session(env, sid, options); end

  def write_session(env, sid, session, options); end
end

class ActionDispatch::Session::CacheStore
end

class ActionDispatch::ShowExceptions
  FAILSAFE_RESPONSE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SystemTestCase
  include ::Capybara::DSL
  include ::Capybara::DSLRSpecProxyInstaller
  include ::Capybara::Minitest::Assertions
  include ::ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  include ::ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  def initialize(*_); end

  def method_missing(method, *args, &block); end
end

class ActionDispatch::SystemTestCase
  def self.driven_by(driver, using: T.unsafe(nil), screen_size: T.unsafe(nil), options: T.unsafe(nil), &capabilities); end

  def self.driver(); end

  def self.driver=(val); end

  def self.driver?(); end

  def self.start_application(); end
end

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  def take_failed_screenshot(); end

  def take_screenshot(); end
end

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
end

module ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  def after_teardown(); end

  def before_setup(); end

  def before_teardown(); end

  def host!(host); end
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
end

class ActionDispatch::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::TestResponse
  def parsed_body(); end

  def response_parser(); end
end

class ActionDispatch::TestResponse
  def self.from_response(response); end
end

class ActionMailbox::Base
  include ::ActionMailbox::Routing
end

module ActionMailbox::Callbacks
  TERMINATOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::AbstractController::UrlFor
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base
  extend ::AbstractController::UrlFor::ClassMethods
  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

class ActionMailer::InlinePreviewInterceptor
  PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionMailer::LogSubscriber
  def deliver(event); end

  def process(event); end

  def receive(event); end
end

module ActionMailer::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionPack::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionText::Attachable
  LOCATOR_NAME = ::T.let(nil, ::T.untyped)
end

class ActionText::Attachment
  include ::ActionText::Attachments::Caching
  include ::ActionText::Attachments::Minification
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SELECTOR = ::T.let(nil, ::T.untyped)
  TAG_NAME = ::T.let(nil, ::T.untyped)
end

class ActionText::TrixAttachment
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_TYPES = ::T.let(nil, ::T.untyped)
  COMPOSED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SELECTOR = ::T.let(nil, ::T.untyped)
  TAG_NAME = ::T.let(nil, ::T.untyped)
end

module ActionView
  ENCODING_FLAG = ::T.let(nil, ::T.untyped)
end

class ActionView::AbstractRenderer::RenderedTemplate
  EMPTY_SPACER = ::T.let(nil, ::T.untyped)
end

class ActionView::Base
  include ::ActionCable::Helpers::ActionCableHelper
  include ::CanonicalRails::TagHelper
  include ::Sprockets::Rails::Helper
  include ::Sprockets::Rails::Utils
  def assets_environment(); end

  def assets_environment=(val); end

  def assets_environment?(); end

  def assets_manifest(); end

  def assets_manifest=(val); end

  def assets_manifest?(); end

  def assets_precompile(); end

  def assets_precompile=(val); end

  def assets_precompile?(); end

  def assets_prefix(); end

  def assets_prefix=(val); end

  def assets_prefix?(); end

  def check_precompiled_asset(); end

  def check_precompiled_asset=(val); end

  def check_precompiled_asset?(); end

  def debug_assets(); end

  def debug_assets=(val); end

  def debug_assets?(); end

  def digest_assets(); end

  def digest_assets=(val); end

  def digest_assets?(); end

  def precompiled_asset_checker(); end

  def precompiled_asset_checker=(val); end

  def precompiled_asset_checker?(); end

  def resolve_assets_with(); end

  def resolve_assets_with=(val); end

  def resolve_assets_with?(); end

  def unknown_asset_fallback(); end

  def unknown_asset_fallback=(val); end

  def unknown_asset_fallback?(); end
end

class ActionView::Base
  def self.assets_environment(); end

  def self.assets_environment=(val); end

  def self.assets_environment?(); end

  def self.assets_manifest(); end

  def self.assets_manifest=(val); end

  def self.assets_manifest?(); end

  def self.assets_precompile(); end

  def self.assets_precompile=(val); end

  def self.assets_precompile?(); end

  def self.assets_prefix(); end

  def self.assets_prefix=(val); end

  def self.assets_prefix?(); end

  def self.check_precompiled_asset(); end

  def self.check_precompiled_asset=(val); end

  def self.check_precompiled_asset?(); end

  def self.debug_assets(); end

  def self.debug_assets=(val); end

  def self.debug_assets?(); end

  def self.digest_assets(); end

  def self.digest_assets=(val); end

  def self.digest_assets?(); end

  def self.precompiled_asset_checker(); end

  def self.precompiled_asset_checker=(val); end

  def self.precompiled_asset_checker?(); end

  def self.resolve_assets_with(); end

  def self.resolve_assets_with=(val); end

  def self.resolve_assets_with?(); end

  def self.unknown_asset_fallback(); end

  def self.unknown_asset_fallback=(val); end

  def self.unknown_asset_fallback?(); end
end

class ActionView::DependencyTracker::ERBTracker
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  IDENTIFIER = ::T.let(nil, ::T.untyped)
  LAYOUT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  LAYOUT_HASH_KEY = ::T.let(nil, ::T.untyped)
  PARTIAL_HASH_KEY = ::T.let(nil, ::T.untyped)
  RENDER_ARGUMENTS = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  VARIABLE_OR_METHOD_CHAIN = ::T.let(nil, ::T.untyped)
end

class ActionView::LogSubscriber
  include ::Kaminari::ActionViewExtension::LogSubscriberSilencer
  def render_collection(event); end

  def render_template(event); end
  EMPTY = ::T.let(nil, ::T.untyped)
  VIEWS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActionView::LookupContext::Accessors
  DEFAULT_PROCS = ::T.let(nil, ::T.untyped)
end

class ActionView::OutputBuffer
  def append=(value); end

  def initialize(*_); end

  def safe_append=(value); end

  def safe_expr_append=(val); end
end

class ActionView::OutputBuffer
end

class ActionView::OutputFlow
  def append(key, value); end

  def append!(key, value); end

  def content(); end

  def get(key); end

  def set(key, value); end
end

class ActionView::OutputFlow
end

class ActionView::PartialRenderer
  include ::ActiveRecord::Railties::CollectionCacheAssociationLoading
  IDENTIFIER_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  OPTION_AS_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  PREFIXED_PARTIAL_NAMES = ::T.let(nil, ::T.untyped)
end

class ActionView::PathResolver
  DEFAULT_PATTERN = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class ActionView::Railtie
  NULL_OPTION = ::T.let(nil, ::T.untyped)
end

class ActionView::Renderer
  def cache_hits(); end

  def initialize(lookup_context); end

  def lookup_context(); end

  def lookup_context=(lookup_context); end

  def render(context, options); end

  def render_body(context, options); end

  def render_partial(context, options, &block); end

  def render_partial_to_object(context, options, &block); end

  def render_template(context, options); end

  def render_template_to_object(context, options); end

  def render_to_object(context, options); end
end

class ActionView::Renderer
end

class ActionView::Resolver::Cache
  KEY_BLOCK = ::T.let(nil, ::T.untyped)
  NAME_BLOCK = ::T.let(nil, ::T.untyped)
  NO_TEMPLATES = ::T.let(nil, ::T.untyped)
  PARTIAL_BLOCK = ::T.let(nil, ::T.untyped)
  PREFIX_BLOCK = ::T.let(nil, ::T.untyped)
end

module ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def default_url_options=(obj); end
end

module ActionView::RoutingUrlFor
  def self.default_url_options=(obj); end
end

class ActionView::StreamingBuffer
  def <<(value); end

  def append=(value); end

  def concat(value); end

  def html_safe(); end

  def initialize(block); end

  def safe_append=(value); end

  def safe_concat(value); end
end

class ActionView::StreamingBuffer
end

class ActionView::StreamingFlow
  def initialize(view, fiber); end
end

class ActionView::StreamingFlow
end

class ActionView::StreamingTemplateRenderer
  def render_template(view, template, layout_name=T.unsafe(nil), locals=T.unsafe(nil)); end
end

class ActionView::StreamingTemplateRenderer::Body
  def each(&block); end

  def initialize(&start); end
end

class ActionView::StreamingTemplateRenderer::Body
end

class ActionView::StreamingTemplateRenderer
end

class ActionView::Template::Error
  SOURCE_CODE_RADIUS = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB
  ENCODING_TAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB::Erubi
  BLOCK_EXPR = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Inline
  Finalizer = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Sources::File
  def initialize(filename); end
end

class ActionView::Template::Sources::File
end

class ActionView::Template::Types::Type
  SET = ::T.let(nil, ::T.untyped)
end

class ActionView::TemplateRenderer
  def render(context, options); end
end

class ActionView::TemplateRenderer
end

class ActionView::TestCase
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Routing::UrlFor
  include ::Rails::Controller::Testing::TemplateAssertions
end

module ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Routing::UrlFor
  INTERNAL_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionView::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveJob::Arguments
  OBJECT_SERIALIZER_KEY = ::T.let(nil, ::T.untyped)
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Callbacks
end

class ActiveJob::ConfiguredJob
  def initialize(job_class, options=T.unsafe(nil)); end

  def perform_later(*args); end

  def perform_now(*args); end
end

class ActiveJob::ConfiguredJob
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  DEFAULT_EXECUTOR_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::QueueAdapters::InlineAdapter
  def enqueue(job); end

  def enqueue_at(*_); end
end

class ActiveJob::QueueAdapters::InlineAdapter
end

class ActiveJob::TestCase
  include ::ActiveJob::TestHelper
end

class ActiveJob::TestCase
end

module ActiveJob::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveMerchant::Billing::AVSResult
  MESSAGES = ::T.let(nil, ::T.untyped)
  POSTAL_MATCH_CODE = ::T.let(nil, ::T.untyped)
  STREET_MATCH_CODE = ::T.let(nil, ::T.untyped)
end

module ActiveMerchant::Billing::Base
  GATEWAY_MODE_DEPRECATION_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveMerchant::Billing::CVVResult
  MESSAGES = ::T.let(nil, ::T.untyped)
end

class ActiveMerchant::Billing::CreditCard
  READ_METHOD_DESCRIPTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveMerchant::Billing::CreditCardMethods
  ALELO_RANGES = ::T.let(nil, ::T.untyped)
  CABAL_RANGES = ::T.let(nil, ::T.untyped)
  CARD_COMPANY_DETECTORS = ::T.let(nil, ::T.untyped)
  CARNET_BINS = ::T.let(nil, ::T.untyped)
  CARNET_RANGES = ::T.let(nil, ::T.untyped)
  ELECTRON_RANGES = ::T.let(nil, ::T.untyped)
  ELO_RANGES = ::T.let(nil, ::T.untyped)
  MAESTRO_BINS = ::T.let(nil, ::T.untyped)
  MAESTRO_RANGES = ::T.let(nil, ::T.untyped)
  MASTERCARD_RANGES = ::T.let(nil, ::T.untyped)
  NARANJA_RANGES = ::T.let(nil, ::T.untyped)
  UNIONPAY_RANGES = ::T.let(nil, ::T.untyped)
end

module ActiveMerchant::Billing::CreditCardMethods::ClassMethods
  EVEN_LUHN_VALUE = ::T.let(nil, ::T.untyped)
  ODD_LUHN_VALUE = ::T.let(nil, ::T.untyped)
end

class ActiveModel::AttributeMutationTracker
  OPTION_NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Attributes
  def attribute_names(); end

  def attributes(); end

  def initialize(*_); end
end

module ActiveModel::Attributes::ClassMethods
  def attribute(name, type=T.unsafe(nil), **options); end

  def attribute_names(); end
end

module ActiveModel::Attributes::ClassMethods
end

module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
end

module ActiveModel::Lint
end

module ActiveModel::Lint::Tests
  def test_errors_aref(); end

  def test_model_naming(); end

  def test_persisted?(); end

  def test_to_key(); end

  def test_to_param(); end

  def test_to_partial_path(); end
end

module ActiveModel::Lint::Tests
end

module ActiveModel::Lint
end

class ActiveModel::Type::Boolean
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Date
  ISO_DATE = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Decimal
  BIGDECIMAL_PRECISION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type::Helpers::TimeValue
  ISO_DATETIME = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Integer
  DEFAULT_LIMIT = ::T.let(nil, ::T.untyped)
end

module ActiveModel::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Validations::LengthValidator
  CHECKS = ::T.let(nil, ::T.untyped)
  MESSAGES = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::AdvisoryLockBase
  include ::ActiveRecord::AdvisoryLockBase::GeneratedAttributeMethods
  include ::ActiveRecord::AdvisoryLockBase::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::AdvisoryLockBase::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::AdvisoryLockBase::GeneratedRelationMethods
end

class ActiveRecord::AdvisoryLockBase::ActiveRecord_AssociationRelation
end

class ActiveRecord::AdvisoryLockBase::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::AdvisoryLockBase::GeneratedRelationMethods
end

class ActiveRecord::AdvisoryLockBase::ActiveRecord_Associations_CollectionProxy
end

class ActiveRecord::AdvisoryLockBase::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::AdvisoryLockBase::GeneratedRelationMethods
end

class ActiveRecord::AdvisoryLockBase::ActiveRecord_Relation
end

module ActiveRecord::AdvisoryLockBase::GeneratedAssociationMethods
end

module ActiveRecord::AdvisoryLockBase::GeneratedAssociationMethods
end

module ActiveRecord::AdvisoryLockBase::GeneratedAttributeMethods
end

module ActiveRecord::AdvisoryLockBase::GeneratedAttributeMethods
  extend ::Mutex_m
end

module ActiveRecord::AdvisoryLockBase::GeneratedRelationMethods
end

module ActiveRecord::AdvisoryLockBase::GeneratedRelationMethods
  extend ::Mutex_m
end

class ActiveRecord::AdvisoryLockBase
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class ActiveRecord::Associations::AliasTracker
  def aliased_table_for(table_name, aliased_name, type_caster); end

  def aliases(); end

  def initialize(connection, aliases); end
end

class ActiveRecord::Associations::AliasTracker
  def self.create(connection, initial_table, joins); end

  def self.initial_count_for(connection, name, table_joins); end
end

class ActiveRecord::Associations::AssociationScope
  def initialize(value_transformation); end

  def scope(association); end
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::AssociationScope::ReflectionProxy
  def aliased_table(); end

  def all_includes(); end

  def initialize(reflection, aliased_table); end
end

class ActiveRecord::Associations::AssociationScope::ReflectionProxy
end

class ActiveRecord::Associations::AssociationScope
  def self.create(&block); end

  def self.get_bind_values(owner, chain); end

  def self.scope(association); end
end

class ActiveRecord::Associations::BelongsToAssociation
  include ::HandleParanoiaDestroyedInBelongsToAssociation
end

class ActiveRecord::Associations::BelongsToPolymorphicAssociation
end

class ActiveRecord::Associations::BelongsToPolymorphicAssociation
end

class ActiveRecord::Associations::Builder::Association
  VALID_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::Builder::CollectionAssociation
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::Builder::HasAndBelongsToMany
  def association_name(); end

  def initialize(association_name, lhs_model, options); end

  def lhs_model(); end

  def middle_reflection(join_model); end

  def options(); end

  def through_model(); end
end

class ActiveRecord::Associations::Builder::HasAndBelongsToMany
end

class ActiveRecord::Associations::CollectionAssociation
  def add_to_target(record, skip_callbacks=T.unsafe(nil), &block); end

  def build(attributes=T.unsafe(nil), &block); end

  def concat(*records); end

  def delete(*records); end

  def delete_all(dependent=T.unsafe(nil)); end

  def destroy(*records); end

  def destroy_all(); end

  def empty?(); end

  def find(*args); end

  def find_from_target?(); end

  def ids_reader(); end

  def ids_writer(ids); end

  def include?(record); end

  def null_scope?(); end

  def reader(); end

  def replace(other_array); end

  def size(); end

  def transaction(*args); end

  def writer(records); end
end

class ActiveRecord::Associations::CollectionAssociation
end

class ActiveRecord::Associations::HasManyAssociation
  include ::ActiveRecord::Associations::ForeignAssociation
  def handle_dependency(); end

  def insert_record(record, validate=T.unsafe(nil), raise=T.unsafe(nil)); end
end

class ActiveRecord::Associations::HasManyAssociation
end

class ActiveRecord::Associations::HasManyThroughAssociation
  include ::ActiveRecord::Associations::ThroughAssociation
end

class ActiveRecord::Associations::HasManyThroughAssociation
end

class ActiveRecord::Associations::HasOneAssociation
  include ::HandleParanoiaDestroyedInHasOneAssociation
end

class ActiveRecord::Associations::HasOneThroughAssociation
  include ::ActiveRecord::Associations::ThroughAssociation
end

class ActiveRecord::Associations::HasOneThroughAssociation
end

class ActiveRecord::Associations::JoinDependency
  include ::Polyamorous::JoinDependencyExtensions
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation
  include ::Polyamorous::JoinAssociationExtensions
  include ::Polyamorous::SwappingReflectionClass
end

class ActiveRecord::Associations::JoinDependency::JoinBase
  def initialize(base_klass, table, children); end
end

class ActiveRecord::Associations::JoinDependency::JoinBase
end

class ActiveRecord::Associations::Preloader::AlreadyLoaded
  def initialize(klass, owners, reflection, preload_scope); end

  def preloaded_records(); end

  def records_by_owner(); end

  def run(); end
end

class ActiveRecord::Associations::Preloader::AlreadyLoaded
end

class ActiveRecord::Associations::Preloader::Association
  def initialize(klass, owners, reflection, preload_scope); end

  def preloaded_records(); end

  def records_by_owner(); end

  def run(); end
end

class ActiveRecord::Associations::Preloader::Association
end

class ActiveRecord::Associations::Preloader::ThroughAssociation
  def initialize(*_); end
  PRELOADER = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::Preloader::ThroughAssociation
end

class ActiveRecord::Associations::Preloader
  extend ::ActiveSupport::Autoload
end

module ActiveRecord::Associations::ThroughAssociation
  def source_reflection(*args, &block); end
end

module ActiveRecord::Associations::ThroughAssociation
end

class ActiveRecord::Base
  include ::GlobalID::Identification
  include ::Paperclip::Validators::HelperMethods
  include ::ActiveStorage::Attached::Model
  include ::ActiveStorage::Reflection::ActiveRecordExtensions
  include ::ActionText::Attribute
  def attachment_reflections(); end

  def attachment_reflections?(); end
end

module ActiveRecord::Base::GeneratedAttributeMethods
  extend ::Mutex_m
end

class ActiveRecord::Base
  extend ::AwesomeNestedSetOvveride::RelateParent
  extend ::SorbetRails::CustomFinderMethods
  extend ::SorbetRails::PluckToTStruct
  extend ::ActionText::Attribute::ClassMethods
  def self.attachment_reflections(); end

  def self.attachment_reflections=(val); end

  def self.attachment_reflections?(); end

  def self.inherited(child); end

  def self.sbr_old_inherited(kls); end
end

module ActiveRecord::Batches
  ORDER_IGNORE_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Callbacks
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConcurrentMigrationError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
  RELEASE_LOCK_FAILED_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  include ::Paperclip::Schema::Statements
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  COMMENT_REGEX = ::T.let(nil, ::T.untyped)
  SIMPLE_INT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::SQLite3Adapter
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  COLLATE_REGEX = ::T.let(nil, ::T.untyped)
  NATIVE_DATABASE_TYPES = ::T.let(nil, ::T.untyped)
end

ActiveRecord::ConnectionAdapters::SchemaCreation = ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation

class ActiveRecord::ConnectionAdapters::StatementPool
  DEFAULT_STATEMENT_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::Table
  include ::Paperclip::Schema::TableDefinition
end

class ActiveRecord::ConnectionAdapters::TableDefinition
  include ::Paperclip::Schema::TableDefinition
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionHandling
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  RAILS_ENV = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Enum
  SR_ENUM_KEYWORDS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Enum
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class ActiveRecord::ExplainRegistry
  def self.collect?(*args, &block); end
end

class ActiveRecord::ExplainSubscriber
  EXPLAINED_SQLS = ::T.let(nil, ::T.untyped)
  IGNORED_PAYLOADS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::FinderMethods
  ONE_AS_ONE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::FixtureSet
  MAX_ID = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::InternalMetadata
  include ::ActiveRecord::InternalMetadata::GeneratedAttributeMethods
  include ::ActiveRecord::InternalMetadata::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::InternalMetadata::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_AssociationRelation
end

class ActiveRecord::InternalMetadata::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_Associations_CollectionProxy
end

class ActiveRecord::InternalMetadata::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_Relation
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAttributeMethods
end

module ActiveRecord::InternalMetadata::GeneratedAttributeMethods
  extend ::Mutex_m
end

module ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

module ActiveRecord::InternalMetadata::GeneratedRelationMethods
  extend ::Mutex_m
end

class ActiveRecord::InternalMetadata
  extend ::Kaminari::ConfigurationMethods::ClassMethods
end

module ActiveRecord::LegacyYamlAdapter
end

module ActiveRecord::LegacyYamlAdapter::Rails41
end

module ActiveRecord::LegacyYamlAdapter::Rails41
  def self.convert(klass, coder); end
end

module ActiveRecord::LegacyYamlAdapter::Rails420
end

module ActiveRecord::LegacyYamlAdapter::Rails420
  def self.convert(klass, coder); end
end

module ActiveRecord::LegacyYamlAdapter
  def self.convert(klass, coder); end
end

class ActiveRecord::Locking::LockingType
end

class ActiveRecord::Middleware::DatabaseSelector
  def call(env); end

  def context_klass(); end

  def initialize(app, resolver_klass=T.unsafe(nil), context_klass=T.unsafe(nil), options=T.unsafe(nil)); end

  def options(); end

  def resolver_klass(); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  def context(); end

  def delay(); end

  def initialize(context, options=T.unsafe(nil)); end

  def instrumenter(); end

  def read(&blk); end

  def write(&blk); end
  SEND_TO_REPLICA_DELAY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  def initialize(session); end

  def last_write_timestamp(); end

  def session(); end

  def update_last_write_timestamp(); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  def self.call(request); end

  def self.convert_time_to_timestamp(time); end

  def self.convert_timestamp_to_time(timestamp); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  def self.call(context, options=T.unsafe(nil)); end
end

class ActiveRecord::Middleware::DatabaseSelector
end

class ActiveRecord::Migration::CommandRecorder
  include ::Paperclip::Schema::CommandRecorder
  ReversibleAndIrreversibleMethods = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NestedAttributes
  UNASSIGNABLE_KEYS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NestedAttributes::ClassMethods
  REJECT_ALL_BLANK_PROC = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NullRelation
  def any?(); end

  def calculate(operation, _column_name); end

  def delete(_id_or_array); end

  def delete_all(); end

  def empty?(); end

  def exists?(_conditions=T.unsafe(nil)); end

  def many?(); end

  def none?(); end

  def one?(); end

  def or(other); end

  def pluck(*column_names); end

  def to_sql(); end

  def update_all(_updates); end
end

module ActiveRecord::NullRelation
end

module ActiveRecord::QueryMethods
  DEFAULT_VALUES = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_HASH = ::T.let(nil, ::T.untyped)
  STRUCTURAL_OR_METHODS = ::T.let(nil, ::T.untyped)
  VALID_DIRECTIONS = ::T.let(nil, ::T.untyped)
  VALID_UNSCOPING_VALUES = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Querying
  QUERYING_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Reflection::AbstractReflection
  include ::Polyamorous::ReflectionExtensions
end

class ActiveRecord::Reflection::AssociationReflection
  INVALID_AUTOMATIC_INVERSE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_AUTOMATIC_INVERSE_MACROS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Reflection
  extend ::ActiveStorage::Reflection::ReflectionExtension
end

class ActiveRecord::Relation
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::SorbetRails::CustomFinderMethods
  include ::SorbetRails::PluckToTStruct
  CLAUSE_METHODS = ::T.let(nil, ::T.untyped)
  INVALID_METHODS_FOR_DELETE_ALL = ::T.let(nil, ::T.untyped)
  MULTI_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  SINGLE_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALUE_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::Merger
  NORMAL_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::WhereClause
  ARRAY_WITH_EMPTY_STRING = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::SchemaMigration
  RelationType = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::SchemaMigration::GeneratedAttributeMethods
  extend ::Mutex_m
end

module ActiveRecord::SchemaMigration::GeneratedRelationMethods
  extend ::Mutex_m
end

class ActiveRecord::Scoping::ScopeRegistry
  VALID_SCOPE_TYPES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Scoping::ScopeRegistry
  def self.set_value_for(*args, &block); end

  def self.value_for(*args, &block); end
end

class ActiveRecord::StatementCache
  def execute(params, connection, &block); end

  def initialize(query_builder, bind_map, klass); end
end

class ActiveRecord::StatementCache::BindMap
  def bind(values); end

  def initialize(bound_attributes); end
end

class ActiveRecord::StatementCache::BindMap
end

class ActiveRecord::StatementCache::Params
  def bind(); end
end

class ActiveRecord::StatementCache::Params
end

class ActiveRecord::StatementCache::PartialQuery
  def initialize(values); end
end

class ActiveRecord::StatementCache::PartialQuery
end

class ActiveRecord::StatementCache::PartialQueryCollector
  def <<(str); end

  def add_bind(obj); end

  def value(); end
end

class ActiveRecord::StatementCache::PartialQueryCollector
end

class ActiveRecord::StatementCache::Query
  def initialize(sql); end

  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Query
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache
  def self.create(connection, callable=T.unsafe(nil), &block); end

  def self.partial_query(values); end

  def self.partial_query_collector(); end

  def self.query(sql); end

  def self.unsupported_value?(value); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def charset(); end

  def collation(); end

  def connection(*args, &block); end

  def create(); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  ER_DB_CREATE_EXISTS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def charset(); end

  def clear_active_connections!(*args, &block); end

  def collation(); end

  def connection(*args, &block); end

  def create(master_established=T.unsafe(nil)); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
  ON_ERROR_STOP_1 = ::T.let(nil, ::T.untyped)
  SQL_COMMENT_BEGIN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def charset(); end

  def connection(*args, &block); end

  def create(); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration, root=T.unsafe(nil)); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
end

module ActiveRecord::TestDatabases
end

module ActiveRecord::TestDatabases
  def self.create_and_load_schema(i, env_name:); end
end

module ActiveRecord::Transactions
  ACTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Type::Serialized
end

class ActiveRecord::Type::Time::Value
end

module ActiveRecord::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Validations::UniquenessValidator
  include ::ActiveRecord::Validations::UniquenessParanoiaValidator
end

class ActiveStorage::LogSubscriber
  def service_delete(event); end

  def service_delete_prefixed(event); end

  def service_download(event); end

  def service_exist(event); end

  def service_streaming_download(event); end

  def service_upload(event); end

  def service_url(event); end
end

module ActiveStorage::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::BacktraceCleaner
  FORMATTED_GEMS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache
  UNIVERSAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::Entry
  DEFAULT_COMPRESS_LIMIT = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Callbacks
  CALLBACK_FILTER_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Dependencies
  Reference = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration
  PARTS = ::T.let(nil, ::T.untyped)
  PARTS_IN_SECONDS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
  SECONDS_PER_HOUR = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MINUTE = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MONTH = ::T.let(nil, ::T.untyped)
  SECONDS_PER_WEEK = ::T.let(nil, ::T.untyped)
  SECONDS_PER_YEAR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser
  COMMA = ::T.let(nil, ::T.untyped)
  DATE_COMPONENT = ::T.let(nil, ::T.untyped)
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
  DATE_MARKER = ::T.let(nil, ::T.untyped)
  DATE_TO_PART = ::T.let(nil, ::T.untyped)
  PERIOD = ::T.let(nil, ::T.untyped)
  PERIOD_OR_COMMA = ::T.let(nil, ::T.untyped)
  SIGN_MARKER = ::T.let(nil, ::T.untyped)
  TIME_COMPONENT = ::T.let(nil, ::T.untyped)
  TIME_COMPONENTS = ::T.let(nil, ::T.untyped)
  TIME_MARKER = ::T.let(nil, ::T.untyped)
  TIME_TO_PART = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::EncryptedFile
  CIPHER = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ExecutionWrapper
  Null = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
  DEFAULT_DELIMITER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
  DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
  INVERTED_DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
  STORAGE_UNITS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::RangeWithFormat
  RANGE_FORMATS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TestCase
  include ::ActiveSupport::Testing::SetupAndTeardown
end

module ActiveSupport::Testing::Assertions
  UNTRACKED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Isolation::Subprocess
  ORIG_ARGV = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  PRECISIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  MAPPING = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::XMLConverter
  DISALLOWED_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini
  DEFAULT_ENCODINGS = ::T.let(nil, ::T.untyped)
  FORMATTING = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini_REXML
  CONTENT_KEY = ::T.let(nil, ::T.untyped)
end

class AddAmountRemainingToStoreCreditEvents::StoreCredit
  include ::AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedAttributeMethods
  include ::AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  def after_add_for_store_credit_events(); end

  def after_add_for_store_credit_events=(val); end

  def after_add_for_store_credit_events?(); end

  def after_remove_for_store_credit_events(); end

  def after_remove_for_store_credit_events=(val); end

  def after_remove_for_store_credit_events?(); end

  def autosave_associated_records_for_store_credit_events(*args); end

  def before_add_for_store_credit_events(); end

  def before_add_for_store_credit_events=(val); end

  def before_add_for_store_credit_events?(); end

  def before_remove_for_store_credit_events(); end

  def before_remove_for_store_credit_events=(val); end

  def before_remove_for_store_credit_events?(); end

  def validate_associated_records_for_store_credit_events(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class AddAmountRemainingToStoreCreditEvents::StoreCredit::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedRelationMethods
end

class AddAmountRemainingToStoreCreditEvents::StoreCredit::ActiveRecord_AssociationRelation
end

class AddAmountRemainingToStoreCreditEvents::StoreCredit::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedRelationMethods
end

class AddAmountRemainingToStoreCreditEvents::StoreCredit::ActiveRecord_Associations_CollectionProxy
end

class AddAmountRemainingToStoreCreditEvents::StoreCredit::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedRelationMethods
end

class AddAmountRemainingToStoreCreditEvents::StoreCredit::ActiveRecord_Relation
end

module AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedAssociationMethods
  def store_credit_event_ids(); end

  def store_credit_event_ids=(ids); end

  def store_credit_events(); end

  def store_credit_events=(value); end
end

module AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedAssociationMethods
end

module AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedAttributeMethods
end

module AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedAttributeMethods
  extend ::Mutex_m
end

module AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedRelationMethods
end

module AddAmountRemainingToStoreCreditEvents::StoreCredit::GeneratedRelationMethods
  extend ::Mutex_m
end

class AddAmountRemainingToStoreCreditEvents::StoreCredit
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.after_add_for_store_credit_events(); end

  def self.after_add_for_store_credit_events=(val); end

  def self.after_add_for_store_credit_events?(); end

  def self.after_remove_for_store_credit_events(); end

  def self.after_remove_for_store_credit_events=(val); end

  def self.after_remove_for_store_credit_events?(); end

  def self.before_add_for_store_credit_events(); end

  def self.before_add_for_store_credit_events=(val); end

  def self.before_add_for_store_credit_events?(); end

  def self.before_remove_for_store_credit_events(); end

  def self.before_remove_for_store_credit_events=(val); end

  def self.before_remove_for_store_credit_events?(); end

  def self.page(num=T.unsafe(nil)); end
end

class AddAmountRemainingToStoreCreditEvents::StoreCreditEvent
  include ::AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedAttributeMethods
  include ::AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  def autosave_associated_records_for_store_credit(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedRelationMethods
end

class AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::ActiveRecord_AssociationRelation
end

class AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedRelationMethods
end

class AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::ActiveRecord_Associations_CollectionProxy
end

class AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedRelationMethods
end

class AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::ActiveRecord_Relation
end

module AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedAssociationMethods
  def build_store_credit(*args, &block); end

  def create_store_credit(*args, &block); end

  def create_store_credit!(*args, &block); end

  def reload_store_credit(); end

  def store_credit(); end

  def store_credit=(value); end
end

module AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedAssociationMethods
end

module AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedAttributeMethods
end

module AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedAttributeMethods
  extend ::Mutex_m
end

module AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedRelationMethods
  def chronological(*args, &block); end
end

module AddAmountRemainingToStoreCreditEvents::StoreCreditEvent::GeneratedRelationMethods
  extend ::Mutex_m
end

class AddAmountRemainingToStoreCreditEvents::StoreCreditEvent
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.chronological(*args); end

  def self.page(num=T.unsafe(nil)); end
end

module Addressable::IDNA
  ACE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  ACE_PREFIX = ::T.let(nil, ::T.untyped)
  COMPOSITION_TABLE = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  PUNYCODE_BASE = ::T.let(nil, ::T.untyped)
  PUNYCODE_DAMP = ::T.let(nil, ::T.untyped)
  PUNYCODE_DELIMITER = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_BIAS = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_N = ::T.let(nil, ::T.untyped)
  PUNYCODE_MAXINT = ::T.let(nil, ::T.untyped)
  PUNYCODE_PRINT_ASCII = ::T.let(nil, ::T.untyped)
  PUNYCODE_SKEW = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMAX = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMIN = ::T.let(nil, ::T.untyped)
  UNICODE_DATA = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_CANONICAL = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMBINING_CLASS = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMPATIBILITY = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_EXCLUSION = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_LOWERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_TITLECASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_UPPERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  UNICODE_TABLE = ::T.let(nil, ::T.untyped)
  UTF8_REGEX = ::T.let(nil, ::T.untyped)
  UTF8_REGEX_MULTIBYTE = ::T.let(nil, ::T.untyped)
end

class Addressable::Template
  EXPRESSION = ::T.let(nil, ::T.untyped)
  JOINERS = ::T.let(nil, ::T.untyped)
  LEADERS = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  VARIABLE_LIST = ::T.let(nil, ::T.untyped)
  VARNAME = ::T.let(nil, ::T.untyped)
  VARSPEC = ::T.let(nil, ::T.untyped)
end

class Addressable::URI
  EMPTY_STR = ::T.let(nil, ::T.untyped)
  NORMPATH = ::T.let(nil, ::T.untyped)
  PARENT = ::T.let(nil, ::T.untyped)
  PORT_MAPPING = ::T.let(nil, ::T.untyped)
  RULE_2A = ::T.let(nil, ::T.untyped)
  RULE_2B_2C = ::T.let(nil, ::T.untyped)
  RULE_2D = ::T.let(nil, ::T.untyped)
  RULE_PREFIXED_PARENT = ::T.let(nil, ::T.untyped)
  SELF_REF = ::T.let(nil, ::T.untyped)
  SEQUENCE_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SEQUENCE_UPCASED_PERCENT_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  URIREGEX = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClasses
  ALPHA = ::T.let(nil, ::T.untyped)
  AUTHORITY = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  GEN_DELIMS = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class Addrinfo
  def connect_internal(local_addrinfo, timeout=T.unsafe(nil)); end
end

class ApplicationRecord
  include ::ApplicationRecord::GeneratedAttributeMethods
  include ::ApplicationRecord::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAttributeMethods
end

module ApplicationRecord::GeneratedAttributeMethods
  extend ::Mutex_m
end

class ApplicationRecord
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

module Arel
  VERSION = ::T.let(nil, ::T.untyped)
end

Arel::Attribute = Arel::Attributes::Attribute

Arel::Node = Arel::Nodes::Node

class Arel::SelectManager
  STRING_OR_SYMBOL_CLASS = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::DepthFirst
  DISPATCH = ::T.let(nil, ::T.untyped)
end

class Array
  include ::JSON::Ext::Generator::GeneratorMethods::Array
  def abbrev(pattern=T.unsafe(nil)); end

  def shelljoin(); end

  def to_csv(**options); end

  def to_h(); end
end

class Array
  def self.try_convert(_); end
end

module AutoprefixerRails
  VERSION = ::T.let(nil, ::T.untyped)
end

class AutoprefixerRails::Processor
  SUPPORTED_RUNTIMES = ::T.let(nil, ::T.untyped)
end

BasicObject::BasicObject = BasicObject

class Benchmark::Job
  def initialize(width); end
end

class Benchmark::Report
  def initialize(width=T.unsafe(nil), format=T.unsafe(nil)); end
end

class Benchmark::Tms
  def to_a(); end
end

class BigDecimal
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  include ::ActiveSupport::NumericWithFormat
  def clone(); end

  def to_digits(); end
  EXCEPTION_NaN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  def self.new(*args, **kwargs); end
end

class Binding
  def clone(); end

  def irb(); end
end

Bundler::Deprecate = Gem::Deprecate

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::FeatureFlag
  def github_https?(); end

  def global_path_appends_ruby_scope?(); end
end

class Bundler::Fetcher
  def fetch_spec(spec); end

  def fetchers(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def use_api(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  FETCHERS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def initialize(downloader, remote, display_uri); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def fetch_spec(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::Index
  def fetch_spec(spec); end

  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

class Bundler::GemHelper
  def allowed_push_host(); end

  def already_tagged?(); end

  def base(); end

  def build_gem(); end

  def built_gem_path(); end

  def clean?(); end

  def committed?(); end

  def gem_key(); end

  def gem_push?(); end

  def gem_push_host(); end

  def gemspec(); end

  def git_push(remote=T.unsafe(nil)); end

  def guard_clean(); end

  def initialize(base=T.unsafe(nil), name=T.unsafe(nil)); end

  def install(); end

  def install_gem(built_gem_path=T.unsafe(nil), local=T.unsafe(nil)); end

  def name(); end

  def perform_git_push(options=T.unsafe(nil)); end

  def rubygem_push(path); end

  def sh(cmd, &block); end

  def sh_with_code(cmd, &block); end

  def spec_path(); end

  def tag_version(); end

  def version(); end

  def version_tag(); end
end

class Bundler::GemHelper
  def self.gemspec(&block); end

  def self.install_tasks(opts=T.unsafe(nil)); end

  def self.instance(); end

  def self.instance=(instance); end
end

class Bundler::GemRemoteFetcher
end

class Bundler::GemRemoteFetcher
end

class Bundler::GemVersionPromoter
  def initialize(locked_specs=T.unsafe(nil), unlock_gems=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def locked_specs(); end

  def major?(); end

  def minor?(); end

  def prerelease_specified(); end

  def prerelease_specified=(prerelease_specified); end

  def sort_versions(dep, spec_groups); end

  def strict(); end

  def strict=(strict); end

  def unlock_gems(); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::Index
  include ::Enumerable
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::Installer
  def generate_bundler_executable_stubs(spec, options=T.unsafe(nil)); end

  def generate_standalone_bundler_executable_stubs(spec); end

  def initialize(root, definition); end

  def post_install_messages(); end

  def run(options); end
end

class Bundler::Installer
  def self.ambiguous_gems(); end

  def self.ambiguous_gems=(ambiguous_gems); end

  def self.install(root, definition, options=T.unsafe(nil)); end
end

class Bundler::Molinillo::DependencyGraph
  include ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def bundler_plugin_api_source?(); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*_); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil)); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

class Bundler::RubyGemsGemInstaller
  def initialize(gem, options=T.unsafe(nil)); end
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubygemsIntegration::MoreFuture
  def backport_ext_builder_monitor(); end
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

class Bundler::SpecSet
  include ::Enumerable
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg, newline=T.unsafe(nil)); end

  def debug(msg, newline=T.unsafe(nil)); end

  def debug?(); end

  def error(msg, newline=T.unsafe(nil)); end

  def info(msg, newline=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg, newline=T.unsafe(nil)); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

module Bundler::VersionRanges
end

class Bundler::VersionRanges::NEq
  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::NEq
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def cover?(v); end

  def empty?(); end

  def left(); end

  def left=(_); end

  def right(); end

  def right=(_); end

  def single?(); end
  INFINITY = ::T.let(nil, ::T.untyped)
  UNIVERSAL = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class Bundler::VersionRanges::ReqR::Endpoint
  def inclusive(); end

  def inclusive=(_); end

  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::ReqR::Endpoint
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def self.[](*_); end

  def self.members(); end
end

module Bundler::VersionRanges
  def self.empty?(ranges, neqs); end

  def self.for(requirement); end

  def self.for_many(requirements); end
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
end

class CSV
  def close(*args, &block); end

  def close_read(*args, &block); end

  def close_write(*args, &block); end

  def closed?(*args, &block); end

  def external_encoding(*args, &block); end

  def fcntl(*args, &block); end

  def fileno(*args, &block); end

  def flush(*args, &block); end

  def fsync(*args, &block); end

  def internal_encoding(*args, &block); end

  def isatty(*args, &block); end

  def pid(*args, &block); end

  def pos(*args, &block); end

  def pos=(*args, &block); end

  def reopen(*args, &block); end

  def seek(*args, &block); end

  def string(*args, &block); end

  def sync(*args, &block); end

  def sync=(*args, &block); end

  def tell(*args, &block); end

  def truncate(*args, &block); end

  def tty?(*args, &block); end
  ConverterEncoding = ::T.let(nil, ::T.untyped)
  Converters = ::T.let(nil, ::T.untyped)
  DateMatcher = ::T.let(nil, ::T.untyped)
  DateTimeMatcher = ::T.let(nil, ::T.untyped)
  HeaderConverters = ::T.let(nil, ::T.untyped)
end

class CSV::FieldInfo
  def header(); end

  def header=(_); end

  def index(); end

  def index=(_); end

  def line(); end

  def line=(_); end
end

class CSV::FieldInfo
  def self.[](*_); end

  def self.members(); end
end

class CSV::FieldsConverter
  include ::Enumerable
  def add_converter(name=T.unsafe(nil), &converter); end

  def convert(fields, headers, lineno); end

  def each(&block); end

  def empty?(); end

  def initialize(options=T.unsafe(nil)); end
end

class CSV::FieldsConverter
end

class CSV::MalformedCSVError
  def initialize(message, line_number); end

  def line_number(); end

  def lineno(); end
end

class CSV::Parser
  def column_separator(); end

  def field_size_limit(); end

  def header_row?(); end

  def headers(); end

  def initialize(input, options); end

  def liberal_parsing?(); end

  def line(); end

  def lineno(); end

  def parse(&block); end

  def quote_character(); end

  def return_headers?(); end

  def row_separator(); end

  def skip_blanks?(); end

  def skip_lines(); end

  def unconverted_fields?(); end

  def use_headers?(); end
  SCANNER_TEST = ::T.let(nil, ::T.untyped)
end

class CSV::Parser::InputsScanner
  def each_line(row_separator); end

  def eos?(); end

  def initialize(inputs, encoding, chunk_size: T.unsafe(nil)); end

  def keep_back(); end

  def keep_drop(); end

  def keep_end(); end

  def keep_start(); end

  def rest(); end

  def scan(pattern); end

  def scan_all(pattern); end
end

class CSV::Parser::InputsScanner
end

class CSV::Parser::InvalidEncoding
end

class CSV::Parser::InvalidEncoding
end

class CSV::Parser::Scanner
  def each_line(row_separator); end

  def initialize(*args); end

  def keep_back(); end

  def keep_drop(); end

  def keep_end(); end

  def keep_start(); end

  def scan_all(_); end
end

class CSV::Parser::Scanner
end

class CSV::Parser
end

class CSV::Row
  def dig(index_or_header, *indexes); end

  def each_pair(&block); end

  def empty?(*args, &block); end

  def length(*args, &block); end

  def size(*args, &block); end

  def to_ary(*_); end
end

class CSV::Row
  extend ::Forwardable
end

class CSV::Table
  def empty?(*args, &block); end

  def initialize(array_of_rows, headers: T.unsafe(nil)); end

  def length(*args, &block); end

  def size(*args, &block); end

  def table(); end
end

class CSV::Table
  extend ::Forwardable
end

class CSV::Writer
  def <<(row); end

  def headers(); end

  def initialize(output, options); end

  def lineno(); end

  def rewind(); end
end

class CSV::Writer
end

class CSV
  extend ::Forwardable
end

module CanCan
  VERSION = ::T.let(nil, ::T.untyped)
end

module CanonicalRails
  Deprecation = ::T.let(nil, ::T.untyped)
end

module Capybara
  VERSION = ::T.let(nil, ::T.untyped)
end

class Capybara::Config
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara::DSL
  include ::Capybara::DSLRSpecProxyInstaller
end

module Capybara::Minitest
end

module Capybara::Minitest::Assertions
  def assert_all_of_selectors(*args, &optional_filter_block); end

  def assert_ancestor(*args, &optional_filter_block); end

  def assert_any_of_selectors(*args, &optional_filter_block); end

  def assert_button(*args, &optional_filter_block); end

  def assert_checked_field(*args, &optional_filter_block); end

  def assert_content(*args, **kwargs); end

  def assert_css(*args, &optional_filter_block); end

  def assert_current_path(*args, **kwargs); end

  def assert_field(*args, &optional_filter_block); end

  def assert_link(*args, &optional_filter_block); end

  def assert_matches_css(*args, &optional_filter_block); end

  def assert_matches_selector(*args, &optional_filter_block); end

  def assert_matches_style(*args, &optional_filter_block); end

  def assert_matches_xpath(*args, &optional_filter_block); end

  def assert_no_ancestor(*args, &optional_filter_block); end

  def assert_no_button(*args, &optional_filter_block); end

  def assert_no_checked_field(*args, &optional_filter_block); end

  def assert_no_content(*args, **kwargs); end

  def assert_no_css(*args, &optional_filter_block); end

  def assert_no_current_path(*args, **kwargs); end

  def assert_no_field(*args, &optional_filter_block); end

  def assert_no_link(*args, &optional_filter_block); end

  def assert_no_select(*args, &optional_filter_block); end

  def assert_no_selector(*args, &optional_filter_block); end

  def assert_no_sibling(*args, &optional_filter_block); end

  def assert_no_table(*args, &optional_filter_block); end

  def assert_no_text(*args, **kwargs); end

  def assert_no_title(*args, **kwargs); end

  def assert_no_unchecked_field(*args, &optional_filter_block); end

  def assert_no_xpath(*args, &optional_filter_block); end

  def assert_none_of_selectors(*args, &optional_filter_block); end

  def assert_not_matches_css(*args, &optional_filter_block); end

  def assert_not_matches_selector(*args, &optional_filter_block); end

  def assert_not_matches_xpath(*args, &optional_filter_block); end

  def assert_select(*args, &optional_filter_block); end

  def assert_selector(*args, &optional_filter_block); end

  def assert_sibling(*args, &optional_filter_block); end

  def assert_table(*args, &optional_filter_block); end

  def assert_text(*args, **kwargs); end

  def assert_title(*args, **kwargs); end

  def assert_unchecked_field(*args, &optional_filter_block); end

  def assert_xpath(*args, &optional_filter_block); end

  def refute_ancestor(*args, &optional_filter_block); end

  def refute_button(*args, &optional_filter_block); end

  def refute_checked_field(*args, &optional_filter_block); end

  def refute_content(*args, **kwargs); end

  def refute_css(*args, &optional_filter_block); end

  def refute_current_path(*args, **kwargs); end

  def refute_field(*args, &optional_filter_block); end

  def refute_link(*args, &optional_filter_block); end

  def refute_matches_css(*args, &optional_filter_block); end

  def refute_matches_selector(*args, &optional_filter_block); end

  def refute_matches_xpath(*args, &optional_filter_block); end

  def refute_select(*args, &optional_filter_block); end

  def refute_selector(*args, &optional_filter_block); end

  def refute_sibling(*args, &optional_filter_block); end

  def refute_table(*args, &optional_filter_block); end

  def refute_text(*args, **kwargs); end

  def refute_title(*args, **kwargs); end

  def refute_unchecked_field(*args, &optional_filter_block); end

  def refute_xpath(*args, &optional_filter_block); end
end

module Capybara::Minitest::Assertions
end

module Capybara::Minitest
end

module Capybara::Node::Actions
  CAPTURE_FILE_ELEMENT_SCRIPT = ::T.let(nil, ::T.untyped)
  DATALIST_OPTIONS_SCRIPT = ::T.let(nil, ::T.untyped)
  RESET_STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
  UPDATE_STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
end

class Capybara::Node::Element
  STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
end

class Capybara::Node::Simple
  VISIBILITY_XPATH = ::T.let(nil, ::T.untyped)
end

class Capybara::Queries::BaseQuery
  COUNT_KEYS = ::T.let(nil, ::T.untyped)
end

class Capybara::Queries::SelectorQuery
  SPATIAL_KEYS = ::T.let(nil, ::T.untyped)
  VALID_KEYS = ::T.let(nil, ::T.untyped)
  VALID_MATCH = ::T.let(nil, ::T.untyped)
end

class Capybara::RackTest::Driver
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Capybara::RackTest::Node
  BLOCK_ELEMENTS = ::T.let(nil, ::T.untyped)
  DISABLED_BY_FIELDSET_XPATH = ::T.let(nil, ::T.untyped)
  OPTION_OWNER_XPATH = ::T.let(nil, ::T.untyped)
end

class Capybara::Selector::CSS
  ESCAPE = ::T.let(nil, ::T.untyped)
  H = ::T.let(nil, ::T.untyped)
  NMSTART = ::T.let(nil, ::T.untyped)
  NONASCII = ::T.let(nil, ::T.untyped)
  S = ::T.let(nil, ::T.untyped)
  UNICODE = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::ChromeLogs
  COMMANDS = ::T.let(nil, ::T.untyped)
  LOG_MSG = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::Driver
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  SPECIAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::Node
  GET_XPATH_SCRIPT = ::T.let(nil, ::T.untyped)
  OBSCURED_OR_OFFSET_SCRIPT = ::T.let(nil, ::T.untyped)
  RAPID_APPEND_TEXT = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Node::Html5Drag
  ATTACH_FILE = ::T.let(nil, ::T.untyped)
  DROP_FILE = ::T.let(nil, ::T.untyped)
  DROP_STRING = ::T.let(nil, ::T.untyped)
  HTML5_DRAG_DROP_SCRIPT = ::T.let(nil, ::T.untyped)
  LEGACY_DRAG_CHECK = ::T.let(nil, ::T.untyped)
  MOUSEDOWN_TRACKER = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::SafariNode
  MODIFIER_KEYS = ::T.let(nil, ::T.untyped)
end

class Capybara::Server::AnimationDisabler
  DISABLE_MARKUP_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Capybara::Server::Checker
  TRY_HTTPS_ERRORS = ::T.let(nil, ::T.untyped)
end

class Capybara::Session
  DOCUMENT_METHODS = ::T.let(nil, ::T.untyped)
  DSL_METHODS = ::T.let(nil, ::T.untyped)
  MODAL_METHODS = ::T.let(nil, ::T.untyped)
  NODE_METHODS = ::T.let(nil, ::T.untyped)
  SESSION_METHODS = ::T.let(nil, ::T.untyped)
end

class Capybara::SessionConfig
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara
  extend ::Capybara::DSLRSpecProxyInstaller
end

module CapybaraScreenshot::Helpers
  COLORS = ::T.let(nil, ::T.untyped)
end

module Carmen
  VERSION = ::T.let(nil, ::T.untyped)
end

class Carmen::I18n::Simple
  DEFAULT_LOCALE = ::T.let(nil, ::T.untyped)
end

module ChildProcess
  VERSION = ::T.let(nil, ::T.untyped)
end

class ChildProcess::AbstractProcess
  POLL_INTERVAL = ::T.let(nil, ::T.untyped)
end

class Class
  def json_creatable?(); end
end

module ClimateControl
  VERSION = ::T.let(nil, ::T.untyped)
end

module CodeRay
  CODERAY_PATH = ::T.let(nil, ::T.untyped)
  TokenKinds = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::Encoder
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Encoders::Encoder::PLUGIN_HOST = CodeRay::Encoders

class CodeRay::Encoders::HTML
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  FILE_EXTENSION = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_PATTERN = ::T.let(nil, ::T.untyped)
  TOKEN_KIND_TO_INFO = ::T.let(nil, ::T.untyped)
  TRANSPARENT_TOKEN_KINDS = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::HTML::CSS
  CSS_CLASS_PATTERN = ::T.let(nil, ::T.untyped)
end

module CodeRay::Encoders::HTML::Output
  DIV = ::T.let(nil, ::T.untyped)
  PAGE = ::T.let(nil, ::T.untyped)
  SPAN = ::T.let(nil, ::T.untyped)
  TABLE = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::Terminal
  TOKEN_COLORS = ::T.let(nil, ::T.untyped)
end

module CodeRay::FileType
  TypeFromExt = ::T.let(nil, ::T.untyped)
  TypeFromName = ::T.let(nil, ::T.untyped)
  TypeFromShebang = ::T.let(nil, ::T.untyped)
end

module CodeRay::PluginHost
  PLUGIN_HOSTS = ::T.let(nil, ::T.untyped)
  PLUGIN_HOSTS_BY_ID = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Java
  CONSTANTS = ::T.let(nil, ::T.untyped)
  DIRECTIVES = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  IDENT = ::T.let(nil, ::T.untyped)
  IDENT_KIND = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  MAGIC_VARIABLES = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  STRING_CONTENT_PATTERN = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  UNICODE_ESCAPE = ::T.let(nil, ::T.untyped)
end

module CodeRay::Scanners::Java::BuiltinTypes
  List = ::T.let(nil, ::T.untyped)
end

module CodeRay::Scanners::Ruby::Patterns
  BINARY = ::T.let(nil, ::T.untyped)
  CHARACTER = ::T.let(nil, ::T.untyped)
  CLASS_VARIABLE = ::T.let(nil, ::T.untyped)
  CONTROL_META_ESCAPE = ::T.let(nil, ::T.untyped)
  DATA = ::T.let(nil, ::T.untyped)
  DECIMAL = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  EXPONENT = ::T.let(nil, ::T.untyped)
  FANCY_STRING_INTERPRETED = ::T.let(nil, ::T.untyped)
  FANCY_STRING_KIND = ::T.let(nil, ::T.untyped)
  FANCY_STRING_START = ::T.let(nil, ::T.untyped)
  FLOAT_OR_INT = ::T.let(nil, ::T.untyped)
  FLOAT_SUFFIX = ::T.let(nil, ::T.untyped)
  GLOBAL_VARIABLE = ::T.let(nil, ::T.untyped)
  HEREDOC_OPEN = ::T.let(nil, ::T.untyped)
  HEXADECIMAL = ::T.let(nil, ::T.untyped)
  IDENT = ::T.let(nil, ::T.untyped)
  IDENT_KIND = ::T.let(nil, ::T.untyped)
  INSTANCE_VARIABLE = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_EXPECTING_VALUE = ::T.let(nil, ::T.untyped)
  KEYWORD_NEW_STATE = ::T.let(nil, ::T.untyped)
  METHOD_AFTER_DOT = ::T.let(nil, ::T.untyped)
  METHOD_NAME = ::T.let(nil, ::T.untyped)
  METHOD_NAME_EX = ::T.let(nil, ::T.untyped)
  METHOD_NAME_OPERATOR = ::T.let(nil, ::T.untyped)
  METHOD_NAME_OR_SYMBOL = ::T.let(nil, ::T.untyped)
  METHOD_SUFFIX = ::T.let(nil, ::T.untyped)
  NUMERIC = ::T.let(nil, ::T.untyped)
  OBJECT_VARIABLE = ::T.let(nil, ::T.untyped)
  OCTAL = ::T.let(nil, ::T.untyped)
  PREDEFINED_CONSTANTS = ::T.let(nil, ::T.untyped)
  PREFIX_VARIABLE = ::T.let(nil, ::T.untyped)
  QUOTE_TO_TYPE = ::T.let(nil, ::T.untyped)
  REGEXP_MODIFIERS = ::T.let(nil, ::T.untyped)
  RUBYDOC = ::T.let(nil, ::T.untyped)
  RUBYDOC_OR_DATA = ::T.let(nil, ::T.untyped)
  SIMPLE_ESCAPE = ::T.let(nil, ::T.untyped)
  SYMBOL = ::T.let(nil, ::T.untyped)
  VALUE_FOLLOWS = ::T.let(nil, ::T.untyped)
  VARIABLE = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Ruby::StringState
  CLOSING_PAREN = ::T.let(nil, ::T.untyped)
  STRING_PATTERN = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Scanner
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  KINDS_NOT_LOC = ::T.let(nil, ::T.untyped)
  SCANNER_STATE_INFO = ::T.let(nil, ::T.untyped)
  SCAN_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
end

CodeRay::Scanners::Scanner::PLUGIN_HOST = CodeRay::Scanners

class CodeRay::Styles::Style
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Styles::Style::PLUGIN_HOST = CodeRay::Styles

module Coffee::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

CoffeeScript::CompilationError = ExecJS::ProgramError

CoffeeScript::EngineError = ExecJS::RuntimeError

CoffeeScript::Error = ExecJS::Error

module CoffeeScript::Source
  COMPILE_FUNCTION_SOURCE = ::T.let(nil, ::T.untyped)
end

module CollectiveIdea::Acts::NestedSet
  include ::AwesomeNestedSetOvveride::RelateParent
end

module CollectiveIdea::Acts::NestedSet::Model
  include ::AwesomeNestedSetOvveride::Model
end

module Concurrent
  NULL = ::T.let(nil, ::T.untyped)
  NULL_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Concurrent::AbstractExecutorService
  FALLBACK_POLICIES = ::T.let(nil, ::T.untyped)
end

Concurrent::Collection::MapImplementation = Concurrent::Collection::MriMapBackend

class Concurrent::ConcurrentUpdateError
  CONC_UP_ERR_BACKTRACE = ::T.let(nil, ::T.untyped)
end

class Concurrent::LockFreeStack
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Concurrent::MVar
  EMPTY = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::Maybe
  NONE = ::T.let(nil, ::T.untyped)
end

module Concurrent::Promises::InternalStates
  PENDING = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReentrantReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  READER_BITS = ::T.let(nil, ::T.untyped)
  READ_LOCK_MASK = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
  WRITER_BITS = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_HELD = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_MASK = ::T.let(nil, ::T.untyped)
end

class Concurrent::RubyThreadPoolExecutor
  DEFAULT_MAX_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MIN_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_THREAD_IDLETIMEOUT = ::T.let(nil, ::T.untyped)
end

Concurrent::Synchronization::Volatile = Concurrent::Synchronization::MriAttrVolatile

module Concurrent::ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class Concurrent::TimerTask
  EXECUTION_INTERVAL = ::T.let(nil, ::T.untyped)
  TIMEOUT_INTERVAL = ::T.let(nil, ::T.untyped)
end

class Concurrent::Transaction
  ABORTED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::NativeInteger
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

class Crass::Parser
  BLOCK_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Crass::Tokenizer
  RE_COMMENT_CLOSE = ::T.let(nil, ::T.untyped)
  RE_DIGIT = ::T.let(nil, ::T.untyped)
  RE_ESCAPE = ::T.let(nil, ::T.untyped)
  RE_HEX = ::T.let(nil, ::T.untyped)
  RE_NAME = ::T.let(nil, ::T.untyped)
  RE_NAME_START = ::T.let(nil, ::T.untyped)
  RE_NON_PRINTABLE = ::T.let(nil, ::T.untyped)
  RE_NUMBER_DECIMAL = ::T.let(nil, ::T.untyped)
  RE_NUMBER_EXPONENT = ::T.let(nil, ::T.untyped)
  RE_NUMBER_SIGN = ::T.let(nil, ::T.untyped)
  RE_NUMBER_STR = ::T.let(nil, ::T.untyped)
  RE_QUOTED_URL_START = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_END = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_START = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE_ANCHORED = ::T.let(nil, ::T.untyped)
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditReason
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedAttributeMethods
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditReason::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedRelationMethods
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditReason::ActiveRecord_AssociationRelation
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditReason::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedRelationMethods
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditReason::ActiveRecord_Associations_CollectionProxy
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditReason::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedRelationMethods
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditReason::ActiveRecord_Relation
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedAssociationMethods
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedAssociationMethods
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedAttributeMethods
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedAttributeMethods
  extend ::Mutex_m
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedRelationMethods
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditReason::GeneratedRelationMethods
  extend ::Mutex_m
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditReason
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedAttributeMethods
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedRelationMethods
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::ActiveRecord_AssociationRelation
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedRelationMethods
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::ActiveRecord_Associations_CollectionProxy
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedRelationMethods
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::ActiveRecord_Relation
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedAssociationMethods
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedAssociationMethods
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedAttributeMethods
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedAttributeMethods
  extend ::Mutex_m
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedRelationMethods
end

module CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason::GeneratedRelationMethods
  extend ::Mutex_m
end

class CreateSpreeStoreCreditReasonsTable::StoreCreditUpdateReason
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class DRb::DRbArray
  def _dump(lv); end
end

class DRb::DRbArray
  def self._load(s); end
end

class DRb::DRbConn
  def alive?(); end

  def close(); end

  def initialize(remote_uri); end

  def send_message(ref, msg_id, arg, block); end

  def uri(); end
end

class DRb::DRbConn
  def self.open(remote_uri); end
end

class DRb::DRbMessage
  def dump(obj, error=T.unsafe(nil)); end

  def initialize(config); end

  def load(soc); end

  def recv_reply(stream); end

  def recv_request(stream); end

  def send_reply(stream, succ, result); end

  def send_request(stream, ref, msg_id, arg, b); end
end

class DRb::DRbObject
  def ==(other); end

  def eql?(other); end

  def initialize(obj, uri=T.unsafe(nil)); end
end

class DRb::DRbObject
  def self.prepare_backtrace(uri, result); end

  def self.with_friend(uri); end
end

module DRb::DRbProtocol
  def self.auto_load(uri); end
end

class DRb::DRbRemoteError
  def initialize(error); end
end

class DRb::DRbServer
  def initialize(uri=T.unsafe(nil), front=T.unsafe(nil), config_or_acl=T.unsafe(nil)); end

  def safe_level(); end
end

class DRb::DRbServer::InvokeMethod
  include ::DRb::DRbServer::InvokeMethod18Mixin
  def initialize(drb_server, client); end

  def perform(); end
end

class DRb::DRbServer::InvokeMethod
end

module DRb::DRbServer::InvokeMethod18Mixin
  def block_yield(x); end

  def perform_with_block(); end
end

module DRb::DRbServer::InvokeMethod18Mixin
end

class DRb::DRbServer
  def self.default_safe_level(level); end

  def self.make_config(hash=T.unsafe(nil)); end
end

class DRb::DRbTCPSocket
  def accept(); end

  def alive?(); end

  def close(); end

  def initialize(uri, soc, config=T.unsafe(nil)); end

  def peeraddr(); end

  def recv_reply(); end

  def recv_request(); end

  def send_reply(succ, result); end

  def send_request(ref, msg_id, arg, b); end

  def set_sockopt(soc); end

  def shutdown(); end

  def stream(); end

  def uri(); end
end

class DRb::DRbTCPSocket
  def self.getservername(); end

  def self.open(uri, config); end

  def self.open_server(uri, config); end

  def self.open_server_inaddr_any(host, port); end

  def self.parse_uri(uri); end

  def self.uri_option(uri, config); end
end

class DRb::DRbUNIXSocket
  def initialize(uri, soc, config=T.unsafe(nil), server_mode=T.unsafe(nil)); end
  Max_try = ::T.let(nil, ::T.untyped)
end

class DRb::DRbUNIXSocket
  def self.temp_server(); end
end

class DRb::DRbURIOption
  def ==(other); end

  def eql?(other); end

  def initialize(option); end

  def option(); end
end

class DRb::DRbURIOption
end

module DRb::DRbUndumped
  def _dump(dummy); end
end

class DRb::DRbUnknown
  def _dump(lv); end
end

class DRb::DRbUnknown
  def self._load(s); end
end

class DRb::DRbUnknownError
  def _dump(lv); end

  def initialize(unknown); end
end

class DRb::DRbUnknownError
  def self._load(s); end
end

module DRb
  def self.mutex(); end
end

DRbIdConv = DRb::DRbIdConv

DRbObject = DRb::DRbObject

DRbUndumped = DRb::DRbUndumped

module DatabaseCleaner
  VERSION = ::T.let(nil, ::T.untyped)
end

class DatabaseCleaner::Safeguard
  CHECKS = ::T.let(nil, ::T.untyped)
end

class DatabaseCleaner::Safeguard::Production
  KEYS = ::T.let(nil, ::T.untyped)
end

class DatabaseCleaner::Safeguard::RemoteDatabaseUrl
  LOCAL = ::T.let(nil, ::T.untyped)
end

class Date::Infinity
  def initialize(d=T.unsafe(nil)); end
end

class DidYouMean::ClassNameChecker
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

module DidYouMean::Correctable
  def corrections(); end

  def original_message(); end

  def spell_checker(); end

  def to_s(); end
end

module DidYouMean::Jaro
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def receiver(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

class DidYouMean::NullChecker
  def corrections(); end

  def initialize(*_); end
end

class DidYouMean::PlainFormatter
  def message_for(corrections); end
end

class DidYouMean::PlainFormatter
end

class DidYouMean::VariableNameChecker
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module DidYouMean
  def self.formatter(); end

  def self.formatter=(formatter); end
end

module Diff::LCS
  VERSION = ::T.let(nil, ::T.untyped)
end

Diff::LCS::BalancedCallbacks = Diff::LCS::DefaultCallbacks

class Diff::LCS::Change
  VALID_ACTIONS = ::T.let(nil, ::T.untyped)
end

Diff::LCS::Change::IntClass = Integer

Diff::LCS::SequenceCallbacks = Diff::LCS::DefaultCallbacks

module Digest::UUID
  DNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  OID_NAMESPACE = ::T.let(nil, ::T.untyped)
  URL_NAMESPACE = ::T.let(nil, ::T.untyped)
  X500_NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Dir
  def children(); end

  def each_child(); end
end

class Dir
  def self.exists?(_); end
end

module Discard
  VERSION = ::T.let(nil, ::T.untyped)
end

module Docile
  VERSION = ::T.let(nil, ::T.untyped)
end

class Docile::FallbackContextProxy
  NON_FALLBACK_METHODS = ::T.let(nil, ::T.untyped)
  NON_PROXIED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
  NON_PROXIED_METHODS = ::T.let(nil, ::T.untyped)
end

class ERB
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end
end

class ERB::Compiler::Scanner
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEXP = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE_REGEXP = ::T.let(nil, ::T.untyped)
end

class Encoding
  def _dump(*_); end
end

class Encoding::Converter
  def initialize(*_); end
end

class Encoding
  def self._load(_); end
end

module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def chain(*_); end

  def sum(identity=T.unsafe(nil), &block); end
end

class Enumerator
  def +(_); end

  def each_with_index(); end
end

class Enumerator::ArithmeticSequence
  def begin(); end

  def each(&blk); end

  def end(); end

  def exclude_end?(); end

  def last(*_); end

  def step(); end
end

class Enumerator::ArithmeticSequence
end

class Enumerator::Chain
end

class Enumerator::Chain
end

class Enumerator::Generator
  def each(*_, &blk); end

  def initialize(*_); end
end

class Errno::EAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EAUTH
end

class Errno::EBADARCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADARCH
end

class Errno::EBADEXEC
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADEXEC
end

class Errno::EBADMACHO
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADMACHO
end

class Errno::EBADRPC
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADRPC
end

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::NOERROR

class Errno::EDEVERR
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EDEVERR
end

Errno::EDOOFUS = Errno::NOERROR

class Errno::EFTYPE
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EFTYPE
end

Errno::EIPSEC = Errno::NOERROR

class Errno::ELAST
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ELAST
end

class Errno::ENEEDAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENEEDAUTH
end

class Errno::ENOATTR
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOATTR
end

class Errno::ENOPOLICY
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOPOLICY
end

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

class Errno::EPROCLIM
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCLIM
end

class Errno::EPROCUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCUNAVAIL
end

class Errno::EPROGMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGMISMATCH
end

class Errno::EPROGUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGUNAVAIL
end

class Errno::EPWROFF
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPWROFF
end

Errno::EQFULL = Errno::ELAST

class Errno::ERPCMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ERPCMISMATCH
end

class Errno::ESHLIBVERS
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ESHLIBVERS
end

module Erubi
  RANGE_ALL = ::T.let(nil, ::T.untyped)
  RANGE_FIRST = ::T.let(nil, ::T.untyped)
  RANGE_LAST = ::T.let(nil, ::T.untyped)
  TEXT_END = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Etc::Group
  def gid(); end

  def gid=(_); end

  def mem(); end

  def mem=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

class Etc::Passwd
  def change(); end

  def change=(_); end

  def dir=(_); end

  def expire(); end

  def expire=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid=(_); end

  def name=(_); end

  def passwd=(_); end

  def shell=(_); end

  def uclass(); end

  def uclass=(_); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

module Exception2MessageMapper
  def bind(cl); end
end

Exception2MessageMapper::E2MM = Exception2MessageMapper

class Exception2MessageMapper::ErrNotRegisteredException
end

class Exception2MessageMapper::ErrNotRegisteredException
end

module Exception2MessageMapper
  def self.Fail(klass=T.unsafe(nil), err=T.unsafe(nil), *rest); end

  def self.Raise(klass=T.unsafe(nil), err=T.unsafe(nil), *rest); end

  def self.def_e2message(k, c, m); end

  def self.def_exception(k, n, m, s=T.unsafe(nil)); end

  def self.e2mm_message(klass, exp); end

  def self.extend_object(cl); end

  def self.message(klass, exp); end
end

module ExceptionForMatrix
  def Fail(err=T.unsafe(nil), *rest); end

  def Raise(err=T.unsafe(nil), *rest); end
end

class ExceptionForMatrix::ErrDimensionMismatch
end

class ExceptionForMatrix::ErrDimensionMismatch
end

class ExceptionForMatrix::ErrNotRegular
end

class ExceptionForMatrix::ErrNotRegular
end

class ExceptionForMatrix::ErrOperationNotDefined
end

class ExceptionForMatrix::ErrOperationNotDefined
end

class ExceptionForMatrix::ErrOperationNotImplemented
end

class ExceptionForMatrix::ErrOperationNotImplemented
end

module ExceptionForMatrix
  extend ::Exception2MessageMapper
  def self.included(mod); end
end

module ExecJS
  VERSION = ::T.let(nil, ::T.untyped)
end

module ExecJS::Runtimes
  Disabled = ::T.let(nil, ::T.untyped)
  Duktape = ::T.let(nil, ::T.untyped)
  JScript = ::T.let(nil, ::T.untyped)
  JavaScriptCore = ::T.let(nil, ::T.untyped)
  MiniRacer = ::T.let(nil, ::T.untyped)
  Node = ::T.let(nil, ::T.untyped)
  RubyRacer = ::T.let(nil, ::T.untyped)
  RubyRhino = ::T.let(nil, ::T.untyped)
  SpiderMonkey = ::T.let(nil, ::T.untyped)
  Spidermonkey = ::T.let(nil, ::T.untyped)
  V8 = ::T.let(nil, ::T.untyped)
end

class ExitCalledError
end

class ExitCalledError
end

module FFI
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  SizeTypes = ::T.let(nil, ::T.untyped)
  TYPE_BOOL = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_IN = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_OUT = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT32 = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT16 = ::T.let(nil, ::T.untyped)
  TYPE_INT32 = ::T.let(nil, ::T.untyped)
  TYPE_INT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT8 = ::T.let(nil, ::T.untyped)
  TYPE_LONG = ::T.let(nil, ::T.untyped)
  TYPE_LONGDOUBLE = ::T.let(nil, ::T.untyped)
  TYPE_POINTER = ::T.let(nil, ::T.untyped)
  TYPE_STRING = ::T.let(nil, ::T.untyped)
  TYPE_UINT16 = ::T.let(nil, ::T.untyped)
  TYPE_UINT32 = ::T.let(nil, ::T.untyped)
  TYPE_UINT64 = ::T.let(nil, ::T.untyped)
  TYPE_UINT8 = ::T.let(nil, ::T.untyped)
  TYPE_ULONG = ::T.let(nil, ::T.untyped)
  TYPE_VARARGS = ::T.let(nil, ::T.untyped)
  TYPE_VOID = ::T.let(nil, ::T.untyped)
  TypeDefs = ::T.let(nil, ::T.untyped)
  USE_THIS_PROCESS_AS_LIBRARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

FFI::CallbackInfo = FFI::FunctionType

class FFI::DynamicLibrary
  RTLD_ALL_MASK = ::T.let(nil, ::T.untyped)
  RTLD_BINDING_MASK = ::T.let(nil, ::T.untyped)
  RTLD_DEEPBIND = ::T.let(nil, ::T.untyped)
  RTLD_FIRST = ::T.let(nil, ::T.untyped)
  RTLD_GLOBAL = ::T.let(nil, ::T.untyped)
  RTLD_LAZY = ::T.let(nil, ::T.untyped)
  RTLD_LOCAL = ::T.let(nil, ::T.untyped)
  RTLD_LOCATION_MASK = ::T.let(nil, ::T.untyped)
  RTLD_MEMBER = ::T.let(nil, ::T.untyped)
  RTLD_NODELETE = ::T.let(nil, ::T.untyped)
  RTLD_NOLOAD = ::T.let(nil, ::T.untyped)
  RTLD_NOW = ::T.let(nil, ::T.untyped)
end

FFI::FunctionInfo = FFI::FunctionType

module FFI::Library
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  FlagsMap = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
end

FFI::NativeLibrary = FFI::DynamicLibrary

module FFI::NativeType
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

module FFI::NativeType
end

class FFI::NullPointerError
end

class FFI::NullPointerError
end

module FFI::Platform
  ADDRESS_ALIGN = ::T.let(nil, ::T.untyped)
  ADDRESS_SIZE = ::T.let(nil, ::T.untyped)
  ARCH = ::T.let(nil, ::T.untyped)
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  BYTE_ORDER = ::T.let(nil, ::T.untyped)
  CONF_DIR = ::T.let(nil, ::T.untyped)
  CPU = ::T.let(nil, ::T.untyped)
  DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  FLOAT_ALIGN = ::T.let(nil, ::T.untyped)
  FLOAT_SIZE = ::T.let(nil, ::T.untyped)
  INT16_ALIGN = ::T.let(nil, ::T.untyped)
  INT16_SIZE = ::T.let(nil, ::T.untyped)
  INT32_ALIGN = ::T.let(nil, ::T.untyped)
  INT32_SIZE = ::T.let(nil, ::T.untyped)
  INT64_ALIGN = ::T.let(nil, ::T.untyped)
  INT64_SIZE = ::T.let(nil, ::T.untyped)
  INT8_ALIGN = ::T.let(nil, ::T.untyped)
  INT8_SIZE = ::T.let(nil, ::T.untyped)
  IS_BSD = ::T.let(nil, ::T.untyped)
  IS_DRAGONFLYBSD = ::T.let(nil, ::T.untyped)
  IS_FREEBSD = ::T.let(nil, ::T.untyped)
  IS_GNU = ::T.let(nil, ::T.untyped)
  IS_LINUX = ::T.let(nil, ::T.untyped)
  IS_MAC = ::T.let(nil, ::T.untyped)
  IS_NETBSD = ::T.let(nil, ::T.untyped)
  IS_OPENBSD = ::T.let(nil, ::T.untyped)
  IS_SOLARIS = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
  LIBPREFIX = ::T.let(nil, ::T.untyped)
  LIBSUFFIX = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LONG_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  LONG_SIZE = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  OS = ::T.let(nil, ::T.untyped)
  OSVERSION = ::T.let(nil, ::T.untyped)
end

class FFI::Pointer
  NULL = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
end

class FFI::Struct::InlineArray
  include ::Enumerable
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::String
end

class FFI::StructLayout::String
end

class FFI::StructLayoutBuilder
  NUMBER_TYPES = ::T.let(nil, ::T.untyped)
end

class FFI::Type
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  LONG_LONG = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SCHAR = ::T.let(nil, ::T.untyped)
  SHORT = ::T.let(nil, ::T.untyped)
  SINT = ::T.let(nil, ::T.untyped)
  SLONG = ::T.let(nil, ::T.untyped)
  SLONG_LONG = ::T.let(nil, ::T.untyped)
  SSHORT = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UCHAR = ::T.let(nil, ::T.untyped)
  UINT = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  ULONG_LONG = ::T.let(nil, ::T.untyped)
  USHORT = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

FFI::Type::Array = FFI::ArrayType

FFI::Type::Function = FFI::FunctionType

FFI::Type::Struct = FFI::StructByValue

module FactoryBot
  VERSION = ::T.let(nil, ::T.untyped)
end

class FactoryBot::DefinitionProxy
  UNPROXIED_METHODS = ::T.let(nil, ::T.untyped)
end

class FactoryBot::Strategy::Stub
  DISABLED_PERSISTENCE_METHODS = ::T.let(nil, ::T.untyped)
end

class FalseClass
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
end

module FastSqlite
  VERSION = ::T.let(nil, ::T.untyped)
end

class Fiber
  def transfer(*_); end
end

class Fiber
  def self.current(); end
end

class File
  RELATIVE_PARENTDIR = ::T.let(nil, ::T.untyped)
  RELATIVE_SAMEDIR = ::T.let(nil, ::T.untyped)
end

class File
  def self.exists?(_); end

  def self.open!(file, *args, &block); end

  def self.read_binary(file); end

  def self.relative_path(from, to); end
end

module FileUtils
  include ::FileUtils::StreamUtils_
  def ruby(*args, **options, &block); end

  def safe_ln(*args, **options); end

  def sh(*cmd, &block); end

  def split_all(path); end
  LN_SUPPORTED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

module FileUtils::DryRun
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::FileUtils::StreamUtils_
end

class Float
  include ::JSON::Ext::Generator::GeneratorMethods::Float
  include ::ActiveSupport::NumericWithFormat
end

module FontAwesome::Rails
  FA_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

module FriendlyId
  UNFRIENDLY_CLASSES = ::T.let(nil, ::T.untyped)
end

module FriendlyId::Scoped
  def serialized_scope(); end

  def should_generate_new_friendly_id?(); end
end

module FriendlyId::Scoped::Configuration
  def scope(); end

  def scope=(scope); end

  def scope_columns(); end
end

module FriendlyId::Scoped::Configuration
end

module FriendlyId::Scoped
  def self.included(model_class); end

  def self.setup(model_class); end
end

module FriendlyId::SequentiallySlugged
  def resolve_friendly_id_conflict(candidate_slugs); end
end

class FriendlyId::SequentiallySlugged::SequentialSlugCalculator
  def initialize(scope, slug, slug_column, sequence_separator, base_class); end

  def next_slug(); end

  def scope(); end

  def scope=(scope); end

  def sequence_separator(); end

  def sequence_separator=(sequence_separator); end

  def slug(); end

  def slug=(slug); end

  def slug_column(); end

  def slug_column=(slug_column); end
end

class FriendlyId::SequentiallySlugged::SequentialSlugCalculator
end

module FriendlyId::SequentiallySlugged
  def self.setup(model_class); end
end

module FriendlyId::SimpleI18n
end

module FriendlyId::SimpleI18n::Configuration
  def slug_column(); end
end

module FriendlyId::SimpleI18n::Configuration
end

module FriendlyId::SimpleI18n::Model
  def set_friendly_id(text, locale=T.unsafe(nil)); end

  def slug=(value); end
end

module FriendlyId::SimpleI18n::Model
end

module FriendlyId::SimpleI18n
  def self.included(model_class); end

  def self.setup(model_class); end
end

class FriendlyId::Slug
  RelationType = ::T.let(nil, ::T.untyped)
end

module FriendlyId::Slug::GeneratedAttributeMethods
  extend ::Mutex_m
end

module FriendlyId::Slug::GeneratedRelationMethods
  extend ::Mutex_m
end

module GC
  def garbage_collect(*_); end
end

module GC
  def self.verify_transient_heap_internal_consistency(); end
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsPackageVersion = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  USE_BUNDLER_FOR_GEMDEPS = ::T.let(nil, ::T.untyped)
end

Gem::Cache = Gem::SourceIndex

class Gem::DependencyInstaller
  def _deprecated_add_found_dependencies(to_do, dependency_list); end

  def _deprecated_gather_dependencies(); end

  def add_found_dependencies(*args, &block); end

  def gather_dependencies(*args, &block); end
end

class Gem::Exception
  extend ::Gem::Deprecate
end

class Gem::Ext::BuildError
end

class Gem::Ext::BuildError
end

class Gem::Ext::Builder
  def self.redirector(); end
end

class Gem::Ext::ExtConfBuilder
end

Gem::Ext::ExtConfBuilder::FileEntry = FileUtils::Entry_

class Gem::Ext::ExtConfBuilder
  def self.build(extension, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end

  def self.get_relative_path(path); end
end

class Gem::Package::TarHeader
  EMPTY_HEADER = ::T.let(nil, ::T.untyped)
  FIELDS = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
  UNPACK_FORMAT = ::T.let(nil, ::T.untyped)
end

class Gem::PathSupport
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::Request
  extend ::Gem::UserInteraction
  extend ::Gem::DefaultUserInteraction
  extend ::Gem::Text
end

class Gem::Resolver::ActivationRequest
  def others_possible?(); end
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

Gem::Resolver::DependencyConflict = Gem::Resolver::Conflict

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

Gem::Security::KEY_ALGORITHM = OpenSSL::PKey::RSA

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::Specification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def to_ruby(); end
end

class Gem::Specification
  extend ::Gem::Deprecate
  extend ::Enumerable
  def self.add_spec(spec); end

  def self.add_specs(*specs); end

  def self.remove_spec(spec); end
end

class Gem::SpecificationPolicy
  def initialize(specification); end

  def packaging(); end

  def packaging=(packaging); end

  def validate(strict=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_metadata(); end

  def validate_permissions(); end
  HOMEPAGE_URI_PATTERN = ::T.let(nil, ::T.untyped)
  LAZY = ::T.let(nil, ::T.untyped)
  LAZY_PATTERN = ::T.let(nil, ::T.untyped)
  METADATA_LINK_KEYS = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  VALID_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  VALID_URI_PATTERN = ::T.let(nil, ::T.untyped)
end

class Gem::SpecificationPolicy
end

class Gem::StreamUI
  def _deprecated_debug(statement); end
end

class Gem::StubSpecification
  def build_extensions(); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

class Gem::UninstallError
  def spec(); end

  def spec=(spec); end
end

class Gem::UninstallError
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

Gem::Version::Requirement = Gem::Requirement

module Gem
  def self.default_gems_use_full_paths?(); end

  def self.remove_unresolved_default_spec(spec); end
end

module GeneratedUrlHelpers
  def spree_path(*args); end

  def spree_url(*args); end

  def teaspoon_path(*args); end

  def teaspoon_url(*args); end
end

module GeneratorSpec::TestCase
  include ::FileUtils::StreamUtils_
end

class GetText::PoParser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module GlobalID::Locator
  DEFAULT_LOCATOR = ::T.let(nil, ::T.untyped)
end

class GlobalID::Locator::BaseLocator
  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BaseLocator
end

class GlobalID::Locator::BlockLocator
  def initialize(block); end

  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BlockLocator
end

class GlobalID::Locator::UnscopedLocator
end

class GlobalID::Locator::UnscopedLocator
end

module GlobalID::Locator
  def self.locate(gid, options=T.unsafe(nil)); end

  def self.locate_many(gids, options=T.unsafe(nil)); end

  def self.locate_many_signed(sgids, options=T.unsafe(nil)); end

  def self.locate_signed(sgid, options=T.unsafe(nil)); end

  def self.use(app, locator=T.unsafe(nil), &locator_block); end
end

class HTMLSelector
  NO_STRIP = ::T.let(nil, ::T.untyped)
end

module HandlebarsAssets
  PATH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class HandlebarsAssets::Handlebars
end

class HandlebarsAssets::Handlebars
  def self.append_patch(patch_file); end

  def self.apply_patches_to_source(); end

  def self.assets_path(); end

  def self.context(); end

  def self.patch_path(); end

  def self.patch_source(patch_file); end

  def self.path(); end

  def self.precompile(*args); end

  def self.source(); end

  def self.source=(source); end
end

class Hash
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
end

class Hash
  def self.try_convert(_); end
end

class HighLine
  VERSION = ::T.let(nil, ::T.untyped)
end

module HighLine::BuiltinStyles
  BASIC_COLORS = ::T.let(nil, ::T.untyped)
  BLACK = ::T.let(nil, ::T.untyped)
  BLACK_STYLE = ::T.let(nil, ::T.untyped)
  BLINK = ::T.let(nil, ::T.untyped)
  BLINK_STYLE = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BLUE_STYLE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  BOLD_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLACK = ::T.let(nil, ::T.untyped)
  BRIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLUE = ::T.let(nil, ::T.untyped)
  BRIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_CYAN = ::T.let(nil, ::T.untyped)
  BRIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GRAY = ::T.let(nil, ::T.untyped)
  BRIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GREEN = ::T.let(nil, ::T.untyped)
  BRIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_GREY = ::T.let(nil, ::T.untyped)
  BRIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  BRIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_NONE = ::T.let(nil, ::T.untyped)
  BRIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_RED = ::T.let(nil, ::T.untyped)
  BRIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_WHITE = ::T.let(nil, ::T.untyped)
  BRIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  BRIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  BRIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CLEAR_STYLE = ::T.let(nil, ::T.untyped)
  COLORS = ::T.let(nil, ::T.untyped)
  COLOR_LIST = ::T.let(nil, ::T.untyped)
  CONCEALED = ::T.let(nil, ::T.untyped)
  CONCEALED_STYLE = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  CYAN_STYLE = ::T.let(nil, ::T.untyped)
  DARK = ::T.let(nil, ::T.untyped)
  DARK_STYLE = ::T.let(nil, ::T.untyped)
  ERASE_CHAR = ::T.let(nil, ::T.untyped)
  ERASE_CHAR_STYLE = ::T.let(nil, ::T.untyped)
  ERASE_LINE = ::T.let(nil, ::T.untyped)
  ERASE_LINE_STYLE = ::T.let(nil, ::T.untyped)
  GRAY = ::T.let(nil, ::T.untyped)
  GRAY_STYLE = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  GREEN_STYLE = ::T.let(nil, ::T.untyped)
  GREY = ::T.let(nil, ::T.untyped)
  GREY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_BLACK = ::T.let(nil, ::T.untyped)
  LIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  LIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_CYAN = ::T.let(nil, ::T.untyped)
  LIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GRAY = ::T.let(nil, ::T.untyped)
  LIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GREEN = ::T.let(nil, ::T.untyped)
  LIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_GREY = ::T.let(nil, ::T.untyped)
  LIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  LIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_NONE = ::T.let(nil, ::T.untyped)
  LIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_RED = ::T.let(nil, ::T.untyped)
  LIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_WHITE = ::T.let(nil, ::T.untyped)
  LIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  LIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  LIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLACK = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLUE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_CYAN = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GRAY = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREEN = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREY = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_NONE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_RED = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_WHITE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  ON_BRIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_GRAY = ::T.let(nil, ::T.untyped)
  ON_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_GREY = ::T.let(nil, ::T.untyped)
  ON_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLACK = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLACK_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLUE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_BLUE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_CYAN = ::T.let(nil, ::T.untyped)
  ON_LIGHT_CYAN_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GRAY = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GRAY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREEN = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREEN_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREY = ::T.let(nil, ::T.untyped)
  ON_LIGHT_GREY_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_LIGHT_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_NONE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_RED = ::T.let(nil, ::T.untyped)
  ON_LIGHT_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_WHITE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_LIGHT_YELLOW = ::T.let(nil, ::T.untyped)
  ON_LIGHT_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_MAGENTA_STYLE = ::T.let(nil, ::T.untyped)
  ON_NONE = ::T.let(nil, ::T.untyped)
  ON_NONE_STYLE = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_RED_STYLE = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_WHITE_STYLE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  ON_YELLOW_STYLE = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  RED_STYLE = ::T.let(nil, ::T.untyped)
  RESET = ::T.let(nil, ::T.untyped)
  RESET_STYLE = ::T.let(nil, ::T.untyped)
  REVERSE = ::T.let(nil, ::T.untyped)
  REVERSE_STYLE = ::T.let(nil, ::T.untyped)
  STYLES = ::T.let(nil, ::T.untyped)
  STYLE_LIST = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  UNDERLINE_STYLE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  UNDERSCORE_STYLE = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  WHITE_STYLE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
  YELLOW_STYLE = ::T.let(nil, ::T.untyped)
end

module HighLine::BuiltinStyles::ClassMethods
  RGB_COLOR_PATTERN = ::T.let(nil, ::T.untyped)
end

class HighLine::SampleColorScheme
  SAMPLE_SCHEME = ::T.let(nil, ::T.untyped)
end

module HighLine::StringExtensions
  STYLE_METHOD_NAME_PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n
  DEFAULT_INTERPOLATION_PATTERNS = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  INTERPOLATION_PATTERN = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Base::RailsI18n
end

module I18n::Backend::Base::RailsI18n::Pluralization
end

module I18n::Backend::Base::RailsI18n::Pluralization::Arabic
end

module I18n::Backend::Base::RailsI18n::Pluralization::Arabic
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Breton
end

module I18n::Backend::Base::RailsI18n::Pluralization::Breton
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::CentralMoroccoTamazight
end

module I18n::Backend::Base::RailsI18n::Pluralization::CentralMoroccoTamazight
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Colognian
end

module I18n::Backend::Base::RailsI18n::Pluralization::Colognian
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Irish
end

module I18n::Backend::Base::RailsI18n::Pluralization::Irish
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Langi
end

module I18n::Backend::Base::RailsI18n::Pluralization::Langi
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Latvian
end

module I18n::Backend::Base::RailsI18n::Pluralization::Latvian
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Lithuanian
end

module I18n::Backend::Base::RailsI18n::Pluralization::Lithuanian
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Macedonian
end

module I18n::Backend::Base::RailsI18n::Pluralization::Macedonian
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Maltese
end

module I18n::Backend::Base::RailsI18n::Pluralization::Maltese
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Manx
end

module I18n::Backend::Base::RailsI18n::Pluralization::Manx
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Polish
end

module I18n::Backend::Base::RailsI18n::Pluralization::Polish
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::ScottishGaelic
end

module I18n::Backend::Base::RailsI18n::Pluralization::ScottishGaelic
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Slovenian
end

module I18n::Backend::Base::RailsI18n::Pluralization::Slovenian
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::UpperSorbian
end

module I18n::Backend::Base::RailsI18n::Pluralization::UpperSorbian
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization::Welsh
end

module I18n::Backend::Base::RailsI18n::Pluralization::Welsh
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Pluralization
end

module I18n::Backend::Base::RailsI18n::Transliteration
end

module I18n::Backend::Base::RailsI18n::Transliteration::Russian
end

module I18n::Backend::Base::RailsI18n::Transliteration::Russian
  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Transliteration::Ukrainian
end

module I18n::Backend::Base::RailsI18n::Transliteration::Ukrainian
  def self.ahead(); end

  def self.behind(); end

  def self.rule(); end
end

module I18n::Backend::Base::RailsI18n::Transliteration
end

module I18n::Backend::Base::RailsI18n
end

module I18n::Backend::Flatten
  FLATTEN_SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::InterpolationCompiler::Compiler
  INTERPOLATION_SYNTAX_PATTERN = ::T.let(nil, ::T.untyped)
  TOKENIZER = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::KeyValue
  include ::I18n::Backend::Flatten
end

module I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
end

class I18n::Backend::Simple
  include ::I18n::Backend::Pluralization
end

module I18n::Backend::Transliterator
  DEFAULT_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::HashTransliterator
  DEFAULT_APPROXIMATIONS = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext
  CONTEXT_SEPARATOR = ::T.let(nil, ::T.untyped)
  PLURAL_SEPARATOR = ::T.let(nil, ::T.untyped)
end

I18n::JSON = ActiveSupport::JSON

module I18n::Locale::Tag
  RFC4646_FORMATS = ::T.let(nil, ::T.untyped)
  RFC4646_SUBTAGS = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Rfc4646::Parser
  PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n::Tests::Localization
end

module I18n::Tests::Localization
  def self.included(base); end
end

class IO
  def beep(); end

  def cooked(); end

  def cooked!(); end

  def cursor(); end

  def cursor=(); end

  def echo=(echo); end

  def echo?(); end

  def getch(*_); end

  def getpass(*_); end

  def goto(); end

  def iflush(); end

  def ioflush(); end

  def noecho(); end

  def nonblock(*_); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def oflush(); end

  def pathconf(_); end

  def pressed?(); end

  def raw(*_); end

  def raw!(*_); end

  def ready?(); end

  def wait(*_); end

  def wait_readable(*_); end

  def wait_writable(*_); end

  def winsize(); end

  def winsize=(winsize); end
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class IO
  def self.console(*_); end

  def self.console_size(); end

  def self.default_console_size(); end
end

class IPAddr
  def ==(other); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end
end

module ITypeAssert
  Elem = type_member(:out)
end

module ITypeAssert
  extend ::T::Private::Abstract::Hooks
  extend ::T::InterfaceWrapper::Helpers
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module ImageProcessing
  VERSION = ::T.let(nil, ::T.untyped)
end

module ImageProcessing::Chainable
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ImageProcessing::MiniMagick
end

class ImageProcessing::MiniMagick::Processor
  def append(*args); end

  def composite(overlay=T.unsafe(nil), mask: T.unsafe(nil), mode: T.unsafe(nil), gravity: T.unsafe(nil), offset: T.unsafe(nil), args: T.unsafe(nil), **options, &block); end

  def crop(*args); end

  def define(options); end

  def limits(options); end

  def magick(); end

  def resize_and_pad(width, height, background: T.unsafe(nil), gravity: T.unsafe(nil), **options); end

  def resize_to_fill(width, height, gravity: T.unsafe(nil), **options); end

  def resize_to_fit(width, height, **options); end

  def resize_to_limit(width, height, **options); end

  def rotate(degrees, background: T.unsafe(nil)); end
  SHARPEN_PARAMETERS = ::T.let(nil, ::T.untyped)
end

ImageProcessing::MiniMagick::Processor::ACCUMULATOR_CLASS = MiniMagick::Tool

module ImageProcessing::MiniMagick::Processor::Utils
end

module ImageProcessing::MiniMagick::Processor::Utils
  def self.apply_define(magick, options); end

  def self.apply_options(magick, define: T.unsafe(nil), **options); end

  def self.disallow_split_layers!(destination_path); end
end

class ImageProcessing::MiniMagick::Processor
  def self.load_image(path_or_magick, loader: T.unsafe(nil), page: T.unsafe(nil), geometry: T.unsafe(nil), auto_orient: T.unsafe(nil), **options); end

  def self.save_image(magick, destination_path, allow_splitting: T.unsafe(nil), **options); end
end

module ImageProcessing::MiniMagick
  extend ::ImageProcessing::Chainable
  def self.valid_image?(file); end
end

class ImageProcessing::Pipeline
  DEFAULT_FORMAT = ::T.let(nil, ::T.untyped)
end

class Integer
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
  include ::ActiveSupport::NumericWithFormat
  def to_bn(); end
  GMP_VERSION = ::T.let(nil, ::T.untyped)
end

class JSON::Ext::Generator::State
  def self.from_state(_); end
end

class JSON::Ext::Parser
  def initialize(*_); end
end

JSON::Parser = JSON::Ext::Parser

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module JaroWinkler
  VERSION = ::T.let(nil, ::T.untyped)
end

class JaroWinkler::Error
end

class JaroWinkler::Error
end

class JaroWinkler::InvalidWeightError
end

class JaroWinkler::InvalidWeightError
end

class Jbuilder
  BLANK = ::T.let(nil, ::T.untyped)
  NON_ENUMERABLES = ::T.let(nil, ::T.untyped)
end

module Jbuilder::DependencyTrackerMethods
  DIRECT_RENDERS = ::T.let(nil, ::T.untyped)
  INDIRECT_RENDERS = ::T.let(nil, ::T.untyped)
end

module Jquery::Rails
  JQUERY_2_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_3_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_UJS_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Actionview
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Activerecord
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Helpers
  PARAM_KEY_EXCEPT_LIST = ::T.let(nil, ::T.untyped)
end

class Kaminari::PaginatableArray
  ENTRY = ::T.let(nil, ::T.untyped)
end

module Kernel
  def itself(); end

  def object_id(); end

  def pretty_inspect(); end

  def then(); end

  def yield_self(); end
end

module Kernel
  def self.at_exit(); end

  def self.load(*_); end

  def self.require(_); end
end

class KeyError
  include ::DidYouMean::Correctable
end

module Launchy
  VERSION = ::T.let(nil, ::T.untyped)
end

module Launchy::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
end

class Logger
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  Format = ::T.let(nil, ::T.untyped)
end

class Logger::LogDevice
  include ::MonitorMixin
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Loofah
  VERSION = ::T.let(nil, ::T.untyped)
end

module Loofah::Elements
  BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  LOOSE_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML4 = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML5 = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::SafeList
  ACCEPTABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_ELEMENTS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  ALLOWED_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ALLOWED_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ATTR_VAL_IS_URI = ::T.let(nil, ::T.untyped)
  MATHML_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  MATHML_ELEMENTS = ::T.let(nil, ::T.untyped)
  PROTOCOL_SEPARATOR = ::T.let(nil, ::T.untyped)
  SHORTHAND_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  SVG_ALLOW_LOCAL_HREF = ::T.let(nil, ::T.untyped)
  SVG_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SVG_ATTR_VAL_ALLOWS_REF = ::T.let(nil, ::T.untyped)
  SVG_ELEMENTS = ::T.let(nil, ::T.untyped)
  TAGS_SAFE_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::Scrub
  CONTROL_CHARACTERS = ::T.let(nil, ::T.untyped)
  CRASS_SEMICOLON = ::T.let(nil, ::T.untyped)
  CSS_KEYWORDISH = ::T.let(nil, ::T.untyped)
end

Loofah::HTML5::WhiteList = Loofah::HTML5::SafeList

module Loofah::LibxmlWorkarounds
  BROKEN_ESCAPING_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  BROKEN_ESCAPING_ATTRIBUTES_QUALIFYING_TAG = ::T.let(nil, ::T.untyped)
end

class Loofah::Scrubber
  CONTINUE = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

module Loofah::Scrubbers
  MAP = ::T.let(nil, ::T.untyped)
end

class MIME::Type
  VERSION = ::T.let(nil, ::T.untyped)
end

class MIME::Types
  VERSION = ::T.let(nil, ::T.untyped)
end

module MIME::Types::Columnar
  LOAD_MUTEX = ::T.let(nil, ::T.untyped)
end

module MIME::Types::Data
  PATH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class MIME::Types
  extend ::Enumerable
end

module Mail
  RANDOM_TAG = ::T.let(nil, ::T.untyped)
end

class Mail::AddressList
  def addresses(); end

  def addresses_grouped_by_group(); end

  def group_names(); end

  def initialize(string); end
end

class Mail::AddressList
end

class Mail::BccField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CcField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CommentsField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::CommonField
  FILENAME_RE = ::T.let(nil, ::T.untyped)
end

module Mail::Constants
  ASTERISK = ::T.let(nil, ::T.untyped)
  ATOM_UNSAFE = ::T.let(nil, ::T.untyped)
  B_VALUES = ::T.let(nil, ::T.untyped)
  CAPITAL_M = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR = ::T.let(nil, ::T.untyped)
  CR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CR_ENCODED = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  EQUAL_LF = ::T.let(nil, ::T.untyped)
  FIELD_BODY = ::T.let(nil, ::T.untyped)
  FIELD_LINE = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
  FIELD_PREFIX = ::T.let(nil, ::T.untyped)
  FIELD_SPLIT = ::T.let(nil, ::T.untyped)
  FULL_ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  FWS = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  HEADER_SPLIT = ::T.let(nil, ::T.untyped)
  HYPHEN = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  LF_ENCODED = ::T.let(nil, ::T.untyped)
  NULL_SENDER = ::T.let(nil, ::T.untyped)
  PHRASE_UNSAFE = ::T.let(nil, ::T.untyped)
  QP_SAFE = ::T.let(nil, ::T.untyped)
  QP_UNSAFE = ::T.let(nil, ::T.untyped)
  Q_VALUES = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TOKEN_UNSAFE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  WSP = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDescriptionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDispositionElement
  def disposition_type(); end

  def initialize(string); end

  def parameters(); end
end

class Mail::ContentDispositionElement
end

class Mail::ContentDispositionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentLocationElement
  def initialize(string); end

  def location(); end

  def to_s(*args); end
end

class Mail::ContentLocationElement
end

class Mail::ContentLocationField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTransferEncodingElement
  def encoding(); end

  def initialize(string); end
end

class Mail::ContentTransferEncodingElement
end

class Mail::ContentTransferEncodingField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTypeElement
  def initialize(string); end

  def main_type(); end

  def parameters(); end

  def sub_type(); end
end

class Mail::ContentTypeElement
end

class Mail::ContentTypeField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateTimeElement
  def date_string(); end

  def initialize(string); end

  def time_string(); end
end

class Mail::DateTimeElement
end

class Mail::Encodings::Base64
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Binary
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::EightBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::QuotedPrintable
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::SevenBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::TransferEncoding
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::UnixToUnix
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::EnvelopeFromElement
  def address(); end

  def date_time(); end

  def formatted_date_time(); end

  def initialize(string); end
end

class Mail::EnvelopeFromElement
end

class Mail::Exim
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::Exim
end

class Mail::Field
  FIELDS_MAP = ::T.let(nil, ::T.untyped)
  FIELD_NAME_MAP = ::T.let(nil, ::T.untyped)
  FIELD_ORDER = ::T.let(nil, ::T.untyped)
  FIELD_ORDER_LOOKUP = ::T.let(nil, ::T.untyped)
  KNOWN_FIELDS = ::T.let(nil, ::T.untyped)
  STRUCTURED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::FromField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Header
  LIMITED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::IMAP
  def connection(&block); end

  def delete_all(mailbox=T.unsafe(nil)); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::IMAP
end

class Mail::InReplyToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::KeywordsField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::LoggerDelivery
  include ::Mail::CheckDeliveryParams
  def deliver!(mail); end

  def initialize(settings); end

  def logger(); end

  def settings(); end

  def severity(); end
end

class Mail::LoggerDelivery
end

class Mail::Message
  HEADER_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdsElement
  def initialize(string); end

  def message_id(); end

  def message_ids(); end
end

class Mail::MessageIdsElement
end

class Mail::MimeVersionElement
  def initialize(string); end

  def major(); end

  def minor(); end
end

class Mail::MimeVersionElement
end

class Mail::MimeVersionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte
  VALID_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte::Unicode
  HANGUL_JAMO_FIRST = ::T.let(nil, ::T.untyped)
  HANGUL_JAMO_LAST = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  LEADERS_AND_TRAILERS = ::T.let(nil, ::T.untyped)
  LEADERS_PAT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  TRAILERS_PAT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Mail::OptionalField
end

class Mail::OptionalField
end

class Mail::POP3
  def connection(&block); end

  def delete_all(); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::POP3
end

class Mail::PhraseList
  def initialize(string); end

  def phrases(); end
end

class Mail::PhraseList
end

class Mail::ReceivedElement
  include ::Mail::Utilities
  include ::Mail::Constants
  def date_time(); end

  def info(); end

  def initialize(string); end

  def to_s(*args); end
end

class Mail::ReceivedElement
end

class Mail::ReceivedField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReferencesField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReplyToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentBccField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentCcField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentDateField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentFromField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentMessageIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentSenderField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReturnPathField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

Mail::RubyVer = Mail::Ruby19

class Mail::SMTP
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SMTPConnection
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end

  def smtp(); end

  def smtp=(smtp); end
end

class Mail::SMTPConnection
end

class Mail::SenderField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Sendmail
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SubjectField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::TestRetriever
  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end
end

class Mail::TestRetriever
  def self.emails(); end

  def self.emails=(val); end
end

class Mail::ToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Utilities
  CRLF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  TO_CRLF_REGEX = ::T.let(nil, ::T.untyped)
end

module Mail::VERSION
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module Marcel
  VERSION = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  BINARY = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  def self.extend(type, extensions: T.unsafe(nil), parents: T.unsafe(nil), magic: T.unsafe(nil)); end

  def self.for(pathname_or_io=T.unsafe(nil), name: T.unsafe(nil), extension: T.unsafe(nil), declared_type: T.unsafe(nil)); end
end

module Marshal
  extend ::ActiveSupport::MarshalWithAutoloading
end

class Matrix
  include ::ExceptionForMatrix
  include ::Matrix::CoercionHelper
  def *(m); end

  def **(other); end

  def +(m); end

  def +@(); end

  def -(m); end

  def -@(); end

  def /(other); end

  def ==(other); end

  def [](i, j); end

  def []=(i, j, v); end

  def adjugate(); end

  def antisymmetric?(); end

  def coerce(other); end

  def cofactor(row, column); end

  def cofactor_expansion(row: T.unsafe(nil), column: T.unsafe(nil)); end

  def collect(which=T.unsafe(nil), &block); end

  def collect!(which=T.unsafe(nil)); end

  def column(j); end

  def column_count(); end

  def column_size(); end

  def column_vectors(); end

  def combine(*matrices, &block); end

  def component(i, j); end

  def conj(); end

  def conjugate(); end

  def det(); end

  def det_e(); end

  def determinant(); end

  def determinant_e(); end

  def diagonal?(); end

  def each_with_index(which=T.unsafe(nil)); end

  def eigen(); end

  def eigensystem(); end

  def element(i, j); end

  def elements_to_f(); end

  def elements_to_i(); end

  def elements_to_r(); end

  def empty?(); end

  def entrywise_product(m); end

  def eql?(other); end

  def find_index(*args); end

  def first_minor(row, column); end

  def hadamard_product(m); end

  def hermitian?(); end

  def hstack(*matrices); end

  def imag(); end

  def imaginary(); end

  def index(*args); end

  def initialize(rows, column_count=T.unsafe(nil)); end

  def inv(); end

  def inverse(); end

  def laplace_expansion(row: T.unsafe(nil), column: T.unsafe(nil)); end

  def lower_triangular?(); end

  def lup(); end

  def lup_decomposition(); end

  def map(which=T.unsafe(nil), &block); end

  def map!(which=T.unsafe(nil)); end

  def minor(*param); end

  def normal?(); end

  def orthogonal?(); end

  def permutation?(); end

  def rank(); end

  def rank_e(); end

  def real(); end

  def real?(); end

  def rect(); end

  def rectangular(); end

  def regular?(); end

  def round(ndigits=T.unsafe(nil)); end

  def row(i, &block); end

  def row_count(); end

  def row_size(); end

  def row_vectors(); end

  def rows(); end

  def singular?(); end

  def skew_symmetric?(); end

  def square?(); end

  def symmetric?(); end

  def t(); end

  def to_a(); end

  def to_matrix(); end

  def tr(); end

  def trace(); end

  def transpose(); end

  def unitary?(); end

  def upper_triangular?(); end

  def vstack(*matrices); end

  def zero?(); end
  SELECTORS = ::T.let(nil, ::T.untyped)
end

module Matrix::CoercionHelper
end

module Matrix::CoercionHelper
  def self.check_int(val, count, kind); end

  def self.check_range(val, count, kind); end

  def self.coerce_to(obj, cls, meth); end

  def self.coerce_to_int(obj); end

  def self.coerce_to_matrix(obj); end
end

module Matrix::ConversionHelper
end

module Matrix::ConversionHelper
end

class Matrix::EigenvalueDecomposition
  def initialize(a); end
end

class Matrix::LUPDecomposition
  include ::Matrix::ConversionHelper
  def det(); end

  def determinant(); end

  def initialize(a); end

  def l(); end

  def p(); end

  def pivots(); end

  def singular?(); end

  def solve(b); end

  def to_a(); end

  def to_ary(); end

  def u(); end
end

class Matrix::LUPDecomposition
end

class Matrix::Scalar
  include ::ExceptionForMatrix
  include ::Matrix::CoercionHelper
  def *(other); end

  def **(other); end

  def +(other); end

  def -(other); end

  def /(other); end

  def initialize(value); end
end

class Matrix::Scalar
  extend ::Exception2MessageMapper
  def self.included(mod); end
end

class Matrix
  extend ::Exception2MessageMapper
  extend ::Matrix::ConversionHelper
  def self.included(mod); end
end

module MethodSource
  VERSION = ::T.let(nil, ::T.untyped)
end

module MethodSource::CodeHelpers::IncompleteExpression
  GENERIC_REGEXPS = ::T.let(nil, ::T.untyped)
  RBX_ONLY_REGEXPS = ::T.let(nil, ::T.untyped)
end

class MigrateCreditCardsToWalletPaymentSources::CreditCard
  include ::MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedAttributeMethods
  include ::MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class MigrateCreditCardsToWalletPaymentSources::CreditCard::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedRelationMethods
end

class MigrateCreditCardsToWalletPaymentSources::CreditCard::ActiveRecord_AssociationRelation
end

class MigrateCreditCardsToWalletPaymentSources::CreditCard::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedRelationMethods
end

class MigrateCreditCardsToWalletPaymentSources::CreditCard::ActiveRecord_Associations_CollectionProxy
end

class MigrateCreditCardsToWalletPaymentSources::CreditCard::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedRelationMethods
end

class MigrateCreditCardsToWalletPaymentSources::CreditCard::ActiveRecord_Relation
end

module MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedAssociationMethods
end

module MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedAssociationMethods
end

module MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedAttributeMethods
end

module MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedAttributeMethods
  extend ::Mutex_m
end

module MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedRelationMethods
end

module MigrateCreditCardsToWalletPaymentSources::CreditCard::GeneratedRelationMethods
  extend ::Mutex_m
end

class MigrateCreditCardsToWalletPaymentSources::CreditCard
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource
  include ::MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedAttributeMethods
  include ::MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedRelationMethods
end

class MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::ActiveRecord_AssociationRelation
end

class MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedRelationMethods
end

class MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::ActiveRecord_Associations_CollectionProxy
end

class MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedRelationMethods
end

class MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::ActiveRecord_Relation
end

module MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedAssociationMethods
end

module MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedAssociationMethods
end

module MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedAttributeMethods
end

module MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedAttributeMethods
  extend ::Mutex_m
end

module MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedRelationMethods
end

module MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource::GeneratedRelationMethods
  extend ::Mutex_m
end

class MigrateCreditCardsToWalletPaymentSources::WalletPaymentSource
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class MimeMagic
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  MAGIC = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module MiniMagick::Configuration
  CLI_DETECTION = ::T.let(nil, ::T.untyped)
end

class MiniMagick::Image::Info
  ASCII_ENCODED_EXIF_KEYS = ::T.let(nil, ::T.untyped)
end

class MiniMagick::Tool
  CREATION_OPERATORS = ::T.let(nil, ::T.untyped)
end

module MiniMagick::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module MiniMime
  VERSION = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db
  LOCK = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db::RandomAccessDb
  MAX_CACHED = ::T.let(nil, ::T.untyped)
end

class MiniMime::Info
  BINARY_ENCODINGS = ::T.let(nil, ::T.untyped)
end

MiniTest = Minitest

module Minitest
  ENCS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class Minitest::BacktraceFilter
  MT_RE = ::T.let(nil, ::T.untyped)
end

class Minitest::Runnable
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Test
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

class Minitest::Unit
  VERSION = ::T.let(nil, ::T.untyped)
end

class Module
  def rake_extension(method); end
  DELEGATION_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
  DELEGATION_RESERVED_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  RUBY_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
end

module Monetize
  VERSION = ::T.let(nil, ::T.untyped)
end

class Monetize::Collection
  LIST_SPLIT = ::T.let(nil, ::T.untyped)
  RANGE_SPLIT = ::T.let(nil, ::T.untyped)
end

class Monetize::Parser
  CURRENCY_SYMBOLS = ::T.let(nil, ::T.untyped)
  DEFAULT_DECIMAL_MARK = ::T.let(nil, ::T.untyped)
  MULTIPLIER_REGEXP = ::T.let(nil, ::T.untyped)
  MULTIPLIER_SUFFIXES = ::T.let(nil, ::T.untyped)
end

class Money::Bank::VariableExchange
  FORMAT_SERIALIZERS = ::T.let(nil, ::T.untyped)
  RATE_FORMATS = ::T.let(nil, ::T.untyped)
  SERIALIZER_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module Money::Currency::Loader
  DATA_PATH = ::T.let(nil, ::T.untyped)
end

class Money::Formatter
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Money::LocaleBackend
  BACKENDS = ::T.let(nil, ::T.untyped)
end

class Money::LocaleBackend::I18n
  KEY_MAP = ::T.let(nil, ::T.untyped)
end

class Money::RatesStore::Memory
  INDEX_KEY_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Monitor
  def enter(); end

  def exit(); end

  def try_enter(); end
end

module MonitorMixin
  def initialize(*args); end
  EXCEPTION_IMMEDIATE = ::T.let(nil, ::T.untyped)
  EXCEPTION_NEVER = ::T.let(nil, ::T.untyped)
end

class MonitorMixin::ConditionVariable
  def initialize(monitor); end
end

module Mutex_m
  VERSION = ::T.let(nil, ::T.untyped)
end

module NIO
  ENGINE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class NIO::ByteBuffer
  include ::Enumerable
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NameError
  include ::DidYouMean::Correctable
end

class Net::APOP
end

class Net::APOP
end

Net::APOPSession = Net::APOP

class Net::BufferedIO
  def write_timeout(); end

  def write_timeout=(write_timeout); end
end

class Net::HTTP
  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def write_timeout(); end

  def write_timeout=(sec); end
  ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
end

Net::HTTPClientError::EXCEPTION_TYPE = Net::HTTPServerException

Net::HTTPClientErrorCode = Net::HTTPClientError

class Net::HTTPEarlyHints
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPEarlyHints
end

Net::HTTPFatalErrorCode = Net::HTTPClientError

class Net::HTTPInformation
end

Net::HTTPInformationCode::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPInformation
end

class Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPLoopDetected
end

class Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPMisdirectedRequest
end

Net::HTTPMovedTemporarily = Net::HTTPFound

Net::HTTPMultipleChoice = Net::HTTPMultipleChoices

class Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPNotExtended
end

class Net::HTTPPayloadTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPPayloadTooLarge
end

class Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPProcessing
end

class Net::HTTPRangeNotSatisfiable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPRangeNotSatisfiable
end

Net::HTTPRedirection::EXCEPTION_TYPE = Net::HTTPRetriableError

Net::HTTPRedirectionCode = Net::HTTPRedirection

Net::HTTPRequestURITooLarge = Net::HTTPURITooLong

Net::HTTPResponceReceiver = Net::HTTPResponse

Net::HTTPRetriableCode = Net::HTTPRedirection

Net::HTTPServerError::EXCEPTION_TYPE = Net::HTTPFatalError

Net::HTTPServerErrorCode = Net::HTTPServerError

Net::HTTPSession = Net::HTTP

Net::HTTPSuccess::EXCEPTION_TYPE = Net::HTTPError

Net::HTTPSuccessCode = Net::HTTPSuccess

class Net::HTTPURITooLong
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPURITooLong
end

Net::HTTPUnknownResponse::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPVariantAlsoNegotiates
end

class Net::IMAP
  def open_timeout(); end
  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::NumValidator
  def self.ensure_mod_sequence_value(num); end

  def self.valid_mod_sequence_value?(num); end
end

Net::NetPrivate::HTTPRequest = Net::HTTPRequest

Net::NetPrivate::Socket = Net::InternetMessageIO

Net::POP = Net::POP3

class Net::POP3
  def active?(); end

  def address(); end

  def apop?(); end

  def auth_only(account, password); end

  def delete_all(); end

  def disable_ssl(); end

  def each(&block); end

  def each_mail(&block); end

  def enable_ssl(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil), port=T.unsafe(nil)); end

  def finish(); end

  def initialize(addr, port=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def logging(msg); end

  def mails(); end

  def n_bytes(); end

  def n_mails(); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def port(); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def reset(); end

  def set_all_uids(); end

  def set_debug_output(arg); end

  def start(account, password); end

  def started?(); end

  def use_ssl?(); end
  Revision = ::T.let(nil, ::T.untyped)
end

class Net::POP3
  def self.APOP(isapop); end

  def self.auth_only(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def self.certs(); end

  def self.create_ssl_params(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil)); end

  def self.default_pop3_port(); end

  def self.default_pop3s_port(); end

  def self.default_port(); end

  def self.delete_all(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.disable_ssl(); end

  def self.enable_ssl(*args); end

  def self.foreach(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.socket_type(); end

  def self.ssl_params(); end

  def self.start(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.use_ssl?(); end

  def self.verify(); end
end

class Net::POP3Command
  def apop(account, password); end

  def auth(account, password); end

  def dele(num); end

  def initialize(sock); end

  def list(); end

  def quit(); end

  def retr(num, &block); end

  def rset(); end

  def socket(); end

  def stat(); end

  def top(num, lines=T.unsafe(nil), &block); end

  def uidl(num=T.unsafe(nil)); end
end

class Net::POP3Command
end

Net::POP3Session = Net::POP3

class Net::POPAuthenticationError
end

class Net::POPAuthenticationError
end

class Net::POPBadResponse
end

class Net::POPBadResponse
end

class Net::POPError
end

class Net::POPError
end

class Net::POPMail
  def all(dest=T.unsafe(nil), &block); end

  def delete(); end

  def delete!(); end

  def deleted?(); end

  def header(dest=T.unsafe(nil)); end

  def initialize(num, len, pop, cmd); end

  def length(); end

  def mail(dest=T.unsafe(nil), &block); end

  def number(); end

  def pop(dest=T.unsafe(nil), &block); end

  def size(); end

  def top(lines, dest=T.unsafe(nil)); end

  def uid=(uid); end

  def uidl(); end

  def unique_id(); end
end

class Net::POPMail
end

Net::POPSession = Net::POP3

Net::ProtocRetryError = Net::ProtoRetriableError

class Net::ReadTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

Net::SMTPSession = Net::SMTP

class Net::WriteTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class NilClass
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
  def to_d(); end
end

class Nokogiri::CSS::Parser
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
end

class Object
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::PP::ObjectMixin
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def dclone(); end

  def to_yaml(options=T.unsafe(nil)); end
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  IS_SECTION = ::T.let(nil, ::T.untyped)
  RAILS_6_OR_ABOVE = ::T.let(nil, ::T.untyped)
  RANSACK_FORM_BUILDER = ::T.let(nil, ::T.untyped)
  RUBY18 = ::T.let(nil, ::T.untyped)
  RUBY19 = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class Object
  def self.yaml_tag(url); end
end

class OpenSSL::ASN1::ASN1Data
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::BN
  def +@(); end

  def -@(); end

  def /(_); end

  def negative?(); end
end

module OpenSSL::KDF
end

class OpenSSL::KDF::KDFError
end

class OpenSSL::KDF::KDFError
end

module OpenSSL::KDF
  def self.hkdf(*_); end

  def self.pbkdf2_hmac(*_); end

  def self.scrypt(*_); end
end

class OpenSSL::OCSP::Request
  def signed?(); end
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKey::EC
  EXPLICIT_CURVE = ::T.let(nil, ::T.untyped)
end

class OpenSSL::PKey::EC::Point
  def to_octet_string(_); end
end

module OpenSSL::SSL
  OP_ALLOW_NO_DHE_KEX = ::T.let(nil, ::T.untyped)
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_NO_TLSv1_3 = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_1_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_2_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

module OpenSSL::X509
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  def ==(other); end
end

class OpenSSL::X509::CRL
  def ==(other); end
end

class OpenSSL::X509::Extension
  def ==(other); end
end

class OpenSSL::X509::Name
  def to_utf8(); end
end

class OpenSSL::X509::Request
  def ==(other); end
end

class OpenSSL::X509::Revoked
  def ==(other); end

  def to_der(); end
end

module OpenSSL
  def self.fips_mode(); end
end

class OpenURI::Buffer
  def <<(str); end

  def io(); end

  def size(); end
  StringMax = ::T.let(nil, ::T.untyped)
end

class OpenURI::Buffer
end

class OpenURI::HTTPError
  def initialize(message, io); end
end

class OpenURI::HTTPRedirect
  def initialize(message, io, uri); end
end

module OpenURI::Meta
  def content_type_parse(); end

  def meta_add_field(name, value); end

  def meta_add_field2(name, values); end

  def meta_setup_encoding(); end
  RE_LWS = ::T.let(nil, ::T.untyped)
  RE_PARAMETERS = ::T.let(nil, ::T.untyped)
  RE_QUOTED_STRING = ::T.let(nil, ::T.untyped)
  RE_TOKEN = ::T.let(nil, ::T.untyped)
end

module OpenURI::Meta
  def self.init(obj, src=T.unsafe(nil)); end
end

module OpenURI
  def self.check_options(options); end

  def self.open_http(buf, target, proxy, options); end

  def self.open_loop(uri, options); end

  def self.open_uri(name, *rest); end

  def self.redirectable?(uri1, uri2); end

  def self.scan_open_optional_arguments(*rest); end
end

module Paperclip
  REQUIRED_VALIDATORS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Paperclip::AbstractAdapter
  OS_RESTRICTED_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class Paperclip::ContentTypeDetector
  EMPTY_TYPE = ::T.let(nil, ::T.untyped)
  SENSIBLE_DEFAULT = ::T.let(nil, ::T.untyped)
end

class Paperclip::DataUriAdapter
  REGEXP = ::T.let(nil, ::T.untyped)
end

class Paperclip::FileCommandContentTypeDetector
  SENSIBLE_DEFAULT = ::T.let(nil, ::T.untyped)
end

class Paperclip::Geometry
  EXIF_ROTATED_ORIENTATION_VALUES = ::T.let(nil, ::T.untyped)
end

class Paperclip::GeometryParser
  FORMAT = ::T.let(nil, ::T.untyped)
end

class Paperclip::HttpUrlProxyAdapter
  REGEXP = ::T.let(nil, ::T.untyped)
end

module Paperclip::Interpolations
  ID_PARTITION_LIMIT = ::T.let(nil, ::T.untyped)
  RIGHT_HERE = ::T.let(nil, ::T.untyped)
end

module Paperclip::Schema
  COLUMNS = ::T.let(nil, ::T.untyped)
end

module Paperclip::Storage::Fog
  AWS_BUCKET_SUBDOMAIN_RESTRICTON_REGEX = ::T.let(nil, ::T.untyped)
end

class Paperclip::Thumbnail
  ANIMATED_FORMATS = ::T.let(nil, ::T.untyped)
  MULTI_FRAME_FORMATS = ::T.let(nil, ::T.untyped)
end

module Parallel
  Stop = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Parallel::UserInterruptHandler
  INTERRUPT_SIGNAL = ::T.let(nil, ::T.untyped)
end

class Parlour::ConflictResolver
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::Conversion::Converter
  extend ::T::Private::Abstract::Hooks
  extend ::T::InterfaceWrapper::Helpers
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Parlour::Debugging::Tree
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Parlour::Debugging
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::Generator
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::Options
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::ParseError
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::Plugin
  extend ::T::Private::Abstract::Hooks
  extend ::T::InterfaceWrapper::Helpers
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::RbiGenerator::Parameter
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::RbiGenerator::StructProp
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::RbsGenerator::Block
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::RbsGenerator::MethodSignature
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::RbsGenerator::Parameter
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Parlour::TypeLoader
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::TypeParser::NodePath
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::TypeParser
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::TypedObject
  extend ::T::Private::Abstract::Hooks
  extend ::T::InterfaceWrapper::Helpers
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::Types::Proc::Parameter
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class Parlour::Types::Type
  extend ::T::Private::Abstract::Hooks
  extend ::T::InterfaceWrapper::Helpers
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

ParseError = Racc::ParseError

module Parser
  MESSAGES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

Parser::CurrentRuby = Parser::Ruby26

class Parser::Diagnostic
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer
  ESCAPES = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_BEGIN = ::T.let(nil, ::T.untyped)
  LEX_STATES = ::T.let(nil, ::T.untyped)
  PUNCTUATION = ::T.let(nil, ::T.untyped)
  PUNCTUATION_BEGIN = ::T.let(nil, ::T.untyped)
  REGEXP_META_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Dedenter
  TAB_WIDTH = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Literal
  DELIMITERS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

module Parser::Meta
  NODE_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby24
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby26
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Buffer
  ENCODING_RE = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Comment::Associator
  MAGIC_COMMENT_RE = ::T.let(nil, ::T.untyped)
  POSTFIX_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Source::TreeRewriter
  ACTIONS = ::T.let(nil, ::T.untyped)
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
  POLICY_TO_LEVEL = ::T.let(nil, ::T.untyped)
end

class Parser::StaticEnvironment
  FORWARD_ARGS = ::T.let(nil, ::T.untyped)
end

class Pathname
  def fnmatch?(*_); end

  def glob(*_); end

  def make_symlink(_); end
end

Polyamorous::InnerJoin = Arel::Nodes::InnerJoin

Polyamorous::JoinAssociation = ActiveRecord::Associations::JoinDependency::JoinAssociation

Polyamorous::JoinDependency = ActiveRecord::Associations::JoinDependency

Polyamorous::OuterJoin = Arel::Nodes::OuterJoin

module Polyfill
  VERSION = ::T.let(nil, ::T.untyped)
end

class Proc
  def <<(_); end

  def >>(_); end

  def clone(); end
end

class ProgressBar::Components::Bar
  DEFAULT_PROGRESS_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_REMAINDER_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_UPA_STEPS = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Time
  ELAPSED_LABEL = ::T.let(nil, ::T.untyped)
  ESTIMATED_LABEL = ::T.let(nil, ::T.untyped)
  NO_TIME_ELAPSED_TEXT = ::T.let(nil, ::T.untyped)
  OOB_FRIENDLY_TIME_TEXT = ::T.let(nil, ::T.untyped)
  OOB_LIMIT_IN_HOURS = ::T.let(nil, ::T.untyped)
  OOB_TIME_FORMATS = ::T.let(nil, ::T.untyped)
  OOB_UNKNOWN_TIME_TEXT = ::T.let(nil, ::T.untyped)
  TIME_FORMAT = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Title
  DEFAULT_TITLE = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::Molecule
  BAR_MOLECULES = ::T.let(nil, ::T.untyped)
  MOLECULES = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::String
  ANSI_SGR_PATTERN = ::T.let(nil, ::T.untyped)
  MOLECULE_PATTERN = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Output
  DEFAULT_OUTPUT_STREAM = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::NonTty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::Tty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Progress
  DEFAULT_BEGINNING_POSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SMOOTHING = ::T.let(nil, ::T.untyped)
  DEFAULT_TOTAL = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Time
  TIME_MOCKING_LIBRARY_METHODS = ::T.let(nil, ::T.untyped)
end

class Pry
  BINDING_METHOD_IMPL = ::T.let(nil, ::T.untyped)
  Commands = ::T.let(nil, ::T.untyped)
  EMPTY_COMPLETIONS = ::T.let(nil, ::T.untyped)
  HAS_SAFE_LEVEL = ::T.let(nil, ::T.untyped)
  LOCAL_RC_FILE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pry::BasicObject
  ENV = ::T.let(nil, ::T.untyped)
end

Pry::BasicObject::Dir = Dir

Pry::BasicObject::File = File

Pry::BasicObject::Kernel = Kernel

Pry::BasicObject::LoadError = LoadError

Pry::BasicObject::Pry = Pry

class Pry::Code
  extend ::MethodSource::CodeHelpers
end

class Pry::CodeFile
  DEFAULT_EXT = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  FILES = ::T.let(nil, ::T.untyped)
  INITIAL_PWD = ::T.let(nil, ::T.untyped)
end

class Pry::Command
  VOID_VALUE = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Constants
  DEPRECATED_CONSTANTS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Globals
  BUILTIN_GLOBALS = ::T.let(nil, ::T.untyped)
  PSEUDO_GLOBALS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Wtf
  RUBY_FRAME_PATTERN = ::T.let(nil, ::T.untyped)
end

module Pry::Helpers::DocumentationHelpers
  YARD_TAGS = ::T.let(nil, ::T.untyped)
end

module Pry::Helpers::Text
  COLORS = ::T.let(nil, ::T.untyped)
end

class Pry::Indent
  IGNORE_TOKENS = ::T.let(nil, ::T.untyped)
  MIDWAY_TOKENS = ::T.let(nil, ::T.untyped)
  OPEN_TOKENS = ::T.let(nil, ::T.untyped)
  OPTIONAL_DO_TOKENS = ::T.let(nil, ::T.untyped)
  SINGLELINE_TOKENS = ::T.let(nil, ::T.untyped)
  SPACES = ::T.let(nil, ::T.untyped)
  STATEMENT_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Pry::InputCompleter
  ARRAY_REGEXP = ::T.let(nil, ::T.untyped)
  CONSTANT_OR_METHOD_REGEXP = ::T.let(nil, ::T.untyped)
  CONSTANT_REGEXP = ::T.let(nil, ::T.untyped)
  GLOBALVARIABLE_REGEXP = ::T.let(nil, ::T.untyped)
  HEX_REGEXP = ::T.let(nil, ::T.untyped)
  NUMERIC_REGEXP = ::T.let(nil, ::T.untyped)
  PROC_OR_HASH_REGEXP = ::T.let(nil, ::T.untyped)
  REGEX_REGEXP = ::T.let(nil, ::T.untyped)
  RESERVED_WORDS = ::T.let(nil, ::T.untyped)
  SYMBOL_METHOD_CALL_REGEXP = ::T.let(nil, ::T.untyped)
  SYMBOL_REGEXP = ::T.let(nil, ::T.untyped)
  TOPLEVEL_LOOKUP_REGEXP = ::T.let(nil, ::T.untyped)
  VARIABLE_REGEXP = ::T.let(nil, ::T.untyped)
  WORD_ESCAPE_STR = ::T.let(nil, ::T.untyped)
end

class Pry::Inspector
  MAP = ::T.let(nil, ::T.untyped)
end

class Pry::ObjectPath
  SPECIAL_TERMS = ::T.let(nil, ::T.untyped)
end

class Pry::Output
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
end

class Pry::PluginManager
  PRY_PLUGIN_PREFIX = ::T.let(nil, ::T.untyped)
end

class Pry::Slop
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pry::Slop::Option
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Psych
  VERSION = ::T.let(nil, ::T.untyped)
end

module Psych
  def self.add_builtin_type(type_tag, &block); end

  def self.add_domain_type(domain, type_tag, &block); end

  def self.add_tag(tag, klass); end

  def self.domain_types(); end

  def self.domain_types=(domain_types); end

  def self.dump_tags(); end

  def self.dump_tags=(dump_tags); end

  def self.libyaml_version(); end

  def self.load_tags(); end

  def self.load_tags=(load_tags); end

  def self.remove_type(type_tag); end
end

module PublicSuffix
  BANG = ::T.let(nil, ::T.untyped)
  DOT = ::T.let(nil, ::T.untyped)
  STAR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PublicSuffix::List
  DEFAULT_LIST_PATH = ::T.let(nil, ::T.untyped)
end

module Puma
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  IS_JRUBY = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  Plugins = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Puma::Binder
  RACK_VERSION = ::T.let(nil, ::T.untyped)
end

class Puma::Client
  EmptyBody = ::T.let(nil, ::T.untyped)
end

module Puma::ConfigDefault
  DefaultRackup = ::T.let(nil, ::T.untyped)
  DefaultTCPHost = ::T.let(nil, ::T.untyped)
  DefaultTCPPort = ::T.let(nil, ::T.untyped)
  DefaultWorkerShutdownTimeout = ::T.let(nil, ::T.untyped)
  DefaultWorkerTimeout = ::T.let(nil, ::T.untyped)
end

module Puma::Const
  CGI_VER = ::T.let(nil, ::T.untyped)
  CHUNKED = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  CLOSE = ::T.let(nil, ::T.untyped)
  CLOSE_CHUNKED = ::T.let(nil, ::T.untyped)
  CODE_NAME = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONNECTION_CLOSE = ::T.let(nil, ::T.untyped)
  CONNECTION_KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH2 = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_S = ::T.let(nil, ::T.untyped)
  CONTINUE = ::T.let(nil, ::T.untyped)
  EARLY_HINTS = ::T.let(nil, ::T.untyped)
  ERROR_RESPONSE = ::T.let(nil, ::T.untyped)
  FAST_TRACK_KA_TIMEOUT = ::T.let(nil, ::T.untyped)
  FIRST_DATA_TIMEOUT = ::T.let(nil, ::T.untyped)
  GATEWAY_INTERFACE = ::T.let(nil, ::T.untyped)
  HALT_COMMAND = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HIJACK = ::T.let(nil, ::T.untyped)
  HIJACK_IO = ::T.let(nil, ::T.untyped)
  HIJACK_P = ::T.let(nil, ::T.untyped)
  HTTP = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTPS_KEY = ::T.let(nil, ::T.untyped)
  HTTP_10_200 = ::T.let(nil, ::T.untyped)
  HTTP_11 = ::T.let(nil, ::T.untyped)
  HTTP_11_100 = ::T.let(nil, ::T.untyped)
  HTTP_11_200 = ::T.let(nil, ::T.untyped)
  HTTP_CONNECTION = ::T.let(nil, ::T.untyped)
  HTTP_EXPECT = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_INJECTION_REGEX = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  LINE_END = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  LOCALHOST_ADDR = ::T.let(nil, ::T.untyped)
  LOCALHOST_IP = ::T.let(nil, ::T.untyped)
  MAX_BODY = ::T.let(nil, ::T.untyped)
  MAX_FAST_INLINE = ::T.let(nil, ::T.untyped)
  MAX_HEADER = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  PERSISTENT_TIMEOUT = ::T.let(nil, ::T.untyped)
  PORT_443 = ::T.let(nil, ::T.untyped)
  PORT_80 = ::T.let(nil, ::T.untyped)
  PUMA_CONFIG = ::T.let(nil, ::T.untyped)
  PUMA_PEERCERT = ::T.let(nil, ::T.untyped)
  PUMA_SERVER_STRING = ::T.let(nil, ::T.untyped)
  PUMA_SOCKET = ::T.let(nil, ::T.untyped)
  PUMA_TMP_BASE = ::T.let(nil, ::T.untyped)
  PUMA_VERSION = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_AFTER_REPLY = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  REMOTE_ADDR = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  REQUEST_URI = ::T.let(nil, ::T.untyped)
  RESTART_COMMAND = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SERVER_SOFTWARE = ::T.let(nil, ::T.untyped)
  STOP_COMMAND = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING2 = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING_CHUNKED = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WORKER_CHECK_INTERVAL = ::T.let(nil, ::T.untyped)
  WRITE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Puma::Events
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Puma::HttpParserError
end

class Puma::HttpParserError
end

class Puma::Launcher
  KEYS_NOT_TO_PERSIST_IN_STATE = ::T.let(nil, ::T.untyped)
end

module Puma::MiniSSL
  OPENSSL_LIBRARY_VERSION = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_SSL3 = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_TLS1 = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_TLS1_1 = ::T.let(nil, ::T.untyped)
  OPENSSL_VERSION = ::T.let(nil, ::T.untyped)
  VERIFY_FAIL_IF_NO_PEER_CERT = ::T.let(nil, ::T.untyped)
  VERIFY_NONE = ::T.let(nil, ::T.untyped)
  VERIFY_PEER = ::T.let(nil, ::T.untyped)
end

class Puma::MiniSSL::SSLError
end

class Puma::MiniSSL::SSLError
end

class Puma::Plugin
  CALLER_FILE = ::T.let(nil, ::T.untyped)
end

class Puma::Reactor
  DefaultSleepFor = ::T.let(nil, ::T.untyped)
end

class Puma::Server
  ThreadLocalKey = ::T.let(nil, ::T.untyped)
end

class Puma::ThreadPool
  SHUTDOWN_GRACE_TIME = ::T.let(nil, ::T.untyped)
end

module Puma::Util
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class REXML::AttlistDecl
  def initialize(source); end
end

class REXML::Attribute
  def initialize(first, second=T.unsafe(nil), parent=T.unsafe(nil)); end
end

class REXML::Attributes
  def initialize(element); end
end

class REXML::CData
  def initialize(first, whitespace=T.unsafe(nil), parent=T.unsafe(nil)); end
end

class REXML::Child
  def initialize(parent=T.unsafe(nil)); end
end

class REXML::Comment
  def initialize(first, second=T.unsafe(nil)); end
end

class REXML::Declaration
  def initialize(src); end
end

class REXML::DocType
  def initialize(first, parent=T.unsafe(nil)); end
end

class REXML::Document
  def initialize(source=T.unsafe(nil), context=T.unsafe(nil)); end
end

class REXML::Element
  def initialize(arg=T.unsafe(nil), parent=T.unsafe(nil), context=T.unsafe(nil)); end
end

class REXML::Elements
  def initialize(parent); end
end

class REXML::Entity
  def initialize(stream, value=T.unsafe(nil), parent=T.unsafe(nil), reference=T.unsafe(nil)); end
end

class REXML::ExternalEntity
  def initialize(src); end
end

class REXML::Formatters::Default
  def initialize(ie_hack=T.unsafe(nil)); end
end

class REXML::Formatters::Pretty
  def initialize(indentation=T.unsafe(nil), ie_hack=T.unsafe(nil)); end
end

class REXML::IOSource
  def initialize(arg, block_size=T.unsafe(nil), encoding=T.unsafe(nil)); end
end

class REXML::Instruction
  def initialize(target, content=T.unsafe(nil)); end
end

class REXML::NotationDecl
  def initialize(name, middle, pub, sys); end
end

class REXML::Output
  def initialize(real_IO, encd=T.unsafe(nil)); end
end

class REXML::ParseException
  def initialize(message, source=T.unsafe(nil), parser=T.unsafe(nil), exception=T.unsafe(nil)); end
end

class REXML::Parsers::BaseParser
  def initialize(source); end
  QNAME = ::T.let(nil, ::T.untyped)
  QNAME_STR = ::T.let(nil, ::T.untyped)
end

class REXML::Parsers::StreamParser
  def initialize(source, listener); end
end

class REXML::Parsers::TreeParser
  def initialize(source, build_context=T.unsafe(nil)); end
end

class REXML::Parsers::XPathParser
  LOCAL_NAME_WILDCARD = ::T.let(nil, ::T.untyped)
  PREFIX_WILDCARD = ::T.let(nil, ::T.untyped)
end

class REXML::Source
  def initialize(arg, encoding=T.unsafe(nil)); end
end

class REXML::SyncEnumerator
  def initialize(*enums); end
end

class REXML::Text
  def initialize(arg, respect_whitespace=T.unsafe(nil), parent=T.unsafe(nil), raw=T.unsafe(nil), entity_filter=T.unsafe(nil), illegal=T.unsafe(nil)); end
end

class REXML::UndefinedNamespaceException
  def initialize(prefix, source, parser); end
end

class REXML::Validation::ValidationException
  def initialize(msg); end
end

class REXML::XMLDecl
  def initialize(version=T.unsafe(nil), encoding=T.unsafe(nil), standalone=T.unsafe(nil)); end
end

class REXML::XPath
  def self.match(element, path=T.unsafe(nil), namespaces=T.unsafe(nil), variables=T.unsafe(nil), options=T.unsafe(nil)); end
end

class REXML::XPathNode
  def context(); end

  def initialize(node, context=T.unsafe(nil)); end

  def position(); end

  def raw_node(); end
end

class REXML::XPathNode
end

class REXML::XPathParser
  def initialize(strict: T.unsafe(nil)); end
end

module RSpec
  MODULES_TO_AUTOLOAD = ::T.let(nil, ::T.untyped)
end

module RSpec::ActiveModel::Mocks::Version
  STRING = ::T.let(nil, ::T.untyped)
end

class RSpec::CallerFilter
  ADDITIONAL_TOP_LEVEL_FILES = ::T.let(nil, ::T.untyped)
  IGNORE_REGEX = ::T.let(nil, ::T.untyped)
  LIB_REGEX = ::T.let(nil, ::T.untyped)
  RSPEC_LIBS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Configuration
  DEFAULT_FORMATTER = ::T.let(nil, ::T.untyped)
  FAILED_STATUS = ::T.let(nil, ::T.untyped)
  MOCKING_ADAPTERS = ::T.let(nil, ::T.untyped)
  PASSED_STATUS = ::T.let(nil, ::T.untyped)
  PENDING_STATUS = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  UNKNOWN_STATUS = ::T.let(nil, ::T.untyped)
  VALID_STATUSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::ConfigurationOptions
  OPTIONS_ORDER = ::T.let(nil, ::T.untyped)
  UNFORCED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNPROCESSABLE_OPTIONS = ::T.let(nil, ::T.untyped)
end

RSpec::Core::Example::AllExceptionsExcludingDangerousOnesOnRubiesThatAllowIt = RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue

class RSpec::Core::ExampleGroup
  include ::RSpec::Core::MockingAdapters::RSpec
  include ::RSpec::Mocks::ExampleMethods
  include ::RSpec::Mocks::ArgumentMatchers
  include ::RSpec::Mocks::ExampleMethods::ExpectHost
  include ::RSpec::Matchers
  include ::Capybara::RSpecMatcherProxyInstaller
  INSTANCE_VARIABLE_TO_IGNORE = ::T.let(nil, ::T.untyped)
end

RSpec::Core::ExclusionRules = RSpec::Core::FilterRules

class RSpec::Core::FilterRules
  PROC_HEX_NUMBER = ::T.let(nil, ::T.untyped)
  PROJECT_DIR = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::ConsoleCodes
  VT100_CODES = ::T.let(nil, ::T.untyped)
  VT100_CODE_VALUES = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter
  DEPRECATION_STREAM_NOTICE = ::T.let(nil, ::T.untyped)
  RAISE_ERROR_CONFIG_NOTICE = ::T.let(nil, ::T.untyped)
  TOO_MANY_WARNINGS_NOTICE = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter
  TOO_MANY_USES_LIMIT = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::ExceptionPresenter
  PENDING_DETAIL_FORMATTER = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::Helpers
  DEFAULT_PRECISION = ::T.let(nil, ::T.untyped)
  SUB_SECOND_PRECISION = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Formatters::HtmlPrinter
  GLOBAL_SCRIPTS = ::T.let(nil, ::T.untyped)
  GLOBAL_STYLES = ::T.let(nil, ::T.untyped)
  HTML_HEADER = ::T.let(nil, ::T.untyped)
  REPORT_HEADER = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation
  RESET_CODE = ::T.let(nil, ::T.untyped)
end

RSpec::Core::Formatters::SyntaxHighlighter::WindowsImplementation = RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation

class RSpec::Core::Hooks::HookCollections
  EMPTY_HOOK_ARRAY = ::T.let(nil, ::T.untyped)
  HOOK_TYPES = ::T.let(nil, ::T.untyped)
  SCOPES = ::T.let(nil, ::T.untyped)
  SCOPE_ALIASES = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Metadata
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Ordering::Random
  MAX_32_BIT = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Pending
  NOT_YET_IMPLEMENTED = ::T.let(nil, ::T.untyped)
  NO_REASON_GIVEN = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Profiler
  NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

class RSpec::Core::Reporter
  RSPEC_NOTIFICATIONS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::ShellEscape
  SHELLS_ALLOWING_UNQUOTED_IDS = ::T.let(nil, ::T.untyped)
end

module RSpec::Core::Version
  STRING = ::T.let(nil, ::T.untyped)
end

class RSpec::Expectations::Configuration
  FALSE_POSITIVE_BEHAVIOURS = ::T.let(nil, ::T.untyped)
end

RSpec::Expectations::LegacyMacherAdapter = RSpec::Expectations::LegacyMatcherAdapter

class RSpec::Expectations::MultipleExpectationsNotMetError
  include ::RSpec::Core::MultipleExceptionError::InterfaceTag
end

module RSpec::Expectations::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers
  include ::Capybara::RSpecMatcherProxyInstaller
  def appear_before(*expected, &block_arg); end

  def be_paginated(*expected, &block_arg); end

  def have_meta(*expected, &block_arg); end
  BE_PREDICATE_REGEX = ::T.let(nil, ::T.untyped)
  DYNAMIC_MATCHER_REGEX = ::T.let(nil, ::T.untyped)
  HAS_REGEX = ::T.let(nil, ::T.untyped)
end

RSpec::Matchers::AliasedNegatedMatcher::DefaultFailureMessages = RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages

class RSpec::Matchers::BuiltIn::BaseMatcher
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::BuiltIn::Equal
  LITERAL_SINGLETONS = ::T.let(nil, ::T.untyped)
end

RSpec::Matchers::BuiltIn::SpecificValuesChange::MATCH_ANYTHING = BasicObject

RSpec::Matchers::BuiltIn::StartAndEndWith = RSpec::Matchers::BuiltIn::StartOrEndWith

module RSpec::Matchers::DSL::Macros
  RAISE_NOTIFIER = ::T.let(nil, ::T.untyped)
end

class RSpec::Matchers::DSL::Matcher
  include ::Capybara::RSpecMatcherProxyInstaller
end

class RSpec::Matchers::ExpectedsForMultipleDiffs
  DEFAULT_DIFF_LABEL = ::T.let(nil, ::T.untyped)
  DESCRIPTION_MAX_LENGTH = ::T.let(nil, ::T.untyped)
end

module RSpec::Matchers
  extend ::Capybara::RSpecMatcherProxyInstaller::ClassMethods
end

module RSpec::Mocks
  DEFAULT_CALLBACK_INVOCATION_STRATEGY = ::T.let(nil, ::T.untyped)
  IGNORED_BACKTRACE_LINE = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AnyInstance::PositiveExpectationChain
  ExpectationInvocationOrder = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::AnyInstance::StubChain
  EmptyInvocationOrder = ::T.let(nil, ::T.untyped)
  InvocationOrder = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ArgumentListMatcher
  MATCH_ALL = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::Matchers::HaveReceived
  ARGS_CONSTRAINTS = ::T.let(nil, ::T.untyped)
  CONSTRAINTS = ::T.let(nil, ::T.untyped)
  COUNT_CONSTRAINTS = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::ObjectReference
  MODULE_NAME_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Mocks::Proxy
  DEFAULT_MESSAGE_EXPECTATION_OPTS = ::T.let(nil, ::T.untyped)
end

module RSpec::Mocks::Version
  STRING = ::T.let(nil, ::T.untyped)
end

module RSpec::Rails
  DIRECTORY_MAPPINGS = ::T.let(nil, ::T.untyped)
end

RSpec::Rails::Assertions = Minitest::Assertions

module RSpec::Rails::FeatureExampleGroup
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

class RSpec::Rails::Matchers::ActiveJob::HaveBeenEnqueued
  FAILURE_MESSAGE_EXPECTATION_ACTION = ::T.let(nil, ::T.untyped)
  MESSAGE_EXPECTATION_ACTION = ::T.let(nil, ::T.untyped)
end

class RSpec::Rails::Matchers::ActiveJob::HaveBeenPerformed
  FAILURE_MESSAGE_EXPECTATION_ACTION = ::T.let(nil, ::T.untyped)
  MESSAGE_EXPECTATION_ACTION = ::T.let(nil, ::T.untyped)
end

class RSpec::Rails::Matchers::ActiveJob::HaveEnqueuedJob
  FAILURE_MESSAGE_EXPECTATION_ACTION = ::T.let(nil, ::T.untyped)
  MESSAGE_EXPECTATION_ACTION = ::T.let(nil, ::T.untyped)
end

class RSpec::Rails::Matchers::ActiveJob::HavePerformedJob
  FAILURE_MESSAGE_EXPECTATION_ACTION = ::T.let(nil, ::T.untyped)
  MESSAGE_EXPECTATION_ACTION = ::T.let(nil, ::T.untyped)
end

class RSpec::Rails::Matchers::BaseMatcher
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class RSpec::Rails::Matchers::HaveEnqueuedMail
  MAILER_JOB_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Rails::Matchers::HaveHttpStatus::GenericStatus
  RESPONSE_METHODS = ::T.let(nil, ::T.untyped)
end

module RSpec::Rails::SystemExampleGroup
  CHARS_TO_TRANSLATE = ::T.let(nil, ::T.untyped)
end

RSpec::Rails::TestUnitAssertionAdapter = RSpec::Rails::MinitestAssertionAdapter

module RSpec::Rails::ViewRendering
  RESOLVER_CACHE = ::T.let(nil, ::T.untyped)
end

RSpec::SharedContext = RSpec::Core::SharedContext

module RSpec::Support
  DEFAULT_FAILURE_NOTIFIER = ::T.let(nil, ::T.untyped)
  DEFAULT_WARNING_NOTIFIER = ::T.let(nil, ::T.untyped)
  KERNEL_METHOD_METHOD = ::T.let(nil, ::T.untyped)
end

module RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue
  AVOID_RESCUING = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::EncodedString
  REPLACE = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::MethodSignature
  INFINITY = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::Mutex
  NEW_MUTEX_METHOD = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter
  ELLIPSIS = ::T.let(nil, ::T.untyped)
  INSPECTOR_CLASSES = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::DateTimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::TimeInspector
  FORMAT = ::T.let(nil, ::T.untyped)
end

class RSpec::Support::ObjectFormatter::UninspectableObjectInspector
  OBJECT_ID_FORMAT = ::T.let(nil, ::T.untyped)
end

RSpec::Support::StrictSignatureVerifier = RSpec::Support::MethodSignatureVerifier

module RSpec::Support::Version
  STRING = ::T.let(nil, ::T.untyped)
end

class RSpecJUnitFormatter
  DISCOURAGED_REGEXP = ::T.let(nil, ::T.untyped)
  DISCOURAGED_REPLACEMENTS = ::T.let(nil, ::T.untyped)
  ILLEGAL_REGEXP = ::T.let(nil, ::T.untyped)
  ILLEGAL_REPLACEMENT = ::T.let(nil, ::T.untyped)
  STRIP_DIFF_COLORS_BLOCK_REGEXP = ::T.let(nil, ::T.untyped)
  STRIP_DIFF_COLORS_CODES_REGEXP = ::T.let(nil, ::T.untyped)
end

module Racc
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::Parser
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Revision = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

module Rack
  CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  ETAG = ::T.let(nil, ::T.untyped)
  EXPIRES = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTP_COOKIE = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_PORT = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  LINK = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  POST = ::T.let(nil, ::T.untyped)
  PUT = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_ERRORS = ::T.let(nil, ::T.untyped)
  RACK_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_HIJACK_IO = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_IS_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  RACK_METHODOVERRIDE_ORIGINAL_METHOD = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  RACK_MULTIPROCESS = ::T.let(nil, ::T.untyped)
  RACK_MULTITHREAD = ::T.let(nil, ::T.untyped)
  RACK_RECURSIVE_INCLUDE = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_STRING = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_INPUT = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_VARS = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_RUNONCE = ::T.let(nil, ::T.untyped)
  RACK_SESSION = ::T.let(nil, ::T.untyped)
  RACK_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  RACK_SESSION_UNPACKED_COOKIE_DATA = ::T.let(nil, ::T.untyped)
  RACK_SHOWSTATUS_DETAIL = ::T.let(nil, ::T.untyped)
  RACK_TEMPFILES = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  RACK_VERSION = ::T.let(nil, ::T.untyped)
  RELEASE = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  SCRIPT_NAME = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
  TRACE = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  UNLINK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::AbstractRequest
  AUTHORIZATION_KEYS = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::MD5
  QOP = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::Params
  UNQUOTED = ::T.let(nil, ::T.untyped)
end

class Rack::Builder
  UTF_8_BOM = ::T.let(nil, ::T.untyped)
end

class Rack::Cascade
  NotFound = ::T.let(nil, ::T.untyped)
end

class Rack::Chunked::Body
  TAIL = ::T.let(nil, ::T.untyped)
  TERM = ::T.let(nil, ::T.untyped)
end

class Rack::CommonLogger
  FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::Directory
  DIR_FILE = ::T.let(nil, ::T.untyped)
  DIR_PAGE_FOOTER = ::T.let(nil, ::T.untyped)
  DIR_PAGE_HEADER = ::T.let(nil, ::T.untyped)
  FILESIZE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::ETag
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  ETAG_STRING = ::T.let(nil, ::T.untyped)
end

Rack::File = Rack::Files

class Rack::Files
  ALLOWED_VERBS = ::T.let(nil, ::T.untyped)
  ALLOW_HEADER = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
end

class Rack::Handler::CGI
end

class Rack::Handler::CGI
  def self.run(app, **options); end

  def self.send_body(body); end

  def self.send_headers(status, headers); end

  def self.serve(app); end
end

class Rack::Handler::WEBrick
  def initialize(server, app); end
end

class Rack::Handler::WEBrick
  def self.run(app, **options); end

  def self.shutdown(); end

  def self.valid_options(); end
end

class Rack::Lint::HijackWrapper
  REQUIRED_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::MediaType
  SPLIT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Rack::MethodOverride
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_OVERRIDE_HEADER = ::T.let(nil, ::T.untyped)
  METHOD_OVERRIDE_PARAM_KEY = ::T.let(nil, ::T.untyped)
end

module Rack::Mime
  MIME_TYPES = ::T.let(nil, ::T.untyped)
end

class Rack::MockRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

module Rack::Multipart
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_CHAR = ::T.let(nil, ::T.untyped)
  BROKEN_QUOTED = ::T.let(nil, ::T.untyped)
  BROKEN_UNQUOTED = ::T.let(nil, ::T.untyped)
  CONDISP = ::T.let(nil, ::T.untyped)
  DISPPARM = ::T.let(nil, ::T.untyped)
  EOL = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_PARAMETER = ::T.let(nil, ::T.untyped)
  MULTIPART = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_DISPOSITION = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_ID = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER_NAME = ::T.let(nil, ::T.untyped)
  RFC2183 = ::T.let(nil, ::T.untyped)
  SECTION = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
  VALUE = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Generator
  def dump(); end

  def initialize(params, first=T.unsafe(nil)); end
end

class Rack::Multipart::Generator
end

class Rack::Multipart::Parser
  BOUNDARY_REGEX = ::T.let(nil, ::T.untyped)
  BUFSIZE = ::T.let(nil, ::T.untyped)
  CHARSET = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  TEXT_PLAIN = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::UploadedFile
  def content_type(); end

  def content_type=(content_type); end

  def initialize(filepath=T.unsafe(nil), ct=T.unsafe(nil), bin=T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  def local_path(); end

  def method_missing(method_name, *args, &block); end

  def original_filename(); end

  def path(); end

  def respond_to?(*args); end
end

class Rack::Multipart::UploadedFile
end

class Rack::QueryParser
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Rack::Request
  def query(); end

  def version_supplied(); end

  def version_supplied=(version_supplied); end
  ALLOWED_SCHEMES = ::T.let(nil, ::T.untyped)
  SCHEME_WHITELIST = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Helpers
  DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
  FORM_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_HOST = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PORT = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  PARSEABLE_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
end

class Rack::Response
  CHUNKED = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Rack::Runtime
  FORMAT_STRING = ::T.let(nil, ::T.untyped)
  HEADER_NAME = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::Persisted
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::SessionHash
  Unspecified = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Pool
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::SessionId
  ID_VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::ShowExceptions
  CONTEXT = ::T.let(nil, ::T.untyped)
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowStatus
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

module Rack::Test
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Test::CookieJar
  DELIMITER = ::T.let(nil, ::T.untyped)
end

module Rack::Test::Methods
  METHODS = ::T.let(nil, ::T.untyped)
end

module Rack::Utils
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML_PATTERN = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  NULL_BYTE = ::T.let(nil, ::T.untyped)
  PATH_SEPS = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
  SYMBOL_TO_STATUS_CODE = ::T.let(nil, ::T.untyped)
end

Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

class Rails::BacktraceCleaner
  APP_DIRS_PATTERN = ::T.let(nil, ::T.untyped)
  DOT_SLASH = ::T.let(nil, ::T.untyped)
  EMPTY_STRING = ::T.let(nil, ::T.untyped)
  RENDER_TEMPLATE_PATTERN = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
end

module Rails::Controller::Testing
  VERSION = ::T.let(nil, ::T.untyped)
end

module Rails::Controller::Testing::TemplateAssertions
  RENDER_TEMPLATE_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module Rails::Generators
  RAILS_DEV_PATH = ::T.let(nil, ::T.untyped)
end

class Rails::Generators::AppGenerator
  WEBPACKS = ::T.let(nil, ::T.untyped)
end

class Rails::Generators::NamedBase
  include ::Coffee::Rails::JsHook
end

class Rails::Generators::TestCase
  include ::FileUtils::StreamUtils_
end

module Rails::Html
  XPATHS_TO_REMOVE = ::T.let(nil, ::T.untyped)
end

class Rails::Html::Sanitizer
  VERSION = ::T.let(nil, ::T.untyped)
end

Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

module RailsI18n::Pluralization::EastSlavic
  FROM_11_TO_14 = ::T.let(nil, ::T.untyped)
  FROM_12_TO_14 = ::T.let(nil, ::T.untyped)
  FROM_2_TO_4 = ::T.let(nil, ::T.untyped)
  FROM_5_TO_9 = ::T.let(nil, ::T.untyped)
end

module Rake::Cloneable
end

module Rake::Cloneable
end

module Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module Rake::DSL
end

module Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  def cd(*args, **options, &block); end

  def chdir(*args, **options, &block); end

  def chmod(*args, **options, &block); end

  def chmod_R(*args, **options, &block); end

  def chown(*args, **options, &block); end

  def chown_R(*args, **options, &block); end

  def copy(*args, **options, &block); end

  def cp(*args, **options, &block); end

  def cp_lr(*args, **options, &block); end

  def cp_r(*args, **options, &block); end

  def install(*args, **options, &block); end

  def link(*args, **options, &block); end

  def ln(*args, **options, &block); end

  def ln_s(*args, **options, &block); end

  def ln_sf(*args, **options, &block); end

  def makedirs(*args, **options, &block); end

  def mkdir(*args, **options, &block); end

  def mkdir_p(*args, **options, &block); end

  def mkpath(*args, **options, &block); end

  def move(*args, **options, &block); end

  def mv(*args, **options, &block); end

  def nowrite(value=T.unsafe(nil)); end

  def rake_check_options(options, *optdecl); end

  def rake_output_message(message); end

  def remove(*args, **options, &block); end

  def rm(*args, **options, &block); end

  def rm_f(*args, **options, &block); end

  def rm_r(*args, **options, &block); end

  def rm_rf(*args, **options, &block); end

  def rmdir(*args, **options, &block); end

  def rmtree(*args, **options, &block); end

  def safe_unlink(*args, **options, &block); end

  def symlink(*args, **options, &block); end

  def touch(*args, **options, &block); end

  def verbose(value=T.unsafe(nil)); end

  def when_writing(msg=T.unsafe(nil)); end
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  extend ::Rake::FileUtilsExt
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  def self.nowrite_flag(); end

  def self.nowrite_flag=(nowrite_flag); end

  def self.verbose_flag(); end

  def self.verbose_flag=(verbose_flag); end
end

class Rake::TaskLib
  include ::Rake::Cloneable
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

class Rake::TaskLib
end

class Random
  def self.bytes(_); end
end

class Range
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::IncludeTimeWithZone
  include ::ActiveSupport::EachTimeWithZone
  def %(_); end

  def entries(); end

  def to_a(); end
end

module Ransack
  SUPPORTS_ATTRIBUTE_ALIAS = ::T.let(nil, ::T.untyped)
end

module Ransack::Constants
  AND = ::T.let(nil, ::T.untyped)
  AND_OR = ::T.let(nil, ::T.untyped)
  AREL_PREDICATES = ::T.let(nil, ::T.untyped)
  ASSOCIATION_JOIN = ::T.let(nil, ::T.untyped)
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  A_S_I = ::T.let(nil, ::T.untyped)
  BOOLEAN_VALUES = ::T.let(nil, ::T.untyped)
  CAP_SEARCH = ::T.let(nil, ::T.untyped)
  COMBINATOR = ::T.let(nil, ::T.untyped)
  CONT = ::T.let(nil, ::T.untyped)
  DERIVED_PREDICATES = ::T.let(nil, ::T.untyped)
  DISTINCT = ::T.let(nil, ::T.untyped)
  DOT_ASTERIX = ::T.let(nil, ::T.untyped)
  EQ = ::T.let(nil, ::T.untyped)
  EQ_ANY = ::T.let(nil, ::T.untyped)
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
  I = ::T.let(nil, ::T.untyped)
  IN_NOT_IN = ::T.let(nil, ::T.untyped)
  JOIN_NODE = ::T.let(nil, ::T.untyped)
  LEFT_PARENTHESIS = ::T.let(nil, ::T.untyped)
  NOT_EQ = ::T.let(nil, ::T.untyped)
  NOT_EQ_ALL = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  Q = ::T.let(nil, ::T.untyped)
  RAILS_6_0 = ::T.let(nil, ::T.untyped)
  RAILS_6_1_ALPHA = ::T.let(nil, ::T.untyped)
  RANSACK_SLASH_SEARCHES = ::T.let(nil, ::T.untyped)
  RANSACK_SLASH_SEARCHES_SLASH_SEARCH = ::T.let(nil, ::T.untyped)
  SEARCH = ::T.let(nil, ::T.untyped)
  SEARCHES = ::T.let(nil, ::T.untyped)
  STASHED_JOIN = ::T.let(nil, ::T.untyped)
  STRING_JOIN = ::T.let(nil, ::T.untyped)
  SUFFIXES = ::T.let(nil, ::T.untyped)
  TRUE_VALUES = ::T.let(nil, ::T.untyped)
  TWO_COLONS = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
end

class Ransack::Visitor
  DISPATCH = ::T.let(nil, ::T.untyped)
end

module RbConfig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.fire_update!(key, val, mkconf=T.unsafe(nil), conf=T.unsafe(nil)); end

  def self.ruby(); end
end

class Regexp
  TOKEN_KEYS = ::T.let(nil, ::T.untyped)
end

Regexp::Expression::Alternation::OPERAND = Regexp::Expression::Alternative

Regexp::Expression::Anchor::BOL = Regexp::Expression::Anchor::BeginningOfLine

Regexp::Expression::Anchor::BOS = Regexp::Expression::Anchor::BeginningOfString

Regexp::Expression::Anchor::EOL = Regexp::Expression::Anchor::EndOfLine

Regexp::Expression::Anchor::EOS = Regexp::Expression::Anchor::EndOfString

Regexp::Expression::Anchor::EOSobEOL = Regexp::Expression::Anchor::EndOfStringOrBeforeEndOfLine

Regexp::Expression::CharacterSet::Intersection::OPERAND = Regexp::Expression::CharacterSet::IntersectedSequence

Regexp::Expression::MatchLength = Regexp::MatchLength

class Regexp::Expression::Quantifier
  MODES = ::T.let(nil, ::T.untyped)
end

class Regexp::Lexer
  CLOSING_TOKENS = ::T.let(nil, ::T.untyped)
  OPENING_TOKENS = ::T.let(nil, ::T.untyped)
end

class Regexp::Parser
  ENC_FLAGS = ::T.let(nil, ::T.untyped)
  MOD_FLAGS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Regexp::Scanner
  PROP_MAPS_DIR = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax
  VERSION_CONST_REGEXP = ::T.let(nil, ::T.untyped)
  VERSION_FORMAT = ::T.let(nil, ::T.untyped)
  VERSION_REGEXP = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token
  All = ::T.let(nil, ::T.untyped)
  Map = ::T.let(nil, ::T.untyped)
  Types = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Anchor
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  MatchStart = ::T.let(nil, ::T.untyped)
  String = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Assertion
  All = ::T.let(nil, ::T.untyped)
  Lookahead = ::T.let(nil, ::T.untyped)
  Lookbehind = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Backreference
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  RecursionLevel = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterSet
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterType
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Clustered = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Conditional
  All = ::T.let(nil, ::T.untyped)
  Condition = ::T.let(nil, ::T.untyped)
  Delimiters = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Escape
  ASCII = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Control = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Meta = ::T.let(nil, ::T.untyped)
  Octal = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  Unicode = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::FreeSpace
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Group
  All = ::T.let(nil, ::T.untyped)
  Atomic = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Comment = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Named = ::T.let(nil, ::T.untyped)
  Passive = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  V1_8_6 = ::T.let(nil, ::T.untyped)
  V2_4_1 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Keep
  All = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Literal
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Meta
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::PosixClass
  All = ::T.let(nil, ::T.untyped)
  Extensions = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  Standard = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Quantifier
  All = ::T.let(nil, ::T.untyped)
  Greedy = ::T.let(nil, ::T.untyped)
  Interval = ::T.let(nil, ::T.untyped)
  IntervalAll = ::T.let(nil, ::T.untyped)
  IntervalPossessive = ::T.let(nil, ::T.untyped)
  IntervalReluctant = ::T.let(nil, ::T.untyped)
  Possessive = ::T.let(nil, ::T.untyped)
  Reluctant = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::SubexpressionCall
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty
  Age = ::T.let(nil, ::T.untyped)
  Age_V1_9_3 = ::T.let(nil, ::T.untyped)
  Age_V2_0_0 = ::T.let(nil, ::T.untyped)
  Age_V2_2_0 = ::T.let(nil, ::T.untyped)
  Age_V2_3_0 = ::T.let(nil, ::T.untyped)
  Age_V2_4_0 = ::T.let(nil, ::T.untyped)
  Age_V2_5_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_2 = ::T.let(nil, ::T.untyped)
  Age_V2_6_3 = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  CharType_V1_9_0 = ::T.let(nil, ::T.untyped)
  CharType_V2_5_0 = ::T.let(nil, ::T.untyped)
  Derived = ::T.let(nil, ::T.untyped)
  Derived_V1_9_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_0_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_4_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_5_0 = ::T.let(nil, ::T.untyped)
  Emoji = ::T.let(nil, ::T.untyped)
  Emoji_V2_5_0 = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  POSIX = ::T.let(nil, ::T.untyped)
  Script = ::T.let(nil, ::T.untyped)
  Script_V1_9_0 = ::T.let(nil, ::T.untyped)
  Script_V1_9_3 = ::T.let(nil, ::T.untyped)
  Script_V2_0_0 = ::T.let(nil, ::T.untyped)
  Script_V2_2_0 = ::T.let(nil, ::T.untyped)
  Script_V2_3_0 = ::T.let(nil, ::T.untyped)
  Script_V2_4_0 = ::T.let(nil, ::T.untyped)
  Script_V2_5_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_2 = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  UnicodeBlock = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V1_9_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_0_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_2_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_3_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_4_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_5_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_2 = ::T.let(nil, ::T.untyped)
  V1_9_0 = ::T.let(nil, ::T.untyped)
  V1_9_3 = ::T.let(nil, ::T.untyped)
  V2_0_0 = ::T.let(nil, ::T.untyped)
  V2_2_0 = ::T.let(nil, ::T.untyped)
  V2_3_0 = ::T.let(nil, ::T.untyped)
  V2_4_0 = ::T.let(nil, ::T.untyped)
  V2_5_0 = ::T.let(nil, ::T.untyped)
  V2_6_0 = ::T.let(nil, ::T.untyped)
  V2_6_2 = ::T.let(nil, ::T.untyped)
  V2_6_3 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty::Category
  All = ::T.let(nil, ::T.untyped)
  Codepoint = ::T.let(nil, ::T.untyped)
  Letter = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  Punctuation = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Symbol = ::T.let(nil, ::T.untyped)
end

class RemoveCodeFromSpreePromotions::Promotion
  include ::RemoveCodeFromSpreePromotions::Promotion::GeneratedAttributeMethods
  include ::RemoveCodeFromSpreePromotions::Promotion::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class RemoveCodeFromSpreePromotions::Promotion::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveCodeFromSpreePromotions::Promotion::GeneratedRelationMethods
end

class RemoveCodeFromSpreePromotions::Promotion::ActiveRecord_AssociationRelation
end

class RemoveCodeFromSpreePromotions::Promotion::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveCodeFromSpreePromotions::Promotion::GeneratedRelationMethods
end

class RemoveCodeFromSpreePromotions::Promotion::ActiveRecord_Associations_CollectionProxy
end

class RemoveCodeFromSpreePromotions::Promotion::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveCodeFromSpreePromotions::Promotion::GeneratedRelationMethods
end

class RemoveCodeFromSpreePromotions::Promotion::ActiveRecord_Relation
end

module RemoveCodeFromSpreePromotions::Promotion::GeneratedAssociationMethods
end

module RemoveCodeFromSpreePromotions::Promotion::GeneratedAssociationMethods
end

module RemoveCodeFromSpreePromotions::Promotion::GeneratedAttributeMethods
end

module RemoveCodeFromSpreePromotions::Promotion::GeneratedAttributeMethods
  extend ::Mutex_m
end

module RemoveCodeFromSpreePromotions::Promotion::GeneratedRelationMethods
end

module RemoveCodeFromSpreePromotions::Promotion::GeneratedRelationMethods
  extend ::Mutex_m
end

class RemoveCodeFromSpreePromotions::Promotion
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class RemoveOrderIdFromInventoryUnits::InventoryUnit
  include ::RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedAttributeMethods
  include ::RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  def autosave_associated_records_for_shipment(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class RemoveOrderIdFromInventoryUnits::InventoryUnit::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedRelationMethods
end

class RemoveOrderIdFromInventoryUnits::InventoryUnit::ActiveRecord_AssociationRelation
end

class RemoveOrderIdFromInventoryUnits::InventoryUnit::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedRelationMethods
end

class RemoveOrderIdFromInventoryUnits::InventoryUnit::ActiveRecord_Associations_CollectionProxy
end

class RemoveOrderIdFromInventoryUnits::InventoryUnit::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedRelationMethods
end

class RemoveOrderIdFromInventoryUnits::InventoryUnit::ActiveRecord_Relation
end

module RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedAssociationMethods
  def build_shipment(*args, &block); end

  def create_shipment(*args, &block); end

  def create_shipment!(*args, &block); end

  def reload_shipment(); end

  def shipment(); end

  def shipment=(value); end
end

module RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedAssociationMethods
end

module RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedAttributeMethods
end

module RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedAttributeMethods
  extend ::Mutex_m
end

module RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedRelationMethods
end

module RemoveOrderIdFromInventoryUnits::InventoryUnit::GeneratedRelationMethods
  extend ::Mutex_m
end

class RemoveOrderIdFromInventoryUnits::InventoryUnit
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class RemoveOrderIdFromInventoryUnits::Shipment
  include ::RemoveOrderIdFromInventoryUnits::Shipment::GeneratedAttributeMethods
  include ::RemoveOrderIdFromInventoryUnits::Shipment::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  def after_add_for_inventory_units(); end

  def after_add_for_inventory_units=(val); end

  def after_add_for_inventory_units?(); end

  def after_remove_for_inventory_units(); end

  def after_remove_for_inventory_units=(val); end

  def after_remove_for_inventory_units?(); end

  def autosave_associated_records_for_inventory_units(*args); end

  def before_add_for_inventory_units(); end

  def before_add_for_inventory_units=(val); end

  def before_add_for_inventory_units?(); end

  def before_remove_for_inventory_units(); end

  def before_remove_for_inventory_units=(val); end

  def before_remove_for_inventory_units?(); end

  def validate_associated_records_for_inventory_units(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class RemoveOrderIdFromInventoryUnits::Shipment::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveOrderIdFromInventoryUnits::Shipment::GeneratedRelationMethods
end

class RemoveOrderIdFromInventoryUnits::Shipment::ActiveRecord_AssociationRelation
end

class RemoveOrderIdFromInventoryUnits::Shipment::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveOrderIdFromInventoryUnits::Shipment::GeneratedRelationMethods
end

class RemoveOrderIdFromInventoryUnits::Shipment::ActiveRecord_Associations_CollectionProxy
end

class RemoveOrderIdFromInventoryUnits::Shipment::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RemoveOrderIdFromInventoryUnits::Shipment::GeneratedRelationMethods
end

class RemoveOrderIdFromInventoryUnits::Shipment::ActiveRecord_Relation
end

module RemoveOrderIdFromInventoryUnits::Shipment::GeneratedAssociationMethods
  def inventory_unit_ids(); end

  def inventory_unit_ids=(ids); end

  def inventory_units(); end

  def inventory_units=(value); end
end

module RemoveOrderIdFromInventoryUnits::Shipment::GeneratedAssociationMethods
end

module RemoveOrderIdFromInventoryUnits::Shipment::GeneratedAttributeMethods
end

module RemoveOrderIdFromInventoryUnits::Shipment::GeneratedAttributeMethods
  extend ::Mutex_m
end

module RemoveOrderIdFromInventoryUnits::Shipment::GeneratedRelationMethods
end

module RemoveOrderIdFromInventoryUnits::Shipment::GeneratedRelationMethods
  extend ::Mutex_m
end

class RemoveOrderIdFromInventoryUnits::Shipment
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.after_add_for_inventory_units(); end

  def self.after_add_for_inventory_units=(val); end

  def self.after_add_for_inventory_units?(); end

  def self.after_remove_for_inventory_units(); end

  def self.after_remove_for_inventory_units=(val); end

  def self.after_remove_for_inventory_units?(); end

  def self.before_add_for_inventory_units(); end

  def self.before_add_for_inventory_units=(val); end

  def self.before_add_for_inventory_units?(); end

  def self.before_remove_for_inventory_units(); end

  def self.before_remove_for_inventory_units=(val); end

  def self.before_remove_for_inventory_units?(); end

  def self.page(num=T.unsafe(nil)); end
end

class Resolv::DNS
  def extract_resources(msg, name, typeclass); end
  RequestID = ::T.let(nil, ::T.untyped)
  RequestIDMutex = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Config
  def initialize(config_info=T.unsafe(nil)); end
end

class Resolv::DNS::Label::Str
  def initialize(string); end
end

class Resolv::DNS::Message
  def initialize(id=T.unsafe(nil)); end
end

class Resolv::DNS::Message::MessageDecoder
  def initialize(data); end
end

class Resolv::DNS::Requester::ConnectedUDP
  def initialize(host, port=T.unsafe(nil)); end

  def lazy_initialize(); end
end

class Resolv::DNS::Requester::Sender
  def initialize(msg, data, sock); end
end

class Resolv::DNS::Requester::TCP
  def initialize(host, port=T.unsafe(nil)); end
end

class Resolv::DNS::Requester::UnconnectedUDP
  def initialize(*nameserver_port); end

  def lazy_initialize(); end
end

class Resolv::DNS::Requester::UnconnectedUDP::Sender
  def initialize(msg, data, sock, host, port); end
end

class Resolv::DNS::Resource
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::LOC
  def initialize(version, ssize, hprecision, vprecision, latitude, longitude, altitude); end
end

class Resolv::DNS
  def self.allocate_request_id(host, port); end

  def self.bind_random_port(udpsock, bind_host=T.unsafe(nil)); end

  def self.free_request_id(host, port, id); end

  def self.random(arg); end
end

class Ripper
  def column(); end

  def encoding(); end

  def end_seen?(); end

  def error?(); end

  def filename(); end

  def initialize(*_); end

  def lineno(); end

  def parse(); end

  def state(); end

  def yydebug(); end

  def yydebug=(yydebug); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  PARSER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  SCANNER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Ripper::Filter
  def initialize(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end
end

class Ripper::Lexer
  def lex(); end

  def tokenize(); end
end

class Ripper::Lexer::Elem
  def event(); end

  def event=(_); end

  def initialize(pos, event, tok, state); end

  def pos(); end

  def pos=(_); end

  def state(); end

  def state=(_); end

  def tok(); end

  def tok=(_); end
end

class Ripper::Lexer::Elem
  def self.[](*_); end

  def self.members(); end
end

class Ripper::Lexer::State
  def &(i); end

  def ==(i); end

  def allbits?(i); end

  def anybits?(i); end

  def initialize(i); end

  def nobits?(i); end

  def to_i(); end

  def to_int(); end

  def to_int=(_); end

  def to_s=(_); end

  def |(i); end
end

class Ripper::Lexer::State
  def self.[](*_); end

  def self.members(); end
end

class Ripper::Lexer
end

class Ripper::SexpBuilder
  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(*args); end

  def on_args_add_block(*args); end

  def on_args_add_star(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_end(tok); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(*args); end

  def on_method_add_block(*args); end

  def on_mlhs_add(*args); end

  def on_mlhs_add_post(*args); end

  def on_mlhs_add_star(*args); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(*args); end

  def on_mrhs_add_star(*args); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_parse_error(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(*args); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(*args); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(*args); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(*args); end

  def on_stmts_new(*args); end

  def on_string_add(*args); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(*args); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(*args); end

  def on_word_new(*args); end

  def on_words_add(*args); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(*args); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class Ripper::SexpBuilder
end

class Ripper::SexpBuilderPP
end

class Ripper::SexpBuilderPP
end

class Ripper::TokenPattern
  def initialize(pattern); end

  def match(str); end

  def match_list(tokens); end
  MAP = ::T.let(nil, ::T.untyped)
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::MatchData
  def initialize(tokens, match); end

  def string(n=T.unsafe(nil)); end
end

class Ripper::TokenPattern::MatchData
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern
  def self.compile(*_); end
end

class Ripper
  def self.dedent_string(_, _1); end

  def self.lex_state_name(_); end

  def self.token_match(src, pattern); end
end

RspecJunitFormatter = RSpecJUnitFormatter

class RuboCop::AST::ArrayNode
  PERCENT_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::BlockNode
  VOID_CONTEXT_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::Builder
  NODE_MAP = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::CollectionNode
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::KeywordSplatNode
  DOUBLE_SPLAT = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::MethodDispatchNode
  ARITHMETIC_OPERATORS = ::T.let(nil, ::T.untyped)
  SPECIAL_MODIFIERS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::MethodIdentifierPredicates
  ENUMERATOR_METHODS = ::T.let(nil, ::T.untyped)
  OPERATOR_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::Node
  ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  BASIC_CONDITIONALS = ::T.let(nil, ::T.untyped)
  BASIC_LITERALS = ::T.let(nil, ::T.untyped)
  COMPARISON_OPERATORS = ::T.let(nil, ::T.untyped)
  COMPOSITE_LITERALS = ::T.let(nil, ::T.untyped)
  CONDITIONALS = ::T.let(nil, ::T.untyped)
  EQUALS_ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  FALSEY_LITERALS = ::T.let(nil, ::T.untyped)
  IMMUTABLE_LITERALS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  LITERALS = ::T.let(nil, ::T.untyped)
  MUTABLE_LITERALS = ::T.let(nil, ::T.untyped)
  OPERATOR_KEYWORDS = ::T.let(nil, ::T.untyped)
  REFERENCES = ::T.let(nil, ::T.untyped)
  SHORTHAND_ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  SPECIAL_KEYWORDS = ::T.let(nil, ::T.untyped)
  TRUTHY_LITERALS = ::T.let(nil, ::T.untyped)
  VARIABLES = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::NumericNode
  SIGN_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::PairNode
  COLON = ::T.let(nil, ::T.untyped)
  HASH_ROCKET = ::T.let(nil, ::T.untyped)
  SPACED_COLON = ::T.let(nil, ::T.untyped)
  SPACED_HASH_ROCKET = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::PredicateOperatorNode
  LOGICAL_AND = ::T.let(nil, ::T.untyped)
  LOGICAL_OR = ::T.let(nil, ::T.untyped)
  SEMANTIC_AND = ::T.let(nil, ::T.untyped)
  SEMANTIC_OR = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::RegexpNode
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::Traversal
  MANY_CHILD_NODES = ::T.let(nil, ::T.untyped)
  NO_CHILD_NODES = ::T.let(nil, ::T.untyped)
  ONE_CHILD_NODE = ::T.let(nil, ::T.untyped)
  SECOND_CHILD_ONLY = ::T.let(nil, ::T.untyped)
end

class RuboCop::CLI
  PHASE_1 = ::T.let(nil, ::T.untyped)
  PHASE_1_DISABLED = ::T.let(nil, ::T.untyped)
  PHASE_1_OVERRIDDEN = ::T.let(nil, ::T.untyped)
  PHASE_2 = ::T.let(nil, ::T.untyped)
  STATUS_ERROR = ::T.let(nil, ::T.untyped)
  STATUS_INTERRUPTED = ::T.let(nil, ::T.untyped)
  STATUS_OFFENSES = ::T.let(nil, ::T.untyped)
  STATUS_SUCCESS = ::T.let(nil, ::T.untyped)
end

class RuboCop::CommentConfig
  COMMENT_DIRECTIVE_REGEXP = ::T.let(nil, ::T.untyped)
  COPS_PATTERN = ::T.let(nil, ::T.untyped)
  COP_NAMES_PATTERN = ::T.let(nil, ::T.untyped)
  COP_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  UNNEEDED_DISABLE = ::T.let(nil, ::T.untyped)
end

class RuboCop::ConfigLoader
  AUTO_GENERATED_FILE = ::T.let(nil, ::T.untyped)
  DEFAULT_FILE = ::T.let(nil, ::T.untyped)
  DOTFILE = ::T.let(nil, ::T.untyped)
  RUBOCOP_HOME = ::T.let(nil, ::T.untyped)
  XDG_CONFIG = ::T.let(nil, ::T.untyped)
end

class RuboCop::ConfigLoader
  extend ::RuboCop::FileFinder
end

class RuboCop::ConfigObsoletion
  MOVED_COPS = ::T.let(nil, ::T.untyped)
  OBSOLETE_COPS = ::T.let(nil, ::T.untyped)
  OBSOLETE_ENFORCED_STYLES = ::T.let(nil, ::T.untyped)
  OBSOLETE_PARAMETERS = ::T.let(nil, ::T.untyped)
  REMOVED_COPS = ::T.let(nil, ::T.untyped)
  REMOVED_COPS_WITH_REASON = ::T.let(nil, ::T.untyped)
  RENAMED_COPS = ::T.let(nil, ::T.untyped)
  SPLIT_COPS = ::T.let(nil, ::T.untyped)
end

class RuboCop::ConfigValidator
  COMMON_PARAMS = ::T.let(nil, ::T.untyped)
  DEFAULT_RUBY_VERSION = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
  KNOWN_RUBIES = ::T.let(nil, ::T.untyped)
  OBSOLETE_RUBIES = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_FILENAME = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Alignment
  SPACE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::AmbiguousCopName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Badge::InvalidBadge
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Bundler::DuplicatedGem
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Bundler::GemComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Bundler::InsecureProtocolSource
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Bundler::OrderedGems
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::ConfigurableNaming
  FORMATS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::ConfigurableNumbering
  FORMATS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::DefNode
  NON_PUBLIC_MODIFIERS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::EachToForCorrector
  CORRECTION_WITHOUT_ARGUMENTS = ::T.let(nil, ::T.untyped)
  CORRECTION_WITH_ARGUMENTS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::EndKeywordAlignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::ForToEachCorrector
  CORRECTION = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::FrozenStringLiteral
  FROZEN_STRING_LITERAL = ::T.let(nil, ::T.untyped)
  FROZEN_STRING_LITERAL_ENABLED = ::T.let(nil, ::T.untyped)
  FROZEN_STRING_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Gemspec::DuplicatedAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Gemspec::OrderedDependencies
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Gemspec::RequiredRubyVersion
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Gemspec::RubyVersionGlobalsUsage
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Generator
  CONFIGURATION_ADDED_MESSAGE = ::T.let(nil, ::T.untyped)
  SOURCE_TEMPLATE = ::T.let(nil, ::T.untyped)
  SPEC_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Generator::ConfigurationInjector
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Generator::RequireFileInjector
  REQUIRE_PATH = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Heredoc
  OPENING_DELIMITER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AccessModifierIndentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AlignArguments
  ALIGN_PARAMS_MSG = ::T.let(nil, ::T.untyped)
  FIXED_INDENT_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AlignArray
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AlignHash
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::AlignParameters
  ALIGN_PARAMS_MSG = ::T.let(nil, ::T.untyped)
  FIXED_INDENT_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::BlockAlignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::BlockEndNewline
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::CaseIndentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ClassStructure
  HUMANIZED_NODE_TYPE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  VISIBILITY_SCOPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ClosingHeredocIndentation
  MSG = ::T.let(nil, ::T.untyped)
  MSG_ARG = ::T.let(nil, ::T.untyped)
  SIMPLE_HEREDOC = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ClosingParenthesisIndentation
  MSG_ALIGN = ::T.let(nil, ::T.untyped)
  MSG_INDENT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::CommentIndentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ConditionPosition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::DefEndAlignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ElseAlignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLineAfterGuardClause
  END_OF_HEREDOC_LINE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLineAfterMagicComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLineBetweenDefs
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLines
  LINE_OFFSET = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier
  MSG_AFTER = ::T.let(nil, ::T.untyped)
  MSG_AFTER_FOR_ONLY_BEFORE = ::T.let(nil, ::T.untyped)
  MSG_BEFORE_AND_AFTER = ::T.let(nil, ::T.untyped)
  MSG_BEFORE_FOR_ONLY_BEFORE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundArguments
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundBeginBody
  KIND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundBlockBody
  KIND = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Layout::EmptyLinesAroundBody
  MSG_DEFERRED = ::T.let(nil, ::T.untyped)
  MSG_EXTRA = ::T.let(nil, ::T.untyped)
  MSG_MISSING = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundClassBody
  KIND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundMethodBody
  KIND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EmptyLinesAroundModuleBody
  KIND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::EndOfLine
  MSG_DETECTED = ::T.let(nil, ::T.untyped)
  MSG_MISSING = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::ExtraSpacing
  MSG_UNALIGNED_ASGN = ::T.let(nil, ::T.untyped)
  MSG_UNNECESSARY = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::FirstArrayElementLineBreak
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::FirstHashElementLineBreak
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::FirstMethodArgumentLineBreak
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::FirstMethodParameterLineBreak
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::HeredocArgumentClosingParenthesis
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentFirstArgument
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentFirstArrayElement
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentFirstHashElement
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentFirstParameter
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentHeredoc
  LIBRARY_MSG = ::T.let(nil, ::T.untyped)
  RUBY23_TYPE_MSG = ::T.let(nil, ::T.untyped)
  RUBY23_WIDTH_MSG = ::T.let(nil, ::T.untyped)
  STRIP_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentationConsistency
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::IndentationWidth
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::InitialIndentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::LeadingBlankLines
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::LeadingCommentSpace
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineArrayBraceLayout
  ALWAYS_NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  ALWAYS_SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineArrayLineBreaks
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineAssignmentLayout
  NEW_LINE_OFFENSE = ::T.let(nil, ::T.untyped)
  SAME_LINE_OFFENSE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineBlockLayout
  ARG_MSG = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  PIPE_SIZE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineHashBraceLayout
  ALWAYS_NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  ALWAYS_SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineHashKeyLineBreaks
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineMethodArgumentLineBreaks
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineMethodCallBraceLayout
  ALWAYS_NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  ALWAYS_SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout
  ALWAYS_NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  ALWAYS_SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  NEW_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
  SAME_LINE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::RescueEnsureAlignment
  ALTERNATIVE_ACCESS_MODIFIERS = ::T.let(nil, ::T.untyped)
  ANCESTOR_TYPES = ::T.let(nil, ::T.untyped)
  ANCESTOR_TYPES_WITH_ACCESS_MODIFIERS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  RUBY_2_5_ANCESTOR_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAfterColon
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAfterMethodName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAfterNot
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAroundKeyword
  ACCEPT_LEFT_PAREN = ::T.let(nil, ::T.untyped)
  ACCEPT_LEFT_SQUARE_BRACKET = ::T.let(nil, ::T.untyped)
  DO = ::T.let(nil, ::T.untyped)
  MSG_AFTER = ::T.let(nil, ::T.untyped)
  MSG_BEFORE = ::T.let(nil, ::T.untyped)
  SAFE_NAVIGATION = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceAroundOperators
  EXCESSIVE_SPACE = ::T.let(nil, ::T.untyped)
  IRREGULAR_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceBeforeBlockBraces
  DETECTED_MSG = ::T.let(nil, ::T.untyped)
  MISSING_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceBeforeComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceBeforeFirstArg
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInLambdaLiteral
  MSG_REQUIRE_NO_SPACE = ::T.let(nil, ::T.untyped)
  MSG_REQUIRE_SPACE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideArrayLiteralBrackets
  EMPTY_MSG = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral
  MSG = ::T.let(nil, ::T.untyped)
  MULTIPLE_SPACES_BETWEEN_ITEMS_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideParens
  MSG = ::T.let(nil, ::T.untyped)
  MSG_SPACE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters
  BEGIN_REGEX = ::T.let(nil, ::T.untyped)
  END_REGEX = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideRangeLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideReferenceBrackets
  BRACKET_METHODS = ::T.let(nil, ::T.untyped)
  EMPTY_MSG = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::SpaceInsideStringInterpolation
  NO_SPACE_MSG = ::T.let(nil, ::T.untyped)
  SPACE_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::Tab
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Layout::TrailingWhitespace
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::AmbiguousBlockAssociation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::AmbiguousOperator
  AMBIGUITIES = ::T.let(nil, ::T.untyped)
  MSG_FORMAT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::AmbiguousRegexpLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::AssignmentInCondition
  ASGN_TYPES = ::T.let(nil, ::T.untyped)
  MSG_WITHOUT_SAFE_ASSIGNMENT_ALLOWED = ::T.let(nil, ::T.untyped)
  MSG_WITH_SAFE_ASSIGNMENT_ALLOWED = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::BigDecimalNew
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::BooleanSymbol
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::CircularArgumentReference
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::Debugger
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DeprecatedClassMethods
  DEPRECATED_METHODS_OBJECT = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DisjunctiveAssignmentInConstructor
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DuplicateCaseCondition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DuplicateMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::DuplicatedKey
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EachWithObjectArgument
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ElseLayout
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EmptyEnsure
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EmptyExpression
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EmptyInterpolation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EmptyWhen
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EndInMethod
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::EnsureReturn
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ErbNewArguments
  MESSAGES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::FlipFlop
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::FloatOutOfRange
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::FormatParameterMismatch
  KERNEL = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  SHOVEL = ::T.let(nil, ::T.untyped)
  STRING_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::HandleExceptions
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::HeredocMethodCallPosition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ImplicitStringConcatenation
  FOR_ARRAY = ::T.let(nil, ::T.untyped)
  FOR_METHOD = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::IneffectiveAccessModifier
  ALTERNATIVE_PRIVATE = ::T.let(nil, ::T.untyped)
  ALTERNATIVE_PROTECTED = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::InheritException
  ILLEGAL_CLASSES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  PREFERRED_BASE_CLASS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::InterpolationCheck
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::LiteralAsCondition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::LiteralInInterpolation
  COMPOSITE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::Loop
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::MissingCopEnableDirective
  MSG = ::T.let(nil, ::T.untyped)
  MSG_BOUND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::MultipleCompare
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NestedMethodDefinition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NestedPercentLiteral
  MSG = ::T.let(nil, ::T.untyped)
  PERCENT_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
  REGEXES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NextWithoutAccumulator
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NonLocalExitFromIterator
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::NumberConversion
  CONVERSION_METHOD_CLASS_MAPPING = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::OrderedMagicComments
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ParenthesesAsGroupedExpression
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::PercentStringArray
  LEADING_QUOTE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  QUOTES_AND_COMMAS = ::T.let(nil, ::T.untyped)
  TRAILING_QUOTE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::PercentSymbolArray
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RandOne
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RedundantWithIndex
  MSG_EACH_WITH_INDEX = ::T.let(nil, ::T.untyped)
  MSG_WITH_INDEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RedundantWithObject
  MSG_EACH_WITH_OBJECT = ::T.let(nil, ::T.untyped)
  MSG_WITH_OBJECT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RegexpAsCondition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RequireParentheses
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RescueException
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::RescueType
  INVALID_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ReturnInVoidContext
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::SafeNavigationChain
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::SafeNavigationConsistency
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::SafeNavigationWithEmpty
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ScriptPermission
  MSG = ::T.let(nil, ::T.untyped)
  SHEBANG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::SendWithMixinArgument
  MIXIN_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ShadowedArgument
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ShadowedException
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ShadowingOuterLocalVariable
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::StringConversionInInterpolation
  MSG_DEFAULT = ::T.let(nil, ::T.untyped)
  MSG_SELF = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::Syntax
  ERROR_SOURCE_RANGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ToJSON
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnderscorePrefixedVariableName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnifiedInteger
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnneededCopDisableDirective
  COP_NAME = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnneededCopEnableDirective
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnneededRequireStatement
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnneededSplatExpansion
  ARRAY_PARAM_MSG = ::T.let(nil, ::T.untyped)
  ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  PERCENT_CAPITAL_I = ::T.let(nil, ::T.untyped)
  PERCENT_CAPITAL_W = ::T.let(nil, ::T.untyped)
  PERCENT_I = ::T.let(nil, ::T.untyped)
  PERCENT_W = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UnreachableCode
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UriEscapeUnescape
  ALTERNATE_METHODS_OF_URI_ESCAPE = ::T.let(nil, ::T.untyped)
  ALTERNATE_METHODS_OF_URI_UNESCAPE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UriRegexp
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessAccessModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessComparison
  MSG = ::T.let(nil, ::T.untyped)
  OPS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessElseWithoutRescue
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::UselessSetterCall
  ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::Void
  BINARY_OPERATORS = ::T.let(nil, ::T.untyped)
  DEFINED_MSG = ::T.let(nil, ::T.untyped)
  LIT_MSG = ::T.let(nil, ::T.untyped)
  NONMUTATING_METHODS = ::T.let(nil, ::T.untyped)
  NONMUTATING_MSG = ::T.let(nil, ::T.untyped)
  OPERATORS = ::T.let(nil, ::T.untyped)
  OP_MSG = ::T.let(nil, ::T.untyped)
  SELF_MSG = ::T.let(nil, ::T.untyped)
  UNARY_OPERATORS = ::T.let(nil, ::T.untyped)
  VAR_MSG = ::T.let(nil, ::T.untyped)
  VOID_CONTEXT_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::AbcSize
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::BlockLength
  LABEL = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::BlockNesting
  NESTING_BLOCKS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::CyclomaticComplexity
  COUNTED_NODES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::LineLength
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::MethodLength
  LABEL = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::ParameterLists
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::PerceivedComplexity
  COUNTED_NODES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::Utils::AbcSizeCalculator
  BRANCH_NODES = ::T.let(nil, ::T.untyped)
  CONDITION_NODES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Migration::DepartmentName
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::MultilineExpressionIndentation
  ASSIGNMENT_MESSAGE_TAIL = ::T.let(nil, ::T.untyped)
  DEFAULT_MESSAGE_TAIL = ::T.let(nil, ::T.untyped)
  KEYWORD_ANCESTOR_TYPES = ::T.let(nil, ::T.untyped)
  KEYWORD_MESSAGE_TAIL = ::T.let(nil, ::T.untyped)
  UNALIGNED_RHS_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::AccessorMethodName
  MSG_READER = ::T.let(nil, ::T.untyped)
  MSG_WRITER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::AsciiIdentifiers
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::BinaryOperatorParameterName
  BLACKLISTED = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  OP_LIKE_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::ClassAndModuleCamelCase
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::ConstantName
  MSG = ::T.let(nil, ::T.untyped)
  SNAKE_CASE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::FileName
  MSG_NO_DEFINITION = ::T.let(nil, ::T.untyped)
  MSG_REGEX = ::T.let(nil, ::T.untyped)
  MSG_SNAKE_CASE = ::T.let(nil, ::T.untyped)
  SNAKE_CASE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::HeredocDelimiterCase
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::HeredocDelimiterNaming
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::MemoizedInstanceVariableName
  MSG = ::T.let(nil, ::T.untyped)
  UNDERSCORE_REQUIRED = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::MethodName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::RescuedExceptionsVariableName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::VariableName
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::VariableNumber
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::NegativeConditional
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Offense
  COMPARISON_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::PreferredDelimiters
  PERCENT_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::RangeHelp
  BYTE_ORDER_MARK = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::Eval
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::JSONLoad
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::MarshalLoad
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::Open
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Security::YAMLLoad
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Severity
  CODE_TABLE = ::T.let(nil, ::T.untyped)
  NAMES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::SpaceAfterPunctuation
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::SpaceBeforePunctuation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AccessModifierDeclarations
  GROUP_STYLE_MESSAGE = ::T.let(nil, ::T.untyped)
  INLINE_STYLE_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Alias
  MSG_ALIAS = ::T.let(nil, ::T.untyped)
  MSG_ALIAS_METHOD = ::T.let(nil, ::T.untyped)
  MSG_SYMBOL_ARGS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AndOr
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ArrayJoin
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AsciiComments
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Attr
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AutoResourceCleanup
  MSG = ::T.let(nil, ::T.untyped)
  TARGET_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BarePercentLiterals
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BeginBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BlockComments
  BEGIN_LENGTH = ::T.let(nil, ::T.untyped)
  END_LENGTH = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BlockDelimiters
  ALWAYS_BRACES_MESSAGE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BracesAroundHashParameters
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CaseCorrector
  extend ::RuboCop::Cop::Style::ConditionalAssignmentHelper
  extend ::RuboCop::Cop::Style::ConditionalCorrectorHelper
end

class RuboCop::Cop::Style::CaseEquality
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CharacterLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ClassAndModuleChildren
  COMPACT_MSG = ::T.let(nil, ::T.untyped)
  NESTED_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ClassCheck
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ClassMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ClassVars
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CollectionMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ColonMethodCall
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ColonMethodDefinition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CommandLiteral
  MSG_USE_BACKTICKS = ::T.let(nil, ::T.untyped)
  MSG_USE_PERCENT_X = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CommentAnnotation
  MISSING_NOTE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::CommentedKeyword
  ALLOWED_COMMENTS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ConditionalAssignment
  ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  ASSIGN_TO_CONDITION_MSG = ::T.let(nil, ::T.untyped)
  ENABLED = ::T.let(nil, ::T.untyped)
  INDENTATION_WIDTH = ::T.let(nil, ::T.untyped)
  LINE_LENGTH = ::T.let(nil, ::T.untyped)
  MAX = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  SINGLE_LINE_CONDITIONS_ONLY = ::T.let(nil, ::T.untyped)
  VARIABLE_ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  WIDTH = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Style::ConditionalAssignmentHelper
  ALIGN_WITH = ::T.let(nil, ::T.untyped)
  END_ALIGNMENT = ::T.let(nil, ::T.untyped)
  EQUAL = ::T.let(nil, ::T.untyped)
  KEYWORD = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ConstantVisibility
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Copyright
  AUTOCORRECT_EMPTY_WARNING = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DateTime
  CLASS_MSG = ::T.let(nil, ::T.untyped)
  COERCION_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DefWithParentheses
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Dir
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Documentation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DocumentationMethod
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DoubleCopDisableDirective
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::DoubleNegation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EachForSimpleLoop
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EachWithObject
  METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyBlockParameter
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyCaseCondition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyElse
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyLambdaParameter
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyLiteral
  ARR_MSG = ::T.let(nil, ::T.untyped)
  HASH_MSG = ::T.let(nil, ::T.untyped)
  STR_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EmptyMethod
  MSG_COMPACT = ::T.let(nil, ::T.untyped)
  MSG_EXPANDED = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Encoding
  ENCODING_PATTERN = ::T.let(nil, ::T.untyped)
  MSG_UNNECESSARY = ::T.let(nil, ::T.untyped)
  SHEBANG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EndBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EvalWithLocation
  MSG = ::T.let(nil, ::T.untyped)
  MSG_INCORRECT_LINE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::EvenOdd
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ExpandPathArguments
  MSG = ::T.let(nil, ::T.untyped)
  PATHNAME_MSG = ::T.let(nil, ::T.untyped)
  PATHNAME_NEW_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::For
  EACH_LENGTH = ::T.let(nil, ::T.untyped)
  PREFER_EACH = ::T.let(nil, ::T.untyped)
  PREFER_FOR = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::FormatString
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::FrozenStringLiteralComment
  MSG = ::T.let(nil, ::T.untyped)
  MSG_UNNECESSARY = ::T.let(nil, ::T.untyped)
  SHEBANG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::GlobalVars
  BUILT_IN_VARS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::GuardClause
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::HashSyntax
  MSG_19 = ::T.let(nil, ::T.untyped)
  MSG_HASH_ROCKETS = ::T.let(nil, ::T.untyped)
  MSG_NO_MIXED_KEYS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IdenticalConditionalBranches
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IfCorrector
  extend ::RuboCop::Cop::Style::ConditionalAssignmentHelper
  extend ::RuboCop::Cop::Style::ConditionalCorrectorHelper
end

class RuboCop::Cop::Style::IfInsideElse
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IfUnlessModifier
  ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  MSG_USE_MODIFIER = ::T.let(nil, ::T.untyped)
  MSG_USE_NORMAL = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IfUnlessModifierOfIfUnless
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IfWithSemicolon
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ImplicitRuntimeError
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::InfiniteLoop
  LEADING_SPACE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::InlineComment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::InverseMethods
  CAMEL_CASE = ::T.let(nil, ::T.untyped)
  CLASS_COMPARISON_METHODS = ::T.let(nil, ::T.untyped)
  EQUALITY_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  NEGATED_EQUALITY_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::IpAddresses
  IPV6_MAX_SIZE = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Lambda
  LITERAL_MESSAGE = ::T.let(nil, ::T.untyped)
  METHOD_MESSAGE = ::T.let(nil, ::T.untyped)
  OFFENDING_SELECTORS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::LineEndConcatenation
  COMPLEX_STRING_EDGE_TOKEN_TYPES = ::T.let(nil, ::T.untyped)
  CONCAT_TOKEN_TYPES = ::T.let(nil, ::T.untyped)
  HIGH_PRECEDENCE_OP_TOKEN_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  QUOTE_DELIMITERS = ::T.let(nil, ::T.untyped)
  SIMPLE_STRING_TOKEN_TYPE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodCallWithArgsParentheses
  TRAILING_WHITESPACE_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodCallWithoutArgsParentheses
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodCalledOnDoEndBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodDefParentheses
  MSG_MISSING = ::T.let(nil, ::T.untyped)
  MSG_PRESENT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MethodMissingSuper
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MinMax
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MissingElse
  MSG = ::T.let(nil, ::T.untyped)
  MSG_EMPTY = ::T.let(nil, ::T.untyped)
  MSG_NIL = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MissingRespondToMissing
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MixinGrouping
  MIXIN_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MixinUsage
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ModuleFunction
  EXTEND_SELF_MSG = ::T.let(nil, ::T.untyped)
  MODULE_FUNCTION_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineBlockChain
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineIfModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineIfThen
  MSG = ::T.let(nil, ::T.untyped)
  NON_MODIFIER_THEN = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineMemoization
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineMethodSignature
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineTernaryOperator
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultilineWhenThen
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MultipleComparison
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::MutableConstant
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NestedModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NestedParenthesizedCalls
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NestedTernaryOperator
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Next
  EXIT_TYPES = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NilComparison
  EXPLICIT_MSG = ::T.let(nil, ::T.untyped)
  PREDICATE_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Not
  MSG = ::T.let(nil, ::T.untyped)
  OPPOSITE_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NumericLiteralPrefix
  BINARY_MSG = ::T.let(nil, ::T.untyped)
  BINARY_REGEX = ::T.let(nil, ::T.untyped)
  DECIMAL_MSG = ::T.let(nil, ::T.untyped)
  DECIMAL_REGEX = ::T.let(nil, ::T.untyped)
  HEX_MSG = ::T.let(nil, ::T.untyped)
  HEX_REGEX = ::T.let(nil, ::T.untyped)
  OCTAL_MSG = ::T.let(nil, ::T.untyped)
  OCTAL_REGEX = ::T.let(nil, ::T.untyped)
  OCTAL_ZERO_ONLY_MSG = ::T.let(nil, ::T.untyped)
  OCTAL_ZERO_ONLY_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NumericLiterals
  DELIMITER_REGEXP = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::NumericPredicate
  MSG = ::T.let(nil, ::T.untyped)
  REPLACEMENTS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::OneLineConditional
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::OptionHash
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::OptionalArguments
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::OrAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ParallelAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::PercentQLiterals
  LOWER_CASE_Q_MSG = ::T.let(nil, ::T.untyped)
  UPPER_CASE_Q_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::PerlBackrefs
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::PreferredHashMethods
  MSG = ::T.let(nil, ::T.untyped)
  OFFENDING_SELECTORS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Proc
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RaiseArgs
  COMPACT_MSG = ::T.let(nil, ::T.untyped)
  EXPLODED_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RandomWithOffset
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantBegin
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantConditional
  COMPARISON_OPERATORS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantException
  MSG_1 = ::T.let(nil, ::T.untyped)
  MSG_2 = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantFreeze
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantReturn
  MSG = ::T.let(nil, ::T.untyped)
  MULTI_RETURN_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantSelf
  KERNEL_METHODS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantSortBy
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RegexpLiteral
  MSG_USE_PERCENT_R = ::T.let(nil, ::T.untyped)
  MSG_USE_SLASHES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RescueModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RescueStandardError
  MSG_EXPLICIT = ::T.let(nil, ::T.untyped)
  MSG_IMPLICIT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ReturnNil
  RETURN_MSG = ::T.let(nil, ::T.untyped)
  RETURN_NIL_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SafeNavigation
  LOGIC_JUMP_KEYWORDS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Sample
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SelfAssignment
  MSG = ::T.let(nil, ::T.untyped)
  OPS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Semicolon
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Send
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SignalException
  FAIL_MSG = ::T.let(nil, ::T.untyped)
  RAISE_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SingleLineBlockParams
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SingleLineMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SpecialGlobalVars
  ENGLISH_VARS = ::T.let(nil, ::T.untyped)
  MSG_BOTH = ::T.let(nil, ::T.untyped)
  MSG_ENGLISH = ::T.let(nil, ::T.untyped)
  MSG_REGULAR = ::T.let(nil, ::T.untyped)
  NON_ENGLISH_VARS = ::T.let(nil, ::T.untyped)
  PERL_VARS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StabbyLambdaParentheses
  MSG_NO_REQUIRE = ::T.let(nil, ::T.untyped)
  MSG_REQUIRE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StderrPuts
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StringHashKeys
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StringLiterals
  MSG_INCONSISTENT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StringMethods
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::Strip
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::StructInheritance
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SymbolArray
  ARRAY_MSG = ::T.let(nil, ::T.untyped)
  PERCENT_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SymbolLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::SymbolProc
  MSG = ::T.let(nil, ::T.untyped)
  SUPER_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TernaryCorrector
  extend ::RuboCop::Cop::Style::ConditionalAssignmentHelper
  extend ::RuboCop::Cop::Style::ConditionalCorrectorHelper
end

class RuboCop::Cop::Style::TernaryParentheses
  MSG = ::T.let(nil, ::T.untyped)
  MSG_COMPLEX = ::T.let(nil, ::T.untyped)
  NON_COMPLEX_TYPES = ::T.let(nil, ::T.untyped)
  VARIABLE_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingBodyOnClass
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingBodyOnMethodDefinition
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingBodyOnModule
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingMethodEndStatement
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrailingUnderscoreVariable
  MSG = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::TrivialAccessors
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnlessElse
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededCapitalW
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededCondition
  MSG = ::T.let(nil, ::T.untyped)
  UNNEEDED_CONDITION = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededInterpolation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededPercentQ
  DYNAMIC_MSG = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ESCAPED_NON_BACKSLASH = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  PERCENT_CAPITAL_Q = ::T.let(nil, ::T.untyped)
  PERCENT_Q = ::T.let(nil, ::T.untyped)
  QUOTE = ::T.let(nil, ::T.untyped)
  SINGLE_QUOTE = ::T.let(nil, ::T.untyped)
  STRING_INTERPOLATION_REGEXP = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnneededSort
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::UnpackFirst
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::VariableInterpolation
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::WhenThen
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::WhileUntilDo
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::WhileUntilModifier
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::WordArray
  ARRAY_MSG = ::T.let(nil, ::T.untyped)
  PERCENT_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::YodaCondition
  EQUALITY_OPERATORS = ::T.let(nil, ::T.untyped)
  MSG = ::T.let(nil, ::T.untyped)
  NONCOMMUTATIVE_OPERATORS = ::T.let(nil, ::T.untyped)
  REVERSE_COMPARISON = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::ZeroLengthPredicate
  NONZERO_MSG = ::T.let(nil, ::T.untyped)
  ZERO_MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::SurroundingSpace
  NO_SPACE_COMMAND = ::T.let(nil, ::T.untyped)
  SINGLE_SPACE_REGEXP = ::T.let(nil, ::T.untyped)
  SPACE_COMMAND = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Team
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::TooManyLines
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::TrailingComma
  MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::UncommunicativeName
  CASE_MSG = ::T.let(nil, ::T.untyped)
  FORBIDDEN_MSG = ::T.let(nil, ::T.untyped)
  LENGTH_MSG = ::T.let(nil, ::T.untyped)
  NUM_MSG = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Util
  LITERAL_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Utils::FormatString
  DIGIT_DOLLAR = ::T.let(nil, ::T.untyped)
  FLAG = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  NUMBER_ARG = ::T.let(nil, ::T.untyped)
  PRECISION = ::T.let(nil, ::T.untyped)
  SEQUENCE = ::T.let(nil, ::T.untyped)
  TEMPLATE_NAME = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
  WIDTH = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::VariableForce
  ARGUMENT_DECLARATION_TYPES = ::T.let(nil, ::T.untyped)
  LOGICAL_OPERATOR_ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  LOOP_TYPES = ::T.let(nil, ::T.untyped)
  MULTIPLE_ASSIGNMENT_TYPE = ::T.let(nil, ::T.untyped)
  OPERATOR_ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  POST_CONDITION_LOOP_TYPES = ::T.let(nil, ::T.untyped)
  REGEXP_NAMED_CAPTURE_TYPE = ::T.let(nil, ::T.untyped)
  RESCUE_TYPE = ::T.let(nil, ::T.untyped)
  SCOPE_TYPES = ::T.let(nil, ::T.untyped)
  SEND_TYPE = ::T.let(nil, ::T.untyped)
  TWISTED_SCOPE_TYPES = ::T.let(nil, ::T.untyped)
  VARIABLE_ASSIGNMENT_TYPE = ::T.let(nil, ::T.untyped)
  VARIABLE_ASSIGNMENT_TYPES = ::T.let(nil, ::T.untyped)
  VARIABLE_REFERENCE_TYPE = ::T.let(nil, ::T.untyped)
  ZERO_ARITY_SUPER_TYPE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::VariableForce::Assignment
  MULTIPLE_LEFT_HAND_SIDE_TYPE = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::VariableForce::Branch
  CLASSES_BY_TYPE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::VariableForce::Reference
  VARIABLE_REFERENCE_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::VariableForce::Scope
  OUTER_SCOPE_CHILD_INDICES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::VariableForce::Variable
  VARIABLE_DECLARATION_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::ClangStyleFormatter
  ELLIPSES = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::DisabledConfigFormatter
  HEADING = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::FormatterSet
  BUILTIN_FORMATTERS_FOR_KEYS = ::T.let(nil, ::T.untyped)
  FORMATTER_APIS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::FuubarStyleFormatter
  RESET_SEQUENCE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::HTMLFormatter
  ELLIPSES = ::T.let(nil, ::T.untyped)
  TEMPLATE_PATH = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::HTMLFormatter::ERBContext
  LOGO_IMAGE_PATH = ::T.let(nil, ::T.untyped)
  SEVERITY_COLORS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::PacmanFormatter
  FALLBACK_TERMINAL_WIDTH = ::T.let(nil, ::T.untyped)
  GHOST = ::T.let(nil, ::T.untyped)
  PACDOT = ::T.let(nil, ::T.untyped)
  PACMAN = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::ProgressFormatter
  DOT = ::T.let(nil, ::T.untyped)
end

class RuboCop::Formatter::SimpleTextFormatter
  COLOR_FOR_SEVERITY = ::T.let(nil, ::T.untyped)
end

class RuboCop::MagicComment
  TOKEN = ::T.let(nil, ::T.untyped)
end

class RuboCop::MagicComment::EmacsComment
  FORMAT = ::T.let(nil, ::T.untyped)
  OPERATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

class RuboCop::MagicComment::VimComment
  FORMAT = ::T.let(nil, ::T.untyped)
  OPERATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

module RuboCop::NameSimilarity
  MINIMUM_SIMILARITY_TO_SUGGEST = ::T.let(nil, ::T.untyped)
end

class RuboCop::Options
  DEFAULT_MAXIMUM_EXCLUSION_ITEMS = ::T.let(nil, ::T.untyped)
  EXITING_OPTIONS = ::T.let(nil, ::T.untyped)
  E_STDIN_NO_PATH = ::T.let(nil, ::T.untyped)
end

module RuboCop::OptionsHelp
  FORMATTER_OPTION_LIST = ::T.let(nil, ::T.untyped)
  MAX_EXCL = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
end

class RuboCop::ProcessedSource
  STRING_SOURCE_NAME = ::T.let(nil, ::T.untyped)
end

class RuboCop::RemoteConfig
  CACHE_LIFETIME = ::T.let(nil, ::T.untyped)
end

class RuboCop::ResultCache
  NON_CHANGING = ::T.let(nil, ::T.untyped)
end

class RuboCop::Runner
  MAX_ITERATIONS = ::T.let(nil, ::T.untyped)
end

class RuboCop::StringInterpreter
  STRING_ESCAPES = ::T.let(nil, ::T.untyped)
  STRING_ESCAPE_REGEX = ::T.let(nil, ::T.untyped)
end

module RuboCop::Version
  MSG = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

class RubyVM::AbstractSyntaxTree::Node
  def pretty_print_children(q, names=T.unsafe(nil)); end
end

module RubyVM::MJIT
end

module RubyVM::MJIT
  def self.enabled?(); end

  def self.pause(*_); end

  def self.resume(); end
end

class RubyVM
  def self.resolve_feature_path(_); end
end

module SQLite3
  SQLITE_VERSION = ::T.let(nil, ::T.untyped)
  SQLITE_VERSION_NUMBER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class SQLite3::Blob
end

class SQLite3::Blob
end

module SQLite3::Constants::ColumnType
  BLOB = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  INTEGER = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
end

module SQLite3::Constants::ErrorCode
  ABORT = ::T.let(nil, ::T.untyped)
  AUTH = ::T.let(nil, ::T.untyped)
  BUSY = ::T.let(nil, ::T.untyped)
  CANTOPEN = ::T.let(nil, ::T.untyped)
  CONSTRAINT = ::T.let(nil, ::T.untyped)
  CORRUPT = ::T.let(nil, ::T.untyped)
  DONE = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  FULL = ::T.let(nil, ::T.untyped)
  INTERNAL = ::T.let(nil, ::T.untyped)
  INTERRUPT = ::T.let(nil, ::T.untyped)
  IOERR = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MISMATCH = ::T.let(nil, ::T.untyped)
  MISUSE = ::T.let(nil, ::T.untyped)
  NOLFS = ::T.let(nil, ::T.untyped)
  NOMEM = ::T.let(nil, ::T.untyped)
  NOTFOUND = ::T.let(nil, ::T.untyped)
  OK = ::T.let(nil, ::T.untyped)
  PERM = ::T.let(nil, ::T.untyped)
  PROTOCOL = ::T.let(nil, ::T.untyped)
  READONLY = ::T.let(nil, ::T.untyped)
  ROW = ::T.let(nil, ::T.untyped)
  SCHEMA = ::T.let(nil, ::T.untyped)
  TOOBIG = ::T.let(nil, ::T.untyped)
end

module SQLite3::Constants::Open
  AUTOPROXY = ::T.let(nil, ::T.untyped)
  CREATE = ::T.let(nil, ::T.untyped)
  DELETEONCLOSE = ::T.let(nil, ::T.untyped)
  EXCLUSIVE = ::T.let(nil, ::T.untyped)
  FULLMUTEX = ::T.let(nil, ::T.untyped)
  MAIN_DB = ::T.let(nil, ::T.untyped)
  MAIN_JOURNAL = ::T.let(nil, ::T.untyped)
  MASTER_JOURNAL = ::T.let(nil, ::T.untyped)
  MEMORY = ::T.let(nil, ::T.untyped)
  NOMUTEX = ::T.let(nil, ::T.untyped)
  PRIVATECACHE = ::T.let(nil, ::T.untyped)
  READONLY = ::T.let(nil, ::T.untyped)
  READWRITE = ::T.let(nil, ::T.untyped)
  SHAREDCACHE = ::T.let(nil, ::T.untyped)
  SUBJOURNAL = ::T.let(nil, ::T.untyped)
  TEMP_DB = ::T.let(nil, ::T.untyped)
  TEMP_JOURNAL = ::T.let(nil, ::T.untyped)
  TRANSIENT_DB = ::T.let(nil, ::T.untyped)
  URI = ::T.let(nil, ::T.untyped)
  WAL = ::T.let(nil, ::T.untyped)
end

module SQLite3::Constants::Open
end

module SQLite3::Constants::TextRep
  ANY = ::T.let(nil, ::T.untyped)
  DETERMINISTIC = ::T.let(nil, ::T.untyped)
  UTF16 = ::T.let(nil, ::T.untyped)
  UTF16BE = ::T.let(nil, ::T.untyped)
  UTF16LE = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

class SQLite3::Database
  NULL_TRANSLATOR = ::T.let(nil, ::T.untyped)
end

module SQLite3::Pragmas
  AUTO_VACUUM_MODES = ::T.let(nil, ::T.untyped)
  ENCODINGS = ::T.let(nil, ::T.untyped)
  JOURNAL_MODES = ::T.let(nil, ::T.untyped)
  LOCKING_MODES = ::T.let(nil, ::T.untyped)
  SYNCHRONOUS_MODES = ::T.let(nil, ::T.untyped)
  TEMP_STORE_MODES = ::T.let(nil, ::T.untyped)
  WAL_CHECKPOINTS = ::T.let(nil, ::T.untyped)
end

module SQLite3::VersionProxy
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module SassC
  VERSION = ::T.let(nil, ::T.untyped)
end

class SassC::Engine
  OUTPUT_STYLES = ::T.let(nil, ::T.untyped)
end

module SassC::Native
  SassInputStyle = ::T.let(nil, ::T.untyped)
  SassOutputStyle = ::T.let(nil, ::T.untyped)
  SassSeparator = ::T.let(nil, ::T.untyped)
  SassTag = ::T.let(nil, ::T.untyped)
end

module SassC::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

class SassC::Rails::Importer
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  GLOB = ::T.let(nil, ::T.untyped)
  PREFIXS = ::T.let(nil, ::T.untyped)
end

class SassC::Script::Value::Bool
  FALSE = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

class SassC::Script::Value::Number
  CONVERSION_TABLE = ::T.let(nil, ::T.untyped)
  MUTUALLY_CONVERTIBLE = ::T.let(nil, ::T.untyped)
  NO_UNITS = ::T.let(nil, ::T.untyped)
  OPERATIONS = ::T.let(nil, ::T.untyped)
end

module SassC::Script::ValueConversion
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

module SassC::Util
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_COMPONENTS = ::T.let(nil, ::T.untyped)
end

ScanError = StringScanner::Error

module SecureRandom
  BASE36_ALPHABET = ::T.let(nil, ::T.untyped)
  BASE58_ALPHABET = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver
  VERSION = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Chrome::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Chrome::Options
  KEY = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::DriverExtensions::Rotatable
  ORIENTATIONS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Error
  DEPRECATED_ERRORS = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Firefox
  DEFAULT_ASSUME_UNTRUSTED_ISSUER = ::T.let(nil, ::T.untyped)
  DEFAULT_ENABLE_NATIVE_EVENTS = ::T.let(nil, ::T.untyped)
  DEFAULT_LOAD_NO_FOCUS_LIB = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_SECURE_SSL = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Binary
  NO_FOCUS_LIBRARIES = ::T.let(nil, ::T.untyped)
  NO_FOCUS_LIBRARY_NAME = ::T.let(nil, ::T.untyped)
  QUIT_TIMEOUT = ::T.let(nil, ::T.untyped)
  WAIT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Extension
  NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Launcher
  SOCKET_LOCK_TIMEOUT = ::T.let(nil, ::T.untyped)
  STABLE_CONNECTION_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Firefox::Marionette::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Options
  KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Profile
  VALID_PREFERENCE_TYPES = ::T.let(nil, ::T.untyped)
  WEBDRIVER_EXTENSION_PATH = ::T.let(nil, ::T.untyped)
  WEBDRIVER_PREFS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::HTML5::SharedWebStorage
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Selenium::WebDriver::IE::Options
  CAPABILITIES = ::T.let(nil, ::T.untyped)
  KEY = ::T.let(nil, ::T.untyped)
  SCROLL_BOTTOM = ::T.let(nil, ::T.untyped)
  SCROLL_TOP = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Interactions
  KEY = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SOURCE_TYPES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::Interaction
  PAUSE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::KeyInput
  SUBTYPES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerInput
  KIND = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerMove
  ORIGINS = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  VIEWPORT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerPress
  BUTTONS = ::T.let(nil, ::T.untyped)
  DIRECTIONS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Keyboard
  MODIFIERS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Keys
  KEYS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Manager
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::PortProber
  IGNORED_ERRORS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Proxy
  ALLOWED = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Capabilities
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Http::Common
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DEFAULT_HEADERS = ::T.let(nil, ::T.untyped)
  MAX_REDIRECTS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Http::Default
  MAX_RETRIES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::OSS::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Response
  STACKTRACE_KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::W3C::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
  ESCAPE_CSS_REGEXP = ::T.let(nil, ::T.untyped)
  QUIT_ERRORS = ::T.let(nil, ::T.untyped)
  UNICODE_CODE_POINT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::W3C::Capabilities
  EXTENSION_CAPABILITY_PATTERN = ::T.let(nil, ::T.untyped)
  KNOWN = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Safari::Bridge
  COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::SearchContext
  FINDERS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Service
  SOCKET_LOCK_TIMEOUT = ::T.let(nil, ::T.untyped)
  START_TIMEOUT = ::T.let(nil, ::T.untyped)
  STOP_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::SocketPoller
  CONNECTED_ERRORS = ::T.let(nil, ::T.untyped)
  CONNECT_TIMEOUT = ::T.let(nil, ::T.untyped)
  NOT_CONNECTED_ERRORS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Support::Color
  HEX3_PATTERN = ::T.let(nil, ::T.untyped)
  HEX_PATTERN = ::T.let(nil, ::T.untyped)
  HSLA_PATTERN = ::T.let(nil, ::T.untyped)
  HSL_PATTERN = ::T.let(nil, ::T.untyped)
  RGBA_PATTERN = ::T.let(nil, ::T.untyped)
  RGBA_PCT_PATTERN = ::T.let(nil, ::T.untyped)
  RGB_PATTERN = ::T.let(nil, ::T.untyped)
  RGB_PCT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::TouchScreen
  FLICK_SPEED = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Wait
  DEFAULT_INTERVAL = ::T.let(nil, ::T.untyped)
  DEFAULT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Zipper
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Set
  def ==(other); end

  def ===(o); end

  def compare_by_identity(); end

  def compare_by_identity?(); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

module SimpleCov
  VERSION = ::T.let(nil, ::T.untyped)
end

module SimpleCov::Configuration
  DEFAULT_COVERAGE_CRITERION = ::T.let(nil, ::T.untyped)
  SUPPORTED_COVERAGE_CRITERIA = ::T.let(nil, ::T.untyped)
end

module SimpleCov::ExitCodes
  EXCEPTION = ::T.let(nil, ::T.untyped)
  MAXIMUM_COVERAGE_DROP = ::T.let(nil, ::T.untyped)
  MINIMUM_COVERAGE = ::T.let(nil, ::T.untyped)
  SUCCESS = ::T.let(nil, ::T.untyped)
end

class SimpleCov::Formatter::HTMLFormatter
  VERSION = ::T.let(nil, ::T.untyped)
end

class SimpleCov::LinesClassifier
  COMMENT_LINE = ::T.let(nil, ::T.untyped)
  NOT_RELEVANT = ::T.let(nil, ::T.untyped)
  RELEVANT = ::T.let(nil, ::T.untyped)
  WHITESPACE_LINE = ::T.let(nil, ::T.untyped)
  WHITESPACE_OR_COMMENT_LINE = ::T.let(nil, ::T.untyped)
end

class SimpleCov::SourceFile
  RUBY_FILE_ENCODING_MAGIC_COMMENT_REGEX = ::T.let(nil, ::T.untyped)
  SHEBANG_REGEX = ::T.let(nil, ::T.untyped)
end

module SimpleCov::UselessResultsRemover
  ROOT_REGX = ::T.let(nil, ::T.untyped)
end

module Singleton
  def _dump(depth=T.unsafe(nil)); end

  def clone(); end

  def dup(); end
end

module Singleton::SingletonClassMethods
  def _load(str); end

  def clone(); end
end

module Singleton
  def self.__init__(klass); end
end

class Socket
  AF_CCITT = ::T.let(nil, ::T.untyped)
  AF_CHAOS = ::T.let(nil, ::T.untyped)
  AF_CNT = ::T.let(nil, ::T.untyped)
  AF_COIP = ::T.let(nil, ::T.untyped)
  AF_DATAKIT = ::T.let(nil, ::T.untyped)
  AF_DLI = ::T.let(nil, ::T.untyped)
  AF_E164 = ::T.let(nil, ::T.untyped)
  AF_ECMA = ::T.let(nil, ::T.untyped)
  AF_HYLINK = ::T.let(nil, ::T.untyped)
  AF_IMPLINK = ::T.let(nil, ::T.untyped)
  AF_ISO = ::T.let(nil, ::T.untyped)
  AF_LAT = ::T.let(nil, ::T.untyped)
  AF_LINK = ::T.let(nil, ::T.untyped)
  AF_NATM = ::T.let(nil, ::T.untyped)
  AF_NDRV = ::T.let(nil, ::T.untyped)
  AF_NETBIOS = ::T.let(nil, ::T.untyped)
  AF_NS = ::T.let(nil, ::T.untyped)
  AF_OSI = ::T.let(nil, ::T.untyped)
  AF_PPP = ::T.let(nil, ::T.untyped)
  AF_PUP = ::T.let(nil, ::T.untyped)
  AF_SIP = ::T.let(nil, ::T.untyped)
  AF_SYSTEM = ::T.let(nil, ::T.untyped)
  AI_DEFAULT = ::T.let(nil, ::T.untyped)
  AI_MASK = ::T.let(nil, ::T.untyped)
  AI_V4MAPPED_CFG = ::T.let(nil, ::T.untyped)
  EAI_BADHINTS = ::T.let(nil, ::T.untyped)
  EAI_MAX = ::T.let(nil, ::T.untyped)
  EAI_PROTOCOL = ::T.let(nil, ::T.untyped)
  IFF_ALTPHYS = ::T.let(nil, ::T.untyped)
  IFF_LINK0 = ::T.let(nil, ::T.untyped)
  IFF_LINK1 = ::T.let(nil, ::T.untyped)
  IFF_LINK2 = ::T.let(nil, ::T.untyped)
  IFF_OACTIVE = ::T.let(nil, ::T.untyped)
  IFF_SIMPLEX = ::T.let(nil, ::T.untyped)
  IPPROTO_EON = ::T.let(nil, ::T.untyped)
  IPPROTO_GGP = ::T.let(nil, ::T.untyped)
  IPPROTO_HELLO = ::T.let(nil, ::T.untyped)
  IPPROTO_MAX = ::T.let(nil, ::T.untyped)
  IPPROTO_ND = ::T.let(nil, ::T.untyped)
  IPPROTO_XTP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_USE_MIN_MTU = ::T.let(nil, ::T.untyped)
  IP_PORTRANGE = ::T.let(nil, ::T.untyped)
  IP_RECVDSTADDR = ::T.let(nil, ::T.untyped)
  IP_RECVIF = ::T.let(nil, ::T.untyped)
  LOCAL_PEERCRED = ::T.let(nil, ::T.untyped)
  MSG_EOF = ::T.let(nil, ::T.untyped)
  MSG_FLUSH = ::T.let(nil, ::T.untyped)
  MSG_HAVEMORE = ::T.let(nil, ::T.untyped)
  MSG_HOLD = ::T.let(nil, ::T.untyped)
  MSG_RCVMORE = ::T.let(nil, ::T.untyped)
  MSG_SEND = ::T.let(nil, ::T.untyped)
  PF_CCITT = ::T.let(nil, ::T.untyped)
  PF_CHAOS = ::T.let(nil, ::T.untyped)
  PF_CNT = ::T.let(nil, ::T.untyped)
  PF_COIP = ::T.let(nil, ::T.untyped)
  PF_DATAKIT = ::T.let(nil, ::T.untyped)
  PF_DLI = ::T.let(nil, ::T.untyped)
  PF_ECMA = ::T.let(nil, ::T.untyped)
  PF_HYLINK = ::T.let(nil, ::T.untyped)
  PF_IMPLINK = ::T.let(nil, ::T.untyped)
  PF_ISO = ::T.let(nil, ::T.untyped)
  PF_LAT = ::T.let(nil, ::T.untyped)
  PF_LINK = ::T.let(nil, ::T.untyped)
  PF_NATM = ::T.let(nil, ::T.untyped)
  PF_NDRV = ::T.let(nil, ::T.untyped)
  PF_NETBIOS = ::T.let(nil, ::T.untyped)
  PF_NS = ::T.let(nil, ::T.untyped)
  PF_OSI = ::T.let(nil, ::T.untyped)
  PF_PIP = ::T.let(nil, ::T.untyped)
  PF_PPP = ::T.let(nil, ::T.untyped)
  PF_PUP = ::T.let(nil, ::T.untyped)
  PF_RTIP = ::T.let(nil, ::T.untyped)
  PF_SIP = ::T.let(nil, ::T.untyped)
  PF_SYSTEM = ::T.let(nil, ::T.untyped)
  PF_XTP = ::T.let(nil, ::T.untyped)
  SCM_CREDS = ::T.let(nil, ::T.untyped)
  SO_DONTTRUNC = ::T.let(nil, ::T.untyped)
  SO_NKE = ::T.let(nil, ::T.untyped)
  SO_NOSIGPIPE = ::T.let(nil, ::T.untyped)
  SO_NREAD = ::T.let(nil, ::T.untyped)
  SO_USELOOPBACK = ::T.let(nil, ::T.untyped)
  SO_WANTMORE = ::T.let(nil, ::T.untyped)
  SO_WANTOOBFLAG = ::T.let(nil, ::T.untyped)
  TCP_NOOPT = ::T.let(nil, ::T.untyped)
  TCP_NOPUSH = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  AF_CCITT = ::T.let(nil, ::T.untyped)
  AF_CHAOS = ::T.let(nil, ::T.untyped)
  AF_CNT = ::T.let(nil, ::T.untyped)
  AF_COIP = ::T.let(nil, ::T.untyped)
  AF_DATAKIT = ::T.let(nil, ::T.untyped)
  AF_DLI = ::T.let(nil, ::T.untyped)
  AF_E164 = ::T.let(nil, ::T.untyped)
  AF_ECMA = ::T.let(nil, ::T.untyped)
  AF_HYLINK = ::T.let(nil, ::T.untyped)
  AF_IMPLINK = ::T.let(nil, ::T.untyped)
  AF_ISO = ::T.let(nil, ::T.untyped)
  AF_LAT = ::T.let(nil, ::T.untyped)
  AF_LINK = ::T.let(nil, ::T.untyped)
  AF_NATM = ::T.let(nil, ::T.untyped)
  AF_NDRV = ::T.let(nil, ::T.untyped)
  AF_NETBIOS = ::T.let(nil, ::T.untyped)
  AF_NS = ::T.let(nil, ::T.untyped)
  AF_OSI = ::T.let(nil, ::T.untyped)
  AF_PPP = ::T.let(nil, ::T.untyped)
  AF_PUP = ::T.let(nil, ::T.untyped)
  AF_SIP = ::T.let(nil, ::T.untyped)
  AF_SYSTEM = ::T.let(nil, ::T.untyped)
  AI_DEFAULT = ::T.let(nil, ::T.untyped)
  AI_MASK = ::T.let(nil, ::T.untyped)
  AI_V4MAPPED_CFG = ::T.let(nil, ::T.untyped)
  EAI_BADHINTS = ::T.let(nil, ::T.untyped)
  EAI_MAX = ::T.let(nil, ::T.untyped)
  EAI_PROTOCOL = ::T.let(nil, ::T.untyped)
  IFF_ALTPHYS = ::T.let(nil, ::T.untyped)
  IFF_LINK0 = ::T.let(nil, ::T.untyped)
  IFF_LINK1 = ::T.let(nil, ::T.untyped)
  IFF_LINK2 = ::T.let(nil, ::T.untyped)
  IFF_OACTIVE = ::T.let(nil, ::T.untyped)
  IFF_SIMPLEX = ::T.let(nil, ::T.untyped)
  IPPROTO_EON = ::T.let(nil, ::T.untyped)
  IPPROTO_GGP = ::T.let(nil, ::T.untyped)
  IPPROTO_HELLO = ::T.let(nil, ::T.untyped)
  IPPROTO_MAX = ::T.let(nil, ::T.untyped)
  IPPROTO_ND = ::T.let(nil, ::T.untyped)
  IPPROTO_XTP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_USE_MIN_MTU = ::T.let(nil, ::T.untyped)
  IP_PORTRANGE = ::T.let(nil, ::T.untyped)
  IP_RECVDSTADDR = ::T.let(nil, ::T.untyped)
  IP_RECVIF = ::T.let(nil, ::T.untyped)
  LOCAL_PEERCRED = ::T.let(nil, ::T.untyped)
  MSG_EOF = ::T.let(nil, ::T.untyped)
  MSG_FLUSH = ::T.let(nil, ::T.untyped)
  MSG_HAVEMORE = ::T.let(nil, ::T.untyped)
  MSG_HOLD = ::T.let(nil, ::T.untyped)
  MSG_RCVMORE = ::T.let(nil, ::T.untyped)
  MSG_SEND = ::T.let(nil, ::T.untyped)
  PF_CCITT = ::T.let(nil, ::T.untyped)
  PF_CHAOS = ::T.let(nil, ::T.untyped)
  PF_CNT = ::T.let(nil, ::T.untyped)
  PF_COIP = ::T.let(nil, ::T.untyped)
  PF_DATAKIT = ::T.let(nil, ::T.untyped)
  PF_DLI = ::T.let(nil, ::T.untyped)
  PF_ECMA = ::T.let(nil, ::T.untyped)
  PF_HYLINK = ::T.let(nil, ::T.untyped)
  PF_IMPLINK = ::T.let(nil, ::T.untyped)
  PF_ISO = ::T.let(nil, ::T.untyped)
  PF_LAT = ::T.let(nil, ::T.untyped)
  PF_LINK = ::T.let(nil, ::T.untyped)
  PF_NATM = ::T.let(nil, ::T.untyped)
  PF_NDRV = ::T.let(nil, ::T.untyped)
  PF_NETBIOS = ::T.let(nil, ::T.untyped)
  PF_NS = ::T.let(nil, ::T.untyped)
  PF_OSI = ::T.let(nil, ::T.untyped)
  PF_PIP = ::T.let(nil, ::T.untyped)
  PF_PPP = ::T.let(nil, ::T.untyped)
  PF_PUP = ::T.let(nil, ::T.untyped)
  PF_RTIP = ::T.let(nil, ::T.untyped)
  PF_SIP = ::T.let(nil, ::T.untyped)
  PF_SYSTEM = ::T.let(nil, ::T.untyped)
  PF_XTP = ::T.let(nil, ::T.untyped)
  SCM_CREDS = ::T.let(nil, ::T.untyped)
  SO_DONTTRUNC = ::T.let(nil, ::T.untyped)
  SO_NKE = ::T.let(nil, ::T.untyped)
  SO_NOSIGPIPE = ::T.let(nil, ::T.untyped)
  SO_NREAD = ::T.let(nil, ::T.untyped)
  SO_USELOOPBACK = ::T.let(nil, ::T.untyped)
  SO_WANTMORE = ::T.let(nil, ::T.untyped)
  SO_WANTOOBFLAG = ::T.let(nil, ::T.untyped)
  TCP_NOOPT = ::T.let(nil, ::T.untyped)
  TCP_NOPUSH = ::T.let(nil, ::T.untyped)
end

class Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode
  include ::Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedAttributeMethods
  include ::Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedRelationMethods
end

class Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::ActiveRecord_AssociationRelation
end

class Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedRelationMethods
end

class Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::ActiveRecord_Associations_CollectionProxy
end

class Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedRelationMethods
end

class Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::ActiveRecord_Relation
end

module Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedAssociationMethods
end

module Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedAssociationMethods
end

module Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedAttributeMethods
end

module Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedRelationMethods
end

module Solidus::Migrations::PromotionWithCodeHandlers::PromotionCode::GeneratedRelationMethods
  extend ::Mutex_m
end

class SorbetRails::Config
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

SorbetRails::JobRbiFormatter::Parameter = Parlour::RbiGenerator::Parameter

class SorbetRails::JobRbiFormatter
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

SorbetRails::MailerRbiFormatter::Parameter = Parlour::RbiGenerator::Parameter

class SorbetRails::MailerRbiFormatter
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class SorbetRails::ModelColumnUtils::ColumnType
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module SorbetRails::ModelColumnUtils
  extend ::T::Private::Abstract::Hooks
  extend ::T::InterfaceWrapper::Helpers
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

SorbetRails::ModelPlugins::Base::Parameter = Parlour::RbiGenerator::Parameter

module SorbetRails::ModelPlugins
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class SorbetRails::ModelRbiFormatter
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module SorbetRails::ModelUtils
  extend ::T::Private::Abstract::Hooks
  extend ::T::InterfaceWrapper::Helpers
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module SorbetRails::PluckToTStruct
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module SorbetRails::SorbetUtils
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module SorbetRails::Utils
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module SorbetRails
  extend ::T::Private::Methods::SingletonMethodHooks
end

class SortedSet
  def initialize(*args, &block); end
end

class SortedSet
  def self.setup(); end
end

module Spree::ActiveStorageAdapter
  include ::Spree::ActiveStorageAdapter::Normalization
end

class Spree::ActiveStorageAdapter::Attachment
  def method_missing(method, *args, &block); end
end

module Spree::ActiveStorageAdapter::ClassMethods
  def attachment_definition(); end

  def attachment_definitions(); end

  def attachment_name(); end

  def has_attachment(name, definition); end
end

module Spree::ActiveStorageAdapter::ClassMethods
end

class Spree::Address
  include ::Spree::Address::GeneratedAttributeMethods
  include ::Spree::Address::GeneratedAssociationMethods
  def autosave_associated_records_for_country(*args); end

  def autosave_associated_records_for_state(*args); end

  def first_name(*args); end

  def first_name=(*args); end

  def first_name?(*args); end

  def first_name_before_last_save(*args); end

  def first_name_before_type_cast(*args); end

  def first_name_came_from_user?(*args); end

  def first_name_change(*args); end

  def first_name_change_to_be_saved(*args); end

  def first_name_changed?(*args); end

  def first_name_in_database(*args); end

  def first_name_previous_change(*args); end

  def first_name_previously_changed?(*args); end

  def first_name_was(*args); end

  def first_name_will_change!(*args); end

  def full_name(*args, &block); end

  def full_name=(*args); end

  def full_name?(*args); end

  def full_name_before_last_save(*args); end

  def full_name_before_type_cast(*args); end

  def full_name_came_from_user?(*args); end

  def full_name_change(*args); end

  def full_name_change_to_be_saved(*args); end

  def full_name_changed?(*args); end

  def full_name_in_database(*args); end

  def full_name_previous_change(*args); end

  def full_name_previously_changed?(*args); end

  def full_name_was(*args); end

  def full_name_will_change!(*args); end

  def last_name(*args); end

  def last_name=(*args); end

  def last_name?(*args); end

  def last_name_before_last_save(*args); end

  def last_name_before_type_cast(*args); end

  def last_name_came_from_user?(*args); end

  def last_name_change(*args); end

  def last_name_change_to_be_saved(*args); end

  def last_name_changed?(*args); end

  def last_name_in_database(*args); end

  def last_name_previous_change(*args); end

  def last_name_previously_changed?(*args); end

  def last_name_was(*args); end

  def last_name_will_change!(*args); end

  def restore_first_name!(*args); end

  def restore_full_name!(*args); end

  def restore_last_name!(*args); end

  def saved_change_to_first_name(*args); end

  def saved_change_to_first_name?(*args); end

  def saved_change_to_full_name(*args); end

  def saved_change_to_full_name?(*args); end

  def saved_change_to_last_name(*args); end

  def saved_change_to_last_name?(*args); end

  def will_save_change_to_first_name?(*args); end

  def will_save_change_to_full_name?(*args); end

  def will_save_change_to_last_name?(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Address::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Address::GeneratedRelationMethods
end

class Spree::Address::ActiveRecord_AssociationRelation
end

class Spree::Address::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Address::GeneratedRelationMethods
end

class Spree::Address::ActiveRecord_Associations_CollectionProxy
end

class Spree::Address::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Address::GeneratedRelationMethods
end

class Spree::Address::ActiveRecord_Relation
end

module Spree::Address::GeneratedAssociationMethods
  def build_country(*args, &block); end

  def build_state(*args, &block); end

  def country(); end

  def country=(value); end

  def create_country(*args, &block); end

  def create_country!(*args, &block); end

  def create_state(*args, &block); end

  def create_state!(*args, &block); end

  def reload_country(); end

  def reload_state(); end

  def state(); end

  def state=(value); end
end

module Spree::Address::GeneratedAssociationMethods
end

module Spree::Address::GeneratedAttributeMethods
end

module Spree::Address::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Address::GeneratedRelationMethods
  def with_values(*args, &block); end
end

module Spree::Address::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Address
  def self.with_values(*args); end
end

class Spree::Adjustment
  include ::Spree::Adjustment::GeneratedAttributeMethods
  include ::Spree::Adjustment::GeneratedAssociationMethods
  def autosave_associated_records_for_adjustable(*args); end

  def autosave_associated_records_for_adjustment_reason(*args); end

  def autosave_associated_records_for_order(*args); end

  def autosave_associated_records_for_promotion_code(*args); end

  def autosave_associated_records_for_source(*args); end

  def display_amount(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Adjustment::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Adjustment::GeneratedRelationMethods
end

class Spree::Adjustment::ActiveRecord_AssociationRelation
end

class Spree::Adjustment::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Adjustment::GeneratedRelationMethods
end

class Spree::Adjustment::ActiveRecord_Associations_CollectionProxy
end

class Spree::Adjustment::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Adjustment::GeneratedRelationMethods
end

class Spree::Adjustment::ActiveRecord_Relation
end

module Spree::Adjustment::GeneratedAssociationMethods
  def adjustable(); end

  def adjustable=(value); end

  def adjustment_reason(); end

  def adjustment_reason=(value); end

  def build_adjustment_reason(*args, &block); end

  def build_order(*args, &block); end

  def build_promotion_code(*args, &block); end

  def create_adjustment_reason(*args, &block); end

  def create_adjustment_reason!(*args, &block); end

  def create_order(*args, &block); end

  def create_order!(*args, &block); end

  def create_promotion_code(*args, &block); end

  def create_promotion_code!(*args, &block); end

  def order(); end

  def order=(value); end

  def promotion_code(); end

  def promotion_code=(value); end

  def reload_adjustable(); end

  def reload_adjustment_reason(); end

  def reload_order(); end

  def reload_promotion_code(); end

  def reload_source(); end

  def source(); end

  def source=(value); end
end

module Spree::Adjustment::GeneratedAssociationMethods
end

module Spree::Adjustment::GeneratedAttributeMethods
end

module Spree::Adjustment::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Adjustment::GeneratedRelationMethods
  def additional(*args, &block); end

  def cancellation(*args, &block); end

  def charge(*args, &block); end

  def credit(*args, &block); end

  def eligible(*args, &block); end

  def finalized(*args, &block); end

  def is_included(*args, &block); end

  def non_promotion(*args, &block); end

  def non_tax(*args, &block); end

  def nonzero(*args, &block); end

  def not_finalized(*args, &block); end

  def price(*args, &block); end

  def promotion(*args, &block); end

  def return_authorization(*args, &block); end

  def shipping(*args, &block); end

  def tax(*args, &block); end
end

module Spree::Adjustment::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Adjustment
  def self.additional(*args); end

  def self.cancellation(*args); end

  def self.charge(*args); end

  def self.credit(*args); end

  def self.eligible(*args); end

  def self.finalized(*args); end

  def self.is_included(*args); end

  def self.non_promotion(*args); end

  def self.non_tax(*args); end

  def self.nonzero(*args); end

  def self.not_finalized(*args); end

  def self.price(*args); end

  def self.promotion(*args); end

  def self.return_authorization(*args); end

  def self.shipping(*args); end

  def self.tax(*args); end
end

class Spree::AdjustmentReason
  include ::Spree::AdjustmentReason::GeneratedAttributeMethods
  include ::Spree::AdjustmentReason::GeneratedAssociationMethods
  def after_add_for_adjustments(); end

  def after_add_for_adjustments=(val); end

  def after_add_for_adjustments?(); end

  def after_remove_for_adjustments(); end

  def after_remove_for_adjustments=(val); end

  def after_remove_for_adjustments?(); end

  def autosave_associated_records_for_adjustments(*args); end

  def before_add_for_adjustments(); end

  def before_add_for_adjustments=(val); end

  def before_add_for_adjustments?(); end

  def before_remove_for_adjustments(); end

  def before_remove_for_adjustments=(val); end

  def before_remove_for_adjustments?(); end

  def validate_associated_records_for_adjustments(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::AdjustmentReason::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::AdjustmentReason::GeneratedRelationMethods
end

class Spree::AdjustmentReason::ActiveRecord_AssociationRelation
end

class Spree::AdjustmentReason::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::AdjustmentReason::GeneratedRelationMethods
end

class Spree::AdjustmentReason::ActiveRecord_Associations_CollectionProxy
end

class Spree::AdjustmentReason::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::AdjustmentReason::GeneratedRelationMethods
end

class Spree::AdjustmentReason::ActiveRecord_Relation
end

module Spree::AdjustmentReason::GeneratedAssociationMethods
  def adjustment_ids(); end

  def adjustment_ids=(ids); end

  def adjustments(); end

  def adjustments=(value); end
end

module Spree::AdjustmentReason::GeneratedAssociationMethods
end

module Spree::AdjustmentReason::GeneratedAttributeMethods
end

module Spree::AdjustmentReason::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::AdjustmentReason::GeneratedRelationMethods
  def active(*args, &block); end
end

module Spree::AdjustmentReason::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::AdjustmentReason
  def self.active(*args); end

  def self.after_add_for_adjustments(); end

  def self.after_add_for_adjustments=(val); end

  def self.after_add_for_adjustments?(); end

  def self.after_remove_for_adjustments(); end

  def self.after_remove_for_adjustments=(val); end

  def self.after_remove_for_adjustments?(); end

  def self.before_add_for_adjustments(); end

  def self.before_add_for_adjustments=(val); end

  def self.before_add_for_adjustments?(); end

  def self.before_remove_for_adjustments(); end

  def self.before_remove_for_adjustments=(val); end

  def self.before_remove_for_adjustments?(); end
end

module Spree::Api::ApiHelpers
  def address_attributes(); end

  def adjustment_attributes(); end

  def country_attributes(); end

  def creditcard_attributes(); end

  def customer_return_attributes(); end

  def image_attributes(); end

  def inventory_unit_attributes(); end

  def line_item_attributes(); end

  def option_type_attributes(); end

  def option_value_attributes(); end

  def order_attributes(); end

  def payment_attributes(); end

  def payment_method_attributes(); end

  def payment_source_attributes(); end

  def product_attributes(); end

  def product_property_attributes(); end

  def promotion_attributes(); end

  def property_attributes(); end

  def return_authorization_attributes(); end

  def shipment_attributes(); end

  def state_attributes(); end

  def stock_item_attributes(); end

  def stock_location_attributes(); end

  def stock_movement_attributes(); end

  def store_attributes(); end

  def store_credit_history_attributes(); end

  def taxon_attributes(); end

  def taxonomy_attributes(); end

  def user_attributes(); end

  def variant_property_attributes(); end
end

module Spree::Api::ApiHelpers
  def self.address_attributes(); end

  def self.adjustment_attributes(); end

  def self.country_attributes(); end

  def self.creditcard_attributes(); end

  def self.customer_return_attributes(); end

  def self.image_attributes(); end

  def self.inventory_unit_attributes(); end

  def self.line_item_attributes(); end

  def self.option_type_attributes(); end

  def self.option_value_attributes(); end

  def self.order_attributes(); end

  def self.payment_attributes(); end

  def self.payment_method_attributes(); end

  def self.payment_source_attributes(); end

  def self.product_attributes(); end

  def self.product_property_attributes(); end

  def self.promotion_attributes(); end

  def self.property_attributes(); end

  def self.return_authorization_attributes(); end

  def self.shipment_attributes(); end

  def self.state_attributes(); end

  def self.stock_item_attributes(); end

  def self.stock_location_attributes(); end

  def self.stock_movement_attributes(); end

  def self.store_attributes(); end

  def self.store_credit_history_attributes(); end

  def self.taxon_attributes(); end

  def self.taxonomy_attributes(); end

  def self.user_attributes(); end

  def self.variant_attributes(); end

  def self.variant_property_attributes(); end
end

class Spree::Api::CheckoutsController
  include ::Spree::Core::ControllerHelpers::Order
  include ::Spree::Core::ControllerHelpers::PaymentParameters
end

class Spree::Api::OrdersController
  def address(); end

  def confirm(); end

  def delivery(); end

  def payment(); end
end

class Spree::ApiConfiguration
  def preferred_requires_authentication(); end

  def preferred_requires_authentication=(value); end

  def preferred_requires_authentication_default(); end

  def preferred_requires_authentication_type(); end

  def requires_authentication(); end

  def requires_authentication=(value); end
end

class Spree::AppConfiguration
  def add_payment_sources_to_wallet_class(); end

  def add_payment_sources_to_wallet_class=(class_name); end

  def address_requires_phone(); end

  def address_requires_phone=(value); end

  def address_requires_state(); end

  def address_requires_state=(value); end

  def admin_interface_logo(); end

  def admin_interface_logo=(value); end

  def admin_products_per_page(); end

  def admin_products_per_page=(value); end

  def admin_variants_per_page(); end

  def admin_variants_per_page=(value); end

  def admin_vat_country_iso(); end

  def admin_vat_country_iso=(value); end

  def allocator_class(); end

  def allocator_class=(class_name); end

  def allow_checkout_on_gateway_error(); end

  def allow_checkout_on_gateway_error=(value); end

  def allow_guest_checkout(); end

  def allow_guest_checkout=(value); end

  def allow_return_item_amount_editing(); end

  def allow_return_item_amount_editing=(value); end

  def alternative_billing_phone(); end

  def alternative_billing_phone=(value); end

  def alternative_shipping_phone(); end

  def alternative_shipping_phone=(value); end

  def always_put_site_name_in_title(); end

  def always_put_site_name_in_title=(value); end

  def auto_capture(); end

  def auto_capture=(value); end

  def auto_capture_exchanges(); end

  def auto_capture_exchanges=(value); end

  def automatic_default_address(); end

  def automatic_default_address=(value); end

  def billing_address_required(); end

  def billing_address_required=(value); end

  def binary_inventory_cache(); end

  def binary_inventory_cache=(value); end

  def can_restrict_stock_management(); end

  def can_restrict_stock_management=(value); end

  def carton_shipped_email_class(); end

  def carton_shipped_email_class=(class_name); end

  def checkout_zone(); end

  def checkout_zone=(value); end

  def company(); end

  def company=(value); end

  def completable_order_created_cutoff_days(); end

  def completable_order_created_cutoff_days=(value); end

  def completable_order_updated_cutoff_days(); end

  def completable_order_updated_cutoff_days=(value); end

  def consider_actionless_promotion_active(); end

  def consider_actionless_promotion_active=(value); end

  def countries_that_use_nested_subregions(); end

  def countries_that_use_nested_subregions=(value); end

  def credit_to_new_allocation(); end

  def credit_to_new_allocation=(value); end

  def currency(); end

  def currency=(value); end

  def current_store_selector_class(); end

  def current_store_selector_class=(class_name); end

  def customer_returns_per_page(); end

  def customer_returns_per_page=(value); end

  def default_country_id(); end

  def default_country_id=(value); end

  def default_country_iso(); end

  def default_country_iso=(value); end

  def default_payment_builder_class(); end

  def default_payment_builder_class=(class_name); end

  def generate_api_key_for_all_roles(); end

  def generate_api_key_for_all_roles=(value); end

  def guest_token_cookie_options(); end

  def guest_token_cookie_options=(value); end

  def image_attachment_module(); end

  def image_attachment_module=(class_name); end

  def inventory_cache_threshold(); end

  def inventory_cache_threshold=(value); end

  def layout(); end

  def layout=(value); end

  def logo(); end

  def logo=(value); end

  def mails_from(); end

  def mails_from=(value); end

  def max_level_in_taxons_menu(); end

  def max_level_in_taxons_menu=(value); end

  def order_bill_address_used(); end

  def order_bill_address_used=(value); end

  def order_capturing_time_window(); end

  def order_capturing_time_window=(value); end

  def order_mailer_class(); end

  def order_mailer_class=(class_name); end

  def order_merger_class(); end

  def order_merger_class=(class_name); end

  def order_mutex_max_age(); end

  def order_mutex_max_age=(value); end

  def orders_per_page(); end

  def orders_per_page=(value); end

  def preferred_address_requires_phone(); end

  def preferred_address_requires_phone=(value); end

  def preferred_address_requires_phone_default(); end

  def preferred_address_requires_phone_type(); end

  def preferred_address_requires_state(); end

  def preferred_address_requires_state=(value); end

  def preferred_address_requires_state_default(); end

  def preferred_address_requires_state_type(); end

  def preferred_admin_interface_logo(); end

  def preferred_admin_interface_logo=(value); end

  def preferred_admin_interface_logo_default(); end

  def preferred_admin_interface_logo_type(); end

  def preferred_admin_products_per_page(); end

  def preferred_admin_products_per_page=(value); end

  def preferred_admin_products_per_page_default(); end

  def preferred_admin_products_per_page_type(); end

  def preferred_admin_variants_per_page(); end

  def preferred_admin_variants_per_page=(value); end

  def preferred_admin_variants_per_page_default(); end

  def preferred_admin_variants_per_page_type(); end

  def preferred_admin_vat_country_iso(); end

  def preferred_admin_vat_country_iso=(value); end

  def preferred_admin_vat_country_iso_default(); end

  def preferred_admin_vat_country_iso_type(); end

  def preferred_allow_checkout_on_gateway_error(); end

  def preferred_allow_checkout_on_gateway_error=(value); end

  def preferred_allow_checkout_on_gateway_error_default(); end

  def preferred_allow_checkout_on_gateway_error_type(); end

  def preferred_allow_guest_checkout(); end

  def preferred_allow_guest_checkout=(value); end

  def preferred_allow_guest_checkout_default(); end

  def preferred_allow_guest_checkout_type(); end

  def preferred_allow_return_item_amount_editing(); end

  def preferred_allow_return_item_amount_editing=(value); end

  def preferred_allow_return_item_amount_editing_default(); end

  def preferred_allow_return_item_amount_editing_type(); end

  def preferred_alternative_billing_phone(); end

  def preferred_alternative_billing_phone=(value); end

  def preferred_alternative_billing_phone_default(); end

  def preferred_alternative_billing_phone_type(); end

  def preferred_alternative_shipping_phone(); end

  def preferred_alternative_shipping_phone=(value); end

  def preferred_alternative_shipping_phone_default(); end

  def preferred_alternative_shipping_phone_type(); end

  def preferred_always_put_site_name_in_title(); end

  def preferred_always_put_site_name_in_title=(value); end

  def preferred_always_put_site_name_in_title_default(); end

  def preferred_always_put_site_name_in_title_type(); end

  def preferred_auto_capture(); end

  def preferred_auto_capture=(value); end

  def preferred_auto_capture_default(); end

  def preferred_auto_capture_exchanges(); end

  def preferred_auto_capture_exchanges=(value); end

  def preferred_auto_capture_exchanges_default(); end

  def preferred_auto_capture_exchanges_type(); end

  def preferred_auto_capture_type(); end

  def preferred_automatic_default_address(); end

  def preferred_automatic_default_address=(value); end

  def preferred_automatic_default_address_default(); end

  def preferred_automatic_default_address_type(); end

  def preferred_billing_address_required(); end

  def preferred_billing_address_required=(value); end

  def preferred_billing_address_required_default(); end

  def preferred_billing_address_required_type(); end

  def preferred_binary_inventory_cache(); end

  def preferred_binary_inventory_cache=(value); end

  def preferred_binary_inventory_cache_default(); end

  def preferred_binary_inventory_cache_type(); end

  def preferred_can_restrict_stock_management(); end

  def preferred_can_restrict_stock_management=(value); end

  def preferred_can_restrict_stock_management_default(); end

  def preferred_can_restrict_stock_management_type(); end

  def preferred_checkout_zone(); end

  def preferred_checkout_zone=(value); end

  def preferred_checkout_zone_default(); end

  def preferred_checkout_zone_type(); end

  def preferred_company(); end

  def preferred_company=(value); end

  def preferred_company_default(); end

  def preferred_company_type(); end

  def preferred_completable_order_created_cutoff_days(); end

  def preferred_completable_order_created_cutoff_days=(value); end

  def preferred_completable_order_created_cutoff_days_default(); end

  def preferred_completable_order_created_cutoff_days_type(); end

  def preferred_completable_order_updated_cutoff_days(); end

  def preferred_completable_order_updated_cutoff_days=(value); end

  def preferred_completable_order_updated_cutoff_days_default(); end

  def preferred_completable_order_updated_cutoff_days_type(); end

  def preferred_consider_actionless_promotion_active(); end

  def preferred_consider_actionless_promotion_active=(value); end

  def preferred_consider_actionless_promotion_active_default(); end

  def preferred_consider_actionless_promotion_active_type(); end

  def preferred_countries_that_use_nested_subregions(); end

  def preferred_countries_that_use_nested_subregions=(value); end

  def preferred_countries_that_use_nested_subregions_default(); end

  def preferred_countries_that_use_nested_subregions_type(); end

  def preferred_credit_to_new_allocation(); end

  def preferred_credit_to_new_allocation=(value); end

  def preferred_credit_to_new_allocation_default(); end

  def preferred_credit_to_new_allocation_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end

  def preferred_customer_returns_per_page(); end

  def preferred_customer_returns_per_page=(value); end

  def preferred_customer_returns_per_page_default(); end

  def preferred_customer_returns_per_page_type(); end

  def preferred_default_country_id(); end

  def preferred_default_country_id=(value); end

  def preferred_default_country_id_default(); end

  def preferred_default_country_id_type(); end

  def preferred_default_country_iso(); end

  def preferred_default_country_iso=(value); end

  def preferred_default_country_iso_default(); end

  def preferred_default_country_iso_type(); end

  def preferred_generate_api_key_for_all_roles(); end

  def preferred_generate_api_key_for_all_roles=(value); end

  def preferred_generate_api_key_for_all_roles_default(); end

  def preferred_generate_api_key_for_all_roles_type(); end

  def preferred_guest_token_cookie_options(); end

  def preferred_guest_token_cookie_options=(value); end

  def preferred_guest_token_cookie_options_default(); end

  def preferred_guest_token_cookie_options_type(); end

  def preferred_inventory_cache_threshold(); end

  def preferred_inventory_cache_threshold=(value); end

  def preferred_inventory_cache_threshold_default(); end

  def preferred_inventory_cache_threshold_type(); end

  def preferred_layout(); end

  def preferred_layout=(value); end

  def preferred_layout_default(); end

  def preferred_layout_type(); end

  def preferred_logo(); end

  def preferred_logo=(value); end

  def preferred_logo_default(); end

  def preferred_logo_type(); end

  def preferred_mails_from(); end

  def preferred_mails_from=(value); end

  def preferred_mails_from_default(); end

  def preferred_mails_from_type(); end

  def preferred_max_level_in_taxons_menu(); end

  def preferred_max_level_in_taxons_menu=(value); end

  def preferred_max_level_in_taxons_menu_default(); end

  def preferred_max_level_in_taxons_menu_type(); end

  def preferred_order_bill_address_used(); end

  def preferred_order_bill_address_used=(value); end

  def preferred_order_bill_address_used_default(); end

  def preferred_order_bill_address_used_type(); end

  def preferred_order_capturing_time_window(); end

  def preferred_order_capturing_time_window=(value); end

  def preferred_order_capturing_time_window_default(); end

  def preferred_order_capturing_time_window_type(); end

  def preferred_order_mutex_max_age(); end

  def preferred_order_mutex_max_age=(value); end

  def preferred_order_mutex_max_age_default(); end

  def preferred_order_mutex_max_age_type(); end

  def preferred_orders_per_page(); end

  def preferred_orders_per_page=(value); end

  def preferred_orders_per_page_default(); end

  def preferred_orders_per_page_type(); end

  def preferred_products_per_page(); end

  def preferred_products_per_page=(value); end

  def preferred_products_per_page_default(); end

  def preferred_products_per_page_type(); end

  def preferred_promotions_per_page(); end

  def preferred_promotions_per_page=(value); end

  def preferred_promotions_per_page_default(); end

  def preferred_promotions_per_page_type(); end

  def preferred_properties_per_page(); end

  def preferred_properties_per_page=(value); end

  def preferred_properties_per_page_default(); end

  def preferred_properties_per_page_type(); end

  def preferred_raise_with_invalid_currency(); end

  def preferred_raise_with_invalid_currency=(value); end

  def preferred_raise_with_invalid_currency_default(); end

  def preferred_raise_with_invalid_currency_type(); end

  def preferred_redirect_back_on_unauthorized(); end

  def preferred_redirect_back_on_unauthorized=(value); end

  def preferred_redirect_back_on_unauthorized_default(); end

  def preferred_redirect_back_on_unauthorized_type(); end

  def preferred_require_master_price(); end

  def preferred_require_master_price=(value); end

  def preferred_require_master_price_default(); end

  def preferred_require_master_price_type(); end

  def preferred_require_payment_to_ship(); end

  def preferred_require_payment_to_ship=(value); end

  def preferred_require_payment_to_ship_default(); end

  def preferred_require_payment_to_ship_type(); end

  def preferred_return_eligibility_number_of_days(); end

  def preferred_return_eligibility_number_of_days=(value); end

  def preferred_return_eligibility_number_of_days_default(); end

  def preferred_return_eligibility_number_of_days_type(); end

  def preferred_roles_for_auto_api_key(); end

  def preferred_roles_for_auto_api_key=(value); end

  def preferred_roles_for_auto_api_key_default(); end

  def preferred_roles_for_auto_api_key_type(); end

  def preferred_run_order_validations_on_order_updater(); end

  def preferred_run_order_validations_on_order_updater=(value); end

  def preferred_run_order_validations_on_order_updater_default(); end

  def preferred_run_order_validations_on_order_updater_type(); end

  def preferred_send_core_emails(); end

  def preferred_send_core_emails=(value); end

  def preferred_send_core_emails_default(); end

  def preferred_send_core_emails_type(); end

  def preferred_shipping_instructions(); end

  def preferred_shipping_instructions=(value); end

  def preferred_shipping_instructions_default(); end

  def preferred_shipping_instructions_type(); end

  def preferred_show_only_complete_orders_by_default(); end

  def preferred_show_only_complete_orders_by_default=(value); end

  def preferred_show_only_complete_orders_by_default_default(); end

  def preferred_show_only_complete_orders_by_default_type(); end

  def preferred_show_products_without_price(); end

  def preferred_show_products_without_price=(value); end

  def preferred_show_products_without_price_default(); end

  def preferred_show_products_without_price_type(); end

  def preferred_show_raw_product_description(); end

  def preferred_show_raw_product_description=(value); end

  def preferred_show_raw_product_description_default(); end

  def preferred_show_raw_product_description_type(); end

  def preferred_show_variant_full_price(); end

  def preferred_show_variant_full_price=(value); end

  def preferred_show_variant_full_price_default(); end

  def preferred_show_variant_full_price_type(); end

  def preferred_tax_using_ship_address(); end

  def preferred_tax_using_ship_address=(value); end

  def preferred_tax_using_ship_address_default(); end

  def preferred_tax_using_ship_address_type(); end

  def preferred_track_inventory_levels(); end

  def preferred_track_inventory_levels=(value); end

  def preferred_track_inventory_levels_default(); end

  def preferred_track_inventory_levels_type(); end

  def preferred_use_combined_first_and_last_name_in_address(); end

  def preferred_use_combined_first_and_last_name_in_address=(value); end

  def preferred_use_combined_first_and_last_name_in_address_default(); end

  def preferred_use_combined_first_and_last_name_in_address_type(); end

  def preferred_use_custom_cancancan_actions(); end

  def preferred_use_custom_cancancan_actions=(value); end

  def preferred_use_custom_cancancan_actions_default(); end

  def preferred_use_custom_cancancan_actions_type(); end

  def preferred_use_legacy_order_state_machine(); end

  def preferred_use_legacy_order_state_machine=(value); end

  def preferred_use_legacy_order_state_machine_default(); end

  def preferred_use_legacy_order_state_machine_type(); end

  def preferred_use_legacy_store_credit_reimbursement_category_name(); end

  def preferred_use_legacy_store_credit_reimbursement_category_name=(value); end

  def preferred_use_legacy_store_credit_reimbursement_category_name_default(); end

  def preferred_use_legacy_store_credit_reimbursement_category_name_type(); end

  def product_gallery_class(); end

  def product_gallery_class=(class_name); end

  def products_per_page(); end

  def products_per_page=(value); end

  def promotion_chooser_class(); end

  def promotion_chooser_class=(class_name); end

  def promotion_code_batch_mailer_class(); end

  def promotion_code_batch_mailer_class=(class_name); end

  def promotions_per_page(); end

  def promotions_per_page=(value); end

  def properties_per_page(); end

  def properties_per_page=(value); end

  def raise_with_invalid_currency(); end

  def raise_with_invalid_currency=(value); end

  def redirect_back_on_unauthorized(); end

  def redirect_back_on_unauthorized=(value); end

  def reimbursement_mailer_class(); end

  def reimbursement_mailer_class=(class_name); end

  def require_master_price(); end

  def require_master_price=(value); end

  def require_payment_to_ship(); end

  def require_payment_to_ship=(value); end

  def return_eligibility_number_of_days(); end

  def return_eligibility_number_of_days=(value); end

  def roles_for_auto_api_key(); end

  def roles_for_auto_api_key=(value); end

  def run_order_validations_on_order_updater(); end

  def run_order_validations_on_order_updater=(value); end

  def searcher_class(); end

  def searcher_class=(class_name); end

  def send_core_emails(); end

  def send_core_emails=(value); end

  def shipping_instructions(); end

  def shipping_instructions=(value); end

  def shipping_rate_selector_class(); end

  def shipping_rate_selector_class=(class_name); end

  def shipping_rate_sorter_class(); end

  def shipping_rate_sorter_class=(class_name); end

  def shipping_rate_tax_calculator_class(); end

  def shipping_rate_tax_calculator_class=(class_name); end

  def show_only_complete_orders_by_default(); end

  def show_only_complete_orders_by_default=(value); end

  def show_products_without_price(); end

  def show_products_without_price=(value); end

  def show_raw_product_description(); end

  def show_raw_product_description=(value); end

  def show_variant_full_price(); end

  def show_variant_full_price=(value); end

  def tax_adjuster_class(); end

  def tax_adjuster_class=(class_name); end

  def tax_calculator_class(); end

  def tax_calculator_class=(class_name); end

  def tax_using_ship_address(); end

  def tax_using_ship_address=(value); end

  def taxon_attachment_module(); end

  def taxon_attachment_module=(class_name); end

  def taxon_url_parametizer_class(); end

  def taxon_url_parametizer_class=(class_name); end

  def track_inventory_levels(); end

  def track_inventory_levels=(value); end

  def use_combined_first_and_last_name_in_address(); end

  def use_combined_first_and_last_name_in_address=(value); end

  def use_custom_cancancan_actions(); end

  def use_custom_cancancan_actions=(value); end

  def use_legacy_order_state_machine(); end

  def use_legacy_order_state_machine=(value); end

  def use_legacy_store_credit_reimbursement_category_name(); end

  def use_legacy_store_credit_reimbursement_category_name=(value); end

  def variant_gallery_class(); end

  def variant_gallery_class=(class_name); end

  def variant_price_selector_class(); end

  def variant_price_selector_class=(class_name); end

  def variant_search_class(); end

  def variant_search_class=(class_name); end

  def variant_vat_prices_generator_class(); end

  def variant_vat_prices_generator_class=(class_name); end
end

class Spree::Asset
  include ::Spree::Asset::GeneratedAttributeMethods
  include ::Spree::Asset::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def autosave_associated_records_for_viewable(*args); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Asset::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Asset::GeneratedRelationMethods
end

class Spree::Asset::ActiveRecord_AssociationRelation
end

class Spree::Asset::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Asset::GeneratedRelationMethods
end

class Spree::Asset::ActiveRecord_Associations_CollectionProxy
end

class Spree::Asset::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Asset::GeneratedRelationMethods
end

class Spree::Asset::ActiveRecord_Relation
end

module Spree::Asset::GeneratedAssociationMethods
  def reload_viewable(); end

  def viewable(); end

  def viewable=(value); end
end

module Spree::Asset::GeneratedAssociationMethods
end

module Spree::Asset::GeneratedAttributeMethods
end

module Spree::Asset::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Asset::GeneratedRelationMethods
  def in_list(*args, &block); end
end

module Spree::Asset::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Asset
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::BackendConfiguration
  def locale(); end

  def locale=(value); end

  def preferred_locale(); end

  def preferred_locale=(value); end

  def preferred_locale_default(); end

  def preferred_locale_type(); end
  CONFIGURATION_TABS = ::T.let(nil, ::T.untyped)
  ORDER_TABS = ::T.let(nil, ::T.untyped)
  PRODUCT_TABS = ::T.let(nil, ::T.untyped)
  PROMOTION_TABS = ::T.let(nil, ::T.untyped)
  STOCK_TABS = ::T.let(nil, ::T.untyped)
  USER_TABS = ::T.let(nil, ::T.untyped)
end

class Spree::Base
  include ::Spree::Base::GeneratedAttributeMethods
  include ::Spree::Base::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  def default_ransackable_attributes(); end

  def default_ransackable_attributes=(val); end

  def default_ransackable_attributes?(); end

  def permalink_options(); end

  def permalink_options=(val); end

  def permalink_options?(); end

  def whitelisted_ransackable_associations(); end

  def whitelisted_ransackable_associations=(val); end

  def whitelisted_ransackable_associations?(); end

  def whitelisted_ransackable_attributes(); end

  def whitelisted_ransackable_attributes=(val); end

  def whitelisted_ransackable_attributes?(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

module Spree::Base::GeneratedAssociationMethods
end

module Spree::Base::GeneratedAssociationMethods
end

module Spree::Base::GeneratedAttributeMethods
end

module Spree::Base::GeneratedAttributeMethods
  extend ::Mutex_m
end

class Spree::Base
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  extend ::Spree::Preferences::PreferableClassMethods
  def self.default_ransackable_attributes(); end

  def self.default_ransackable_attributes=(val); end

  def self.default_ransackable_attributes?(); end

  def self.permalink_options(); end

  def self.permalink_options=(val); end

  def self.permalink_options?(); end

  def self.whitelisted_ransackable_associations(); end

  def self.whitelisted_ransackable_associations=(val); end

  def self.whitelisted_ransackable_associations?(); end

  def self.whitelisted_ransackable_attributes(); end

  def self.whitelisted_ransackable_attributes=(val); end

  def self.whitelisted_ransackable_attributes?(); end
end

class Spree::BaseController
  def unauthorized_redirect(); end

  def unauthorized_redirect=(val); end

  def unauthorized_redirect?(); end
end

class Spree::BaseController
  def self.unauthorized_redirect(); end

  def self.unauthorized_redirect=(val); end

  def self.unauthorized_redirect?(); end
end

class Spree::BillingIntegration
  include ::Spree::BillingIntegration::GeneratedAttributeMethods
  include ::Spree::BillingIntegration::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::BillingIntegration::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::BillingIntegration::GeneratedRelationMethods
end

class Spree::BillingIntegration::ActiveRecord_AssociationRelation
end

class Spree::BillingIntegration::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::BillingIntegration::GeneratedRelationMethods
end

class Spree::BillingIntegration::ActiveRecord_Associations_CollectionProxy
end

class Spree::BillingIntegration::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::BillingIntegration::GeneratedRelationMethods
end

class Spree::BillingIntegration::ActiveRecord_Relation
end

module Spree::BillingIntegration::GeneratedAssociationMethods
end

module Spree::BillingIntegration::GeneratedAssociationMethods
end

module Spree::BillingIntegration::GeneratedAttributeMethods
end

module Spree::BillingIntegration::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::BillingIntegration::GeneratedRelationMethods
end

module Spree::BillingIntegration::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree::CalculatedAdjustments::ClassMethods
  def calculators(); end
end

module Spree::CalculatedAdjustments::ClassMethods
end

class Spree::Calculator
  include ::Spree::Calculator::GeneratedAttributeMethods
  include ::Spree::Calculator::GeneratedAssociationMethods
  def autosave_associated_records_for_calculable(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
end

class Spree::Calculator::ActiveRecord_AssociationRelation
end

class Spree::Calculator::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
end

class Spree::Calculator::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
end

class Spree::Calculator::ActiveRecord_Relation
end

class Spree::Calculator::DefaultTax
  include ::Spree::Calculator::DefaultTax::GeneratedAttributeMethods
  include ::Spree::Calculator::DefaultTax::GeneratedAssociationMethods
  include ::Spree::Tax::TaxHelpers
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::DefaultTax::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::DefaultTax::GeneratedRelationMethods
end

class Spree::Calculator::DefaultTax::ActiveRecord_AssociationRelation
end

class Spree::Calculator::DefaultTax::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::DefaultTax::GeneratedRelationMethods
end

class Spree::Calculator::DefaultTax::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::DefaultTax::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::DefaultTax::GeneratedRelationMethods
end

class Spree::Calculator::DefaultTax::ActiveRecord_Relation
end

module Spree::Calculator::DefaultTax::GeneratedAssociationMethods
end

module Spree::Calculator::DefaultTax::GeneratedAssociationMethods
end

module Spree::Calculator::DefaultTax::GeneratedAttributeMethods
end

module Spree::Calculator::DefaultTax::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::DefaultTax::GeneratedRelationMethods
end

module Spree::Calculator::DefaultTax::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::DistributedAmount
  include ::Spree::Calculator::DistributedAmount::GeneratedAttributeMethods
  include ::Spree::Calculator::DistributedAmount::GeneratedAssociationMethods
  def preferred_amount(); end

  def preferred_amount=(value); end

  def preferred_amount_default(); end

  def preferred_amount_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::DistributedAmount::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::DistributedAmount::GeneratedRelationMethods
end

class Spree::Calculator::DistributedAmount::ActiveRecord_AssociationRelation
end

class Spree::Calculator::DistributedAmount::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::DistributedAmount::GeneratedRelationMethods
end

class Spree::Calculator::DistributedAmount::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::DistributedAmount::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::DistributedAmount::GeneratedRelationMethods
end

class Spree::Calculator::DistributedAmount::ActiveRecord_Relation
end

module Spree::Calculator::DistributedAmount::GeneratedAssociationMethods
end

module Spree::Calculator::DistributedAmount::GeneratedAssociationMethods
end

module Spree::Calculator::DistributedAmount::GeneratedAttributeMethods
end

module Spree::Calculator::DistributedAmount::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::DistributedAmount::GeneratedRelationMethods
end

module Spree::Calculator::DistributedAmount::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::FlatPercentItemTotal
  include ::Spree::Calculator::FlatPercentItemTotal::GeneratedAttributeMethods
  include ::Spree::Calculator::FlatPercentItemTotal::GeneratedAssociationMethods
  def preferred_flat_percent(); end

  def preferred_flat_percent=(value); end

  def preferred_flat_percent_default(); end

  def preferred_flat_percent_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::FlatPercentItemTotal::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlatPercentItemTotal::GeneratedRelationMethods
end

class Spree::Calculator::FlatPercentItemTotal::ActiveRecord_AssociationRelation
end

class Spree::Calculator::FlatPercentItemTotal::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlatPercentItemTotal::GeneratedRelationMethods
end

class Spree::Calculator::FlatPercentItemTotal::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::FlatPercentItemTotal::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlatPercentItemTotal::GeneratedRelationMethods
end

class Spree::Calculator::FlatPercentItemTotal::ActiveRecord_Relation
end

module Spree::Calculator::FlatPercentItemTotal::GeneratedAssociationMethods
end

module Spree::Calculator::FlatPercentItemTotal::GeneratedAssociationMethods
end

module Spree::Calculator::FlatPercentItemTotal::GeneratedAttributeMethods
end

module Spree::Calculator::FlatPercentItemTotal::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::FlatPercentItemTotal::GeneratedRelationMethods
end

module Spree::Calculator::FlatPercentItemTotal::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::FlatRate
  include ::Spree::Calculator::FlatRate::GeneratedAttributeMethods
  include ::Spree::Calculator::FlatRate::GeneratedAssociationMethods
  def preferred_amount(); end

  def preferred_amount=(value); end

  def preferred_amount_default(); end

  def preferred_amount_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::FlatRate::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlatRate::GeneratedRelationMethods
end

class Spree::Calculator::FlatRate::ActiveRecord_AssociationRelation
end

class Spree::Calculator::FlatRate::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlatRate::GeneratedRelationMethods
end

class Spree::Calculator::FlatRate::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::FlatRate::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlatRate::GeneratedRelationMethods
end

class Spree::Calculator::FlatRate::ActiveRecord_Relation
end

module Spree::Calculator::FlatRate::GeneratedAssociationMethods
end

module Spree::Calculator::FlatRate::GeneratedAssociationMethods
end

module Spree::Calculator::FlatRate::GeneratedAttributeMethods
end

module Spree::Calculator::FlatRate::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::FlatRate::GeneratedRelationMethods
end

module Spree::Calculator::FlatRate::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::FlexiRate
  include ::Spree::Calculator::FlexiRate::GeneratedAttributeMethods
  include ::Spree::Calculator::FlexiRate::GeneratedAssociationMethods
  def preferred_additional_item(); end

  def preferred_additional_item=(value); end

  def preferred_additional_item_default(); end

  def preferred_additional_item_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end

  def preferred_first_item(); end

  def preferred_first_item=(value); end

  def preferred_first_item_default(); end

  def preferred_first_item_type(); end

  def preferred_max_items(); end

  def preferred_max_items=(value); end

  def preferred_max_items_default(); end

  def preferred_max_items_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::FlexiRate::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlexiRate::GeneratedRelationMethods
end

class Spree::Calculator::FlexiRate::ActiveRecord_AssociationRelation
end

class Spree::Calculator::FlexiRate::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlexiRate::GeneratedRelationMethods
end

class Spree::Calculator::FlexiRate::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::FlexiRate::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FlexiRate::GeneratedRelationMethods
end

class Spree::Calculator::FlexiRate::ActiveRecord_Relation
end

module Spree::Calculator::FlexiRate::GeneratedAssociationMethods
end

module Spree::Calculator::FlexiRate::GeneratedAssociationMethods
end

module Spree::Calculator::FlexiRate::GeneratedAttributeMethods
end

module Spree::Calculator::FlexiRate::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::FlexiRate::GeneratedRelationMethods
end

module Spree::Calculator::FlexiRate::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::FreeShipping
  include ::Spree::Calculator::FreeShipping::GeneratedAttributeMethods
  include ::Spree::Calculator::FreeShipping::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::FreeShipping::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FreeShipping::GeneratedRelationMethods
end

class Spree::Calculator::FreeShipping::ActiveRecord_AssociationRelation
end

class Spree::Calculator::FreeShipping::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FreeShipping::GeneratedRelationMethods
end

class Spree::Calculator::FreeShipping::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::FreeShipping::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::FreeShipping::GeneratedRelationMethods
end

class Spree::Calculator::FreeShipping::ActiveRecord_Relation
end

module Spree::Calculator::FreeShipping::GeneratedAssociationMethods
end

module Spree::Calculator::FreeShipping::GeneratedAssociationMethods
end

module Spree::Calculator::FreeShipping::GeneratedAttributeMethods
end

module Spree::Calculator::FreeShipping::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::FreeShipping::GeneratedRelationMethods
end

module Spree::Calculator::FreeShipping::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree::Calculator::GeneratedAssociationMethods
  def calculable(); end

  def calculable=(value); end

  def reload_calculable(); end
end

module Spree::Calculator::GeneratedAssociationMethods
end

module Spree::Calculator::GeneratedAttributeMethods
end

module Spree::Calculator::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::GeneratedRelationMethods
end

module Spree::Calculator::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::PercentOnLineItem
  include ::Spree::Calculator::PercentOnLineItem::GeneratedAttributeMethods
  include ::Spree::Calculator::PercentOnLineItem::GeneratedAssociationMethods
  def preferred_percent(); end

  def preferred_percent=(value); end

  def preferred_percent_default(); end

  def preferred_percent_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::PercentOnLineItem::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PercentOnLineItem::GeneratedRelationMethods
end

class Spree::Calculator::PercentOnLineItem::ActiveRecord_AssociationRelation
end

class Spree::Calculator::PercentOnLineItem::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PercentOnLineItem::GeneratedRelationMethods
end

class Spree::Calculator::PercentOnLineItem::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::PercentOnLineItem::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PercentOnLineItem::GeneratedRelationMethods
end

class Spree::Calculator::PercentOnLineItem::ActiveRecord_Relation
end

module Spree::Calculator::PercentOnLineItem::GeneratedAssociationMethods
end

module Spree::Calculator::PercentOnLineItem::GeneratedAssociationMethods
end

module Spree::Calculator::PercentOnLineItem::GeneratedAttributeMethods
end

module Spree::Calculator::PercentOnLineItem::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::PercentOnLineItem::GeneratedRelationMethods
end

module Spree::Calculator::PercentOnLineItem::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::PercentPerItem
  include ::Spree::Calculator::PercentPerItem::GeneratedAttributeMethods
  include ::Spree::Calculator::PercentPerItem::GeneratedAssociationMethods
  def preferred_percent(); end

  def preferred_percent=(value); end

  def preferred_percent_default(); end

  def preferred_percent_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::PercentPerItem::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PercentPerItem::GeneratedRelationMethods
end

class Spree::Calculator::PercentPerItem::ActiveRecord_AssociationRelation
end

class Spree::Calculator::PercentPerItem::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PercentPerItem::GeneratedRelationMethods
end

class Spree::Calculator::PercentPerItem::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::PercentPerItem::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PercentPerItem::GeneratedRelationMethods
end

class Spree::Calculator::PercentPerItem::ActiveRecord_Relation
end

module Spree::Calculator::PercentPerItem::GeneratedAssociationMethods
end

module Spree::Calculator::PercentPerItem::GeneratedAssociationMethods
end

module Spree::Calculator::PercentPerItem::GeneratedAttributeMethods
end

module Spree::Calculator::PercentPerItem::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::PercentPerItem::GeneratedRelationMethods
end

module Spree::Calculator::PercentPerItem::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::PriceSack
  include ::Spree::Calculator::PriceSack::GeneratedAttributeMethods
  include ::Spree::Calculator::PriceSack::GeneratedAssociationMethods
  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end

  def preferred_discount_amount(); end

  def preferred_discount_amount=(value); end

  def preferred_discount_amount_default(); end

  def preferred_discount_amount_type(); end

  def preferred_minimal_amount(); end

  def preferred_minimal_amount=(value); end

  def preferred_minimal_amount_default(); end

  def preferred_minimal_amount_type(); end

  def preferred_normal_amount(); end

  def preferred_normal_amount=(value); end

  def preferred_normal_amount_default(); end

  def preferred_normal_amount_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::PriceSack::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PriceSack::GeneratedRelationMethods
end

class Spree::Calculator::PriceSack::ActiveRecord_AssociationRelation
end

class Spree::Calculator::PriceSack::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PriceSack::GeneratedRelationMethods
end

class Spree::Calculator::PriceSack::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::PriceSack::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::PriceSack::GeneratedRelationMethods
end

class Spree::Calculator::PriceSack::ActiveRecord_Relation
end

module Spree::Calculator::PriceSack::GeneratedAssociationMethods
end

module Spree::Calculator::PriceSack::GeneratedAssociationMethods
end

module Spree::Calculator::PriceSack::GeneratedAttributeMethods
end

module Spree::Calculator::PriceSack::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::PriceSack::GeneratedRelationMethods
end

module Spree::Calculator::PriceSack::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::Returns::DefaultRefundAmount
  include ::Spree::Calculator::Returns::DefaultRefundAmount::GeneratedAttributeMethods
  include ::Spree::Calculator::Returns::DefaultRefundAmount::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::Returns::DefaultRefundAmount::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ReturnsCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Returns::DefaultRefundAmount::GeneratedRelationMethods
end

class Spree::Calculator::Returns::DefaultRefundAmount::ActiveRecord_AssociationRelation
end

class Spree::Calculator::Returns::DefaultRefundAmount::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ReturnsCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Returns::DefaultRefundAmount::GeneratedRelationMethods
end

class Spree::Calculator::Returns::DefaultRefundAmount::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::Returns::DefaultRefundAmount::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ReturnsCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Returns::DefaultRefundAmount::GeneratedRelationMethods
end

class Spree::Calculator::Returns::DefaultRefundAmount::ActiveRecord_Relation
end

module Spree::Calculator::Returns::DefaultRefundAmount::GeneratedAssociationMethods
end

module Spree::Calculator::Returns::DefaultRefundAmount::GeneratedAssociationMethods
end

module Spree::Calculator::Returns::DefaultRefundAmount::GeneratedAttributeMethods
end

module Spree::Calculator::Returns::DefaultRefundAmount::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::Returns::DefaultRefundAmount::GeneratedRelationMethods
end

module Spree::Calculator::Returns::DefaultRefundAmount::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::Shipping::FlatPercentItemTotal
  include ::Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedAttributeMethods
  include ::Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedAssociationMethods
  def preferred_flat_percent(); end

  def preferred_flat_percent=(value); end

  def preferred_flat_percent_default(); end

  def preferred_flat_percent_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::Shipping::FlatPercentItemTotal::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlatPercentItemTotal::ActiveRecord_AssociationRelation
end

class Spree::Calculator::Shipping::FlatPercentItemTotal::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlatPercentItemTotal::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::Shipping::FlatPercentItemTotal::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlatPercentItemTotal::ActiveRecord_Relation
end

module Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedAttributeMethods
end

module Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedRelationMethods
end

module Spree::Calculator::Shipping::FlatPercentItemTotal::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::Shipping::FlatRate
  include ::Spree::Calculator::Shipping::FlatRate::GeneratedAttributeMethods
  include ::Spree::Calculator::Shipping::FlatRate::GeneratedAssociationMethods
  def preferred_amount(); end

  def preferred_amount=(value); end

  def preferred_amount_default(); end

  def preferred_amount_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::Shipping::FlatRate::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlatRate::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlatRate::ActiveRecord_AssociationRelation
end

class Spree::Calculator::Shipping::FlatRate::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlatRate::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlatRate::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::Shipping::FlatRate::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlatRate::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlatRate::ActiveRecord_Relation
end

module Spree::Calculator::Shipping::FlatRate::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::FlatRate::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::FlatRate::GeneratedAttributeMethods
end

module Spree::Calculator::Shipping::FlatRate::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::Shipping::FlatRate::GeneratedRelationMethods
end

module Spree::Calculator::Shipping::FlatRate::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::Shipping::FlexiRate
  include ::Spree::Calculator::Shipping::FlexiRate::GeneratedAttributeMethods
  include ::Spree::Calculator::Shipping::FlexiRate::GeneratedAssociationMethods
  def preferred_additional_item(); end

  def preferred_additional_item=(value); end

  def preferred_additional_item_default(); end

  def preferred_additional_item_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end

  def preferred_first_item(); end

  def preferred_first_item=(value); end

  def preferred_first_item_default(); end

  def preferred_first_item_type(); end

  def preferred_max_items(); end

  def preferred_max_items=(value); end

  def preferred_max_items_default(); end

  def preferred_max_items_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::Shipping::FlexiRate::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlexiRate::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlexiRate::ActiveRecord_AssociationRelation
end

class Spree::Calculator::Shipping::FlexiRate::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlexiRate::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlexiRate::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::Shipping::FlexiRate::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::FlexiRate::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::FlexiRate::ActiveRecord_Relation
end

module Spree::Calculator::Shipping::FlexiRate::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::FlexiRate::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::FlexiRate::GeneratedAttributeMethods
end

module Spree::Calculator::Shipping::FlexiRate::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::Shipping::FlexiRate::GeneratedRelationMethods
end

module Spree::Calculator::Shipping::FlexiRate::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::Shipping::PerItem
  include ::Spree::Calculator::Shipping::PerItem::GeneratedAttributeMethods
  include ::Spree::Calculator::Shipping::PerItem::GeneratedAssociationMethods
  def preferred_amount(); end

  def preferred_amount=(value); end

  def preferred_amount_default(); end

  def preferred_amount_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::Shipping::PerItem::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::PerItem::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::PerItem::ActiveRecord_AssociationRelation
end

class Spree::Calculator::Shipping::PerItem::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::PerItem::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::PerItem::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::Shipping::PerItem::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::PerItem::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::PerItem::ActiveRecord_Relation
end

module Spree::Calculator::Shipping::PerItem::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::PerItem::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::PerItem::GeneratedAttributeMethods
end

module Spree::Calculator::Shipping::PerItem::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::Shipping::PerItem::GeneratedRelationMethods
end

module Spree::Calculator::Shipping::PerItem::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::Shipping::PriceSack
  include ::Spree::Calculator::Shipping::PriceSack::GeneratedAttributeMethods
  include ::Spree::Calculator::Shipping::PriceSack::GeneratedAssociationMethods
  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end

  def preferred_discount_amount(); end

  def preferred_discount_amount=(value); end

  def preferred_discount_amount_default(); end

  def preferred_discount_amount_type(); end

  def preferred_minimal_amount(); end

  def preferred_minimal_amount=(value); end

  def preferred_minimal_amount_default(); end

  def preferred_minimal_amount_type(); end

  def preferred_normal_amount(); end

  def preferred_normal_amount=(value); end

  def preferred_normal_amount_default(); end

  def preferred_normal_amount_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::Shipping::PriceSack::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::PriceSack::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::PriceSack::ActiveRecord_AssociationRelation
end

class Spree::Calculator::Shipping::PriceSack::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::PriceSack::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::PriceSack::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::Shipping::PriceSack::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
  include ::Spree::Calculator::Shipping::PriceSack::GeneratedRelationMethods
end

class Spree::Calculator::Shipping::PriceSack::ActiveRecord_Relation
end

module Spree::Calculator::Shipping::PriceSack::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::PriceSack::GeneratedAssociationMethods
end

module Spree::Calculator::Shipping::PriceSack::GeneratedAttributeMethods
end

module Spree::Calculator::Shipping::PriceSack::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::Shipping::PriceSack::GeneratedRelationMethods
end

module Spree::Calculator::Shipping::PriceSack::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::TieredFlatRate
  include ::Spree::Calculator::TieredFlatRate::GeneratedAttributeMethods
  include ::Spree::Calculator::TieredFlatRate::GeneratedAssociationMethods
  def preferred_base_amount(); end

  def preferred_base_amount=(value); end

  def preferred_base_amount_default(); end

  def preferred_base_amount_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end

  def preferred_tiers(); end

  def preferred_tiers=(value); end

  def preferred_tiers_default(); end

  def preferred_tiers_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::TieredFlatRate::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::TieredFlatRate::GeneratedRelationMethods
end

class Spree::Calculator::TieredFlatRate::ActiveRecord_AssociationRelation
end

class Spree::Calculator::TieredFlatRate::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::TieredFlatRate::GeneratedRelationMethods
end

class Spree::Calculator::TieredFlatRate::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::TieredFlatRate::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::TieredFlatRate::GeneratedRelationMethods
end

class Spree::Calculator::TieredFlatRate::ActiveRecord_Relation
end

module Spree::Calculator::TieredFlatRate::GeneratedAssociationMethods
end

module Spree::Calculator::TieredFlatRate::GeneratedAssociationMethods
end

module Spree::Calculator::TieredFlatRate::GeneratedAttributeMethods
end

module Spree::Calculator::TieredFlatRate::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::TieredFlatRate::GeneratedRelationMethods
end

module Spree::Calculator::TieredFlatRate::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Calculator::TieredPercent
  include ::Spree::Calculator::TieredPercent::GeneratedAttributeMethods
  include ::Spree::Calculator::TieredPercent::GeneratedAssociationMethods
  def preferred_base_percent(); end

  def preferred_base_percent=(value); end

  def preferred_base_percent_default(); end

  def preferred_base_percent_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end

  def preferred_tiers(); end

  def preferred_tiers=(value); end

  def preferred_tiers_default(); end

  def preferred_tiers_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Calculator::TieredPercent::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::TieredPercent::GeneratedRelationMethods
end

class Spree::Calculator::TieredPercent::ActiveRecord_AssociationRelation
end

class Spree::Calculator::TieredPercent::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::TieredPercent::GeneratedRelationMethods
end

class Spree::Calculator::TieredPercent::ActiveRecord_Associations_CollectionProxy
end

class Spree::Calculator::TieredPercent::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::Calculator::TieredPercent::GeneratedRelationMethods
end

class Spree::Calculator::TieredPercent::ActiveRecord_Relation
end

module Spree::Calculator::TieredPercent::GeneratedAssociationMethods
end

module Spree::Calculator::TieredPercent::GeneratedAssociationMethods
end

module Spree::Calculator::TieredPercent::GeneratedAttributeMethods
end

module Spree::Calculator::TieredPercent::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Calculator::TieredPercent::GeneratedRelationMethods
end

module Spree::Calculator::TieredPercent::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Carton
  include ::Spree::Carton::GeneratedAttributeMethods
  include ::Spree::Carton::GeneratedAssociationMethods
  def after_add_for_inventory_units(); end

  def after_add_for_inventory_units=(val); end

  def after_add_for_inventory_units?(); end

  def after_add_for_orders(); end

  def after_add_for_orders=(val); end

  def after_add_for_orders?(); end

  def after_add_for_shipments(); end

  def after_add_for_shipments=(val); end

  def after_add_for_shipments?(); end

  def after_remove_for_inventory_units(); end

  def after_remove_for_inventory_units=(val); end

  def after_remove_for_inventory_units?(); end

  def after_remove_for_orders(); end

  def after_remove_for_orders=(val); end

  def after_remove_for_orders?(); end

  def after_remove_for_shipments(); end

  def after_remove_for_shipments=(val); end

  def after_remove_for_shipments?(); end

  def autosave_associated_records_for_address(*args); end

  def autosave_associated_records_for_inventory_units(*args); end

  def autosave_associated_records_for_orders(*args); end

  def autosave_associated_records_for_shipments(*args); end

  def autosave_associated_records_for_shipping_method(*args); end

  def autosave_associated_records_for_stock_location(*args); end

  def before_add_for_inventory_units(); end

  def before_add_for_inventory_units=(val); end

  def before_add_for_inventory_units?(); end

  def before_add_for_orders(); end

  def before_add_for_orders=(val); end

  def before_add_for_orders?(); end

  def before_add_for_shipments(); end

  def before_add_for_shipments=(val); end

  def before_add_for_shipments?(); end

  def before_remove_for_inventory_units(); end

  def before_remove_for_inventory_units=(val); end

  def before_remove_for_inventory_units?(); end

  def before_remove_for_orders(); end

  def before_remove_for_orders=(val); end

  def before_remove_for_orders?(); end

  def before_remove_for_shipments(); end

  def before_remove_for_shipments=(val); end

  def before_remove_for_shipments?(); end

  def validate_associated_records_for_inventory_units(*args); end

  def validate_associated_records_for_orders(*args); end

  def validate_associated_records_for_shipments(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Carton::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Carton::GeneratedRelationMethods
end

class Spree::Carton::ActiveRecord_AssociationRelation
end

class Spree::Carton::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Carton::GeneratedRelationMethods
end

class Spree::Carton::ActiveRecord_Associations_CollectionProxy
end

class Spree::Carton::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Carton::GeneratedRelationMethods
end

class Spree::Carton::ActiveRecord_Relation
end

module Spree::Carton::GeneratedAssociationMethods
  def address(); end

  def address=(value); end

  def build_address(*args, &block); end

  def build_shipping_method(*args, &block); end

  def build_stock_location(*args, &block); end

  def create_address(*args, &block); end

  def create_address!(*args, &block); end

  def create_shipping_method(*args, &block); end

  def create_shipping_method!(*args, &block); end

  def create_stock_location(*args, &block); end

  def create_stock_location!(*args, &block); end

  def inventory_unit_ids(); end

  def inventory_unit_ids=(ids); end

  def inventory_units(); end

  def inventory_units=(value); end

  def order_ids(); end

  def order_ids=(ids); end

  def orders(); end

  def orders=(value); end

  def reload_address(); end

  def reload_shipping_method(); end

  def reload_stock_location(); end

  def shipment_ids(); end

  def shipment_ids=(ids); end

  def shipments(); end

  def shipments=(value); end

  def shipping_method(); end

  def shipping_method=(value); end

  def stock_location(); end

  def stock_location=(value); end
end

module Spree::Carton::GeneratedAssociationMethods
end

module Spree::Carton::GeneratedAttributeMethods
end

module Spree::Carton::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Carton::GeneratedRelationMethods
  def reverse_chronological(*args, &block); end

  def trackable(*args, &block); end
end

module Spree::Carton::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Carton
  def self.after_add_for_inventory_units(); end

  def self.after_add_for_inventory_units=(val); end

  def self.after_add_for_inventory_units?(); end

  def self.after_add_for_orders(); end

  def self.after_add_for_orders=(val); end

  def self.after_add_for_orders?(); end

  def self.after_add_for_shipments(); end

  def self.after_add_for_shipments=(val); end

  def self.after_add_for_shipments?(); end

  def self.after_remove_for_inventory_units(); end

  def self.after_remove_for_inventory_units=(val); end

  def self.after_remove_for_inventory_units?(); end

  def self.after_remove_for_orders(); end

  def self.after_remove_for_orders=(val); end

  def self.after_remove_for_orders?(); end

  def self.after_remove_for_shipments(); end

  def self.after_remove_for_shipments=(val); end

  def self.after_remove_for_shipments?(); end

  def self.before_add_for_inventory_units(); end

  def self.before_add_for_inventory_units=(val); end

  def self.before_add_for_inventory_units?(); end

  def self.before_add_for_orders(); end

  def self.before_add_for_orders=(val); end

  def self.before_add_for_orders?(); end

  def self.before_add_for_shipments(); end

  def self.before_add_for_shipments=(val); end

  def self.before_add_for_shipments?(); end

  def self.before_remove_for_inventory_units(); end

  def self.before_remove_for_inventory_units=(val); end

  def self.before_remove_for_inventory_units?(); end

  def self.before_remove_for_orders(); end

  def self.before_remove_for_orders=(val); end

  def self.before_remove_for_orders?(); end

  def self.before_remove_for_shipments(); end

  def self.before_remove_for_shipments=(val); end

  def self.before_remove_for_shipments?(); end

  def self.reverse_chronological(*args); end

  def self.trackable(*args); end
end

class Spree::Classification
  include ::Spree::Classification::GeneratedAttributeMethods
  include ::Spree::Classification::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def autosave_associated_records_for_product(*args); end

  def autosave_associated_records_for_taxon(*args); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Classification::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Classification::GeneratedRelationMethods
end

class Spree::Classification::ActiveRecord_AssociationRelation
end

class Spree::Classification::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Classification::GeneratedRelationMethods
end

class Spree::Classification::ActiveRecord_Associations_CollectionProxy
end

class Spree::Classification::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Classification::GeneratedRelationMethods
end

class Spree::Classification::ActiveRecord_Relation
end

module Spree::Classification::GeneratedAssociationMethods
  def build_product(*args, &block); end

  def build_taxon(*args, &block); end

  def create_product(*args, &block); end

  def create_product!(*args, &block); end

  def create_taxon(*args, &block); end

  def create_taxon!(*args, &block); end

  def product(); end

  def product=(value); end

  def reload_product(); end

  def reload_taxon(); end

  def taxon(); end

  def taxon=(value); end
end

module Spree::Classification::GeneratedAssociationMethods
end

module Spree::Classification::GeneratedAttributeMethods
end

module Spree::Classification::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Classification::GeneratedRelationMethods
  def in_list(*args, &block); end
end

module Spree::Classification::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Classification
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::Core::ClassConstantizer::Set
  include ::Enumerable
  def <<(klass); end

  def clear(*args, &block); end

  def concat(klasses); end

  def delete(object); end

  def each(&blk); end

  def empty?(*args, &block); end
end

module Spree::Core::ControllerHelpers::StrongParameters
  def permitted_address_attributes(*args, &block); end

  def permitted_address_book_attributes(*args, &block); end

  def permitted_customer_return_attributes(*args, &block); end

  def permitted_image_attributes(*args, &block); end

  def permitted_inventory_unit_attributes(*args, &block); end

  def permitted_line_item_attributes(*args, &block); end

  def permitted_option_type_attributes(*args, &block); end

  def permitted_option_value_attributes(*args, &block); end

  def permitted_product_properties_attributes(*args, &block); end

  def permitted_property_attributes(*args, &block); end

  def permitted_return_authorization_attributes(*args, &block); end

  def permitted_shipment_attributes(*args, &block); end

  def permitted_stock_item_attributes(*args, &block); end

  def permitted_stock_location_attributes(*args, &block); end

  def permitted_stock_movement_attributes(*args, &block); end

  def permitted_store_attributes(*args, &block); end

  def permitted_taxon_attributes(*args, &block); end

  def permitted_taxonomy_attributes(*args, &block); end

  def permitted_variant_attributes(*args, &block); end
end

class Spree::Core::Environment
  def payment_methods(); end

  def payment_methods=(klasses); end

  def stock_splitters(); end

  def stock_splitters=(klasses); end
end

class Spree::Core::Environment::Calculators
  def promotion_actions_create_adjustments(); end

  def promotion_actions_create_adjustments=(klasses); end

  def promotion_actions_create_item_adjustments(); end

  def promotion_actions_create_item_adjustments=(klasses); end

  def promotion_actions_create_quantity_adjustments(); end

  def promotion_actions_create_quantity_adjustments=(klasses); end

  def shipping_methods(); end

  def shipping_methods=(klasses); end

  def tax_rates(); end

  def tax_rates=(klasses); end
end

class Spree::Core::Environment::Calculators
  extend ::Spree::Core::EnvironmentExtension::ClassMethods
end

class Spree::Core::Environment::Promotions
  def actions(); end

  def actions=(klasses); end

  def rules(); end

  def rules=(klasses); end

  def shipping_actions(); end

  def shipping_actions=(klasses); end
end

class Spree::Core::Environment::Promotions
  extend ::Spree::Core::EnvironmentExtension::ClassMethods
end

class Spree::Core::Environment
  extend ::Spree::Core::EnvironmentExtension::ClassMethods
end

module Spree::Core::EnvironmentExtension::ClassMethods
  def add_class_set(name); end
end

module Spree::Core::EnvironmentExtension::ClassMethods
end

class Spree::Country
  include ::Spree::Country::GeneratedAttributeMethods
  include ::Spree::Country::GeneratedAssociationMethods
  def after_add_for_addresses(); end

  def after_add_for_addresses=(val); end

  def after_add_for_addresses?(); end

  def after_add_for_prices(); end

  def after_add_for_prices=(val); end

  def after_add_for_prices?(); end

  def after_add_for_states(); end

  def after_add_for_states=(val); end

  def after_add_for_states?(); end

  def after_remove_for_addresses(); end

  def after_remove_for_addresses=(val); end

  def after_remove_for_addresses?(); end

  def after_remove_for_prices(); end

  def after_remove_for_prices=(val); end

  def after_remove_for_prices?(); end

  def after_remove_for_states(); end

  def after_remove_for_states=(val); end

  def after_remove_for_states?(); end

  def autosave_associated_records_for_addresses(*args); end

  def autosave_associated_records_for_prices(*args); end

  def autosave_associated_records_for_states(*args); end

  def before_add_for_addresses(); end

  def before_add_for_addresses=(val); end

  def before_add_for_addresses?(); end

  def before_add_for_prices(); end

  def before_add_for_prices=(val); end

  def before_add_for_prices?(); end

  def before_add_for_states(); end

  def before_add_for_states=(val); end

  def before_add_for_states?(); end

  def before_remove_for_addresses(); end

  def before_remove_for_addresses=(val); end

  def before_remove_for_addresses?(); end

  def before_remove_for_prices(); end

  def before_remove_for_prices=(val); end

  def before_remove_for_prices?(); end

  def before_remove_for_states(); end

  def before_remove_for_states=(val); end

  def before_remove_for_states?(); end

  def validate_associated_records_for_addresses(*args); end

  def validate_associated_records_for_prices(*args); end

  def validate_associated_records_for_states(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Country::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Country::GeneratedRelationMethods
end

class Spree::Country::ActiveRecord_AssociationRelation
end

class Spree::Country::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Country::GeneratedRelationMethods
end

class Spree::Country::ActiveRecord_Associations_CollectionProxy
end

class Spree::Country::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Country::GeneratedRelationMethods
end

class Spree::Country::ActiveRecord_Relation
end

module Spree::Country::GeneratedAssociationMethods
  def address_ids(); end

  def address_ids=(ids); end

  def addresses(); end

  def addresses=(value); end

  def price_ids(); end

  def price_ids=(ids); end

  def prices(); end

  def prices=(value); end

  def state_ids(); end

  def state_ids=(ids); end

  def states(); end

  def states=(value); end
end

module Spree::Country::GeneratedAssociationMethods
end

module Spree::Country::GeneratedAttributeMethods
end

module Spree::Country::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Country::GeneratedRelationMethods
end

module Spree::Country::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Country
  def self.after_add_for_addresses(); end

  def self.after_add_for_addresses=(val); end

  def self.after_add_for_addresses?(); end

  def self.after_add_for_prices(); end

  def self.after_add_for_prices=(val); end

  def self.after_add_for_prices?(); end

  def self.after_add_for_states(); end

  def self.after_add_for_states=(val); end

  def self.after_add_for_states?(); end

  def self.after_remove_for_addresses(); end

  def self.after_remove_for_addresses=(val); end

  def self.after_remove_for_addresses?(); end

  def self.after_remove_for_prices(); end

  def self.after_remove_for_prices=(val); end

  def self.after_remove_for_prices?(); end

  def self.after_remove_for_states(); end

  def self.after_remove_for_states=(val); end

  def self.after_remove_for_states?(); end

  def self.before_add_for_addresses(); end

  def self.before_add_for_addresses=(val); end

  def self.before_add_for_addresses?(); end

  def self.before_add_for_prices(); end

  def self.before_add_for_prices=(val); end

  def self.before_add_for_prices?(); end

  def self.before_add_for_states(); end

  def self.before_add_for_states=(val); end

  def self.before_add_for_states?(); end

  def self.before_remove_for_addresses(); end

  def self.before_remove_for_addresses=(val); end

  def self.before_remove_for_addresses?(); end

  def self.before_remove_for_prices(); end

  def self.before_remove_for_prices=(val); end

  def self.before_remove_for_prices?(); end

  def self.before_remove_for_states(); end

  def self.before_remove_for_states=(val); end

  def self.before_remove_for_states?(); end
end

class Spree::CreditCard
  include ::Spree::CreditCard::GeneratedAttributeMethods
  include ::Spree::CreditCard::GeneratedAssociationMethods
  def autosave_associated_records_for_address(*args); end

  def autosave_associated_records_for_user(*args); end

  def brand(*args); end

  def brand=(*args); end

  def brand?(*args); end

  def brand_before_last_save(*args); end

  def brand_before_type_cast(*args); end

  def brand_came_from_user?(*args); end

  def brand_change(*args); end

  def brand_change_to_be_saved(*args); end

  def brand_changed?(*args); end

  def brand_in_database(*args); end

  def brand_previous_change(*args); end

  def brand_previously_changed?(*args); end

  def brand_was(*args); end

  def brand_will_change!(*args); end

  def restore_brand!(*args); end

  def saved_change_to_brand(*args); end

  def saved_change_to_brand?(*args); end

  def validate_associated_records_for_address(*args); end

  def will_save_change_to_brand?(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::CreditCard::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::CreditCard::GeneratedRelationMethods
end

class Spree::CreditCard::ActiveRecord_AssociationRelation
end

class Spree::CreditCard::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::CreditCard::GeneratedRelationMethods
end

class Spree::CreditCard::ActiveRecord_Associations_CollectionProxy
end

class Spree::CreditCard::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::CreditCard::GeneratedRelationMethods
end

class Spree::CreditCard::ActiveRecord_Relation
end

module Spree::CreditCard::GeneratedAssociationMethods
  def address(); end

  def address=(value); end

  def address_attributes=(attributes); end

  def build_address(*args, &block); end

  def build_user(*args, &block); end

  def create_address(*args, &block); end

  def create_address!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_address(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Spree::CreditCard::GeneratedAssociationMethods
end

module Spree::CreditCard::GeneratedAttributeMethods
end

module Spree::CreditCard::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::CreditCard::GeneratedRelationMethods
  def with_payment_profile(*args, &block); end
end

module Spree::CreditCard::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::CreditCard
  def self.with_payment_profile(*args); end
end

class Spree::CustomUserGenerator
  extend ::Rails::Generators::Migration::ClassMethods
  extend ::ActiveRecord::Generators::Migration::ClassMethods
end

class Spree::CustomerReturn
  include ::Spree::CustomerReturn::GeneratedAttributeMethods
  include ::Spree::CustomerReturn::GeneratedAssociationMethods
  def after_add_for_reimbursements(); end

  def after_add_for_reimbursements=(val); end

  def after_add_for_reimbursements?(); end

  def after_add_for_return_authorizations(); end

  def after_add_for_return_authorizations=(val); end

  def after_add_for_return_authorizations?(); end

  def after_add_for_return_items(); end

  def after_add_for_return_items=(val); end

  def after_add_for_return_items?(); end

  def after_remove_for_reimbursements(); end

  def after_remove_for_reimbursements=(val); end

  def after_remove_for_reimbursements?(); end

  def after_remove_for_return_authorizations(); end

  def after_remove_for_return_authorizations=(val); end

  def after_remove_for_return_authorizations?(); end

  def after_remove_for_return_items(); end

  def after_remove_for_return_items=(val); end

  def after_remove_for_return_items?(); end

  def autosave_associated_records_for_reimbursements(*args); end

  def autosave_associated_records_for_return_authorizations(*args); end

  def autosave_associated_records_for_return_items(*args); end

  def autosave_associated_records_for_stock_location(*args); end

  def before_add_for_reimbursements(); end

  def before_add_for_reimbursements=(val); end

  def before_add_for_reimbursements?(); end

  def before_add_for_return_authorizations(); end

  def before_add_for_return_authorizations=(val); end

  def before_add_for_return_authorizations?(); end

  def before_add_for_return_items(); end

  def before_add_for_return_items=(val); end

  def before_add_for_return_items?(); end

  def before_remove_for_reimbursements(); end

  def before_remove_for_reimbursements=(val); end

  def before_remove_for_reimbursements?(); end

  def before_remove_for_return_authorizations(); end

  def before_remove_for_return_authorizations=(val); end

  def before_remove_for_return_authorizations?(); end

  def before_remove_for_return_items(); end

  def before_remove_for_return_items=(val); end

  def before_remove_for_return_items?(); end

  def display_amount(); end

  def display_pre_tax_total(*args, &block); end

  def display_total(); end

  def display_total_excluding_vat(); end

  def validate_associated_records_for_reimbursements(*args); end

  def validate_associated_records_for_return_authorizations(*args); end

  def validate_associated_records_for_return_items(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::CustomerReturn::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::CustomerReturn::GeneratedRelationMethods
end

class Spree::CustomerReturn::ActiveRecord_AssociationRelation
end

class Spree::CustomerReturn::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::CustomerReturn::GeneratedRelationMethods
end

class Spree::CustomerReturn::ActiveRecord_Associations_CollectionProxy
end

class Spree::CustomerReturn::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::CustomerReturn::GeneratedRelationMethods
end

class Spree::CustomerReturn::ActiveRecord_Relation
end

module Spree::CustomerReturn::GeneratedAssociationMethods
  def build_stock_location(*args, &block); end

  def create_stock_location(*args, &block); end

  def create_stock_location!(*args, &block); end

  def reimbursement_ids(); end

  def reimbursement_ids=(ids); end

  def reimbursements(); end

  def reimbursements=(value); end

  def reload_stock_location(); end

  def return_authorization_ids(); end

  def return_authorization_ids=(ids); end

  def return_authorizations(); end

  def return_authorizations=(value); end

  def return_item_ids(); end

  def return_item_ids=(ids); end

  def return_items(); end

  def return_items=(value); end

  def return_items_attributes=(attributes); end

  def stock_location(); end

  def stock_location=(value); end
end

module Spree::CustomerReturn::GeneratedAssociationMethods
end

module Spree::CustomerReturn::GeneratedAttributeMethods
end

module Spree::CustomerReturn::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::CustomerReturn::GeneratedRelationMethods
end

module Spree::CustomerReturn::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::CustomerReturn
  def self.after_add_for_reimbursements(); end

  def self.after_add_for_reimbursements=(val); end

  def self.after_add_for_reimbursements?(); end

  def self.after_add_for_return_authorizations(); end

  def self.after_add_for_return_authorizations=(val); end

  def self.after_add_for_return_authorizations?(); end

  def self.after_add_for_return_items(); end

  def self.after_add_for_return_items=(val); end

  def self.after_add_for_return_items?(); end

  def self.after_remove_for_reimbursements(); end

  def self.after_remove_for_reimbursements=(val); end

  def self.after_remove_for_reimbursements?(); end

  def self.after_remove_for_return_authorizations(); end

  def self.after_remove_for_return_authorizations=(val); end

  def self.after_remove_for_return_authorizations?(); end

  def self.after_remove_for_return_items(); end

  def self.after_remove_for_return_items=(val); end

  def self.after_remove_for_return_items?(); end

  def self.before_add_for_reimbursements(); end

  def self.before_add_for_reimbursements=(val); end

  def self.before_add_for_reimbursements?(); end

  def self.before_add_for_return_authorizations(); end

  def self.before_add_for_return_authorizations=(val); end

  def self.before_add_for_return_authorizations?(); end

  def self.before_add_for_return_items(); end

  def self.before_add_for_return_items=(val); end

  def self.before_add_for_return_items?(); end

  def self.before_remove_for_reimbursements(); end

  def self.before_remove_for_reimbursements=(val); end

  def self.before_remove_for_reimbursements?(); end

  def self.before_remove_for_return_authorizations(); end

  def self.before_remove_for_return_authorizations=(val); end

  def self.before_remove_for_return_authorizations?(); end

  def self.before_remove_for_return_items(); end

  def self.before_remove_for_return_items=(val); end

  def self.before_remove_for_return_items?(); end
end

class Spree::Exchange
  def model_name(*args, &block); end
end

class Spree::FrontendConfiguration
  def locale(); end

  def locale=(value); end

  def preferred_locale(); end

  def preferred_locale=(value); end

  def preferred_locale_default(); end

  def preferred_locale_type(); end

  def preferred_require_terms_and_conditions_acceptance(); end

  def preferred_require_terms_and_conditions_acceptance=(value); end

  def preferred_require_terms_and_conditions_acceptance_default(); end

  def preferred_require_terms_and_conditions_acceptance_type(); end

  def require_terms_and_conditions_acceptance(); end

  def require_terms_and_conditions_acceptance=(value); end
end

class Spree::FulfilmentChanger
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Spree::FulfilmentChanger
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Spree::Gateway
  include ::Spree::Gateway::GeneratedAttributeMethods
  include ::Spree::Gateway::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Gateway::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::GeneratedRelationMethods
end

class Spree::Gateway::ActiveRecord_AssociationRelation
end

class Spree::Gateway::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::GeneratedRelationMethods
end

class Spree::Gateway::ActiveRecord_Associations_CollectionProxy
end

class Spree::Gateway::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::GeneratedRelationMethods
end

class Spree::Gateway::ActiveRecord_Relation
end

class Spree::Gateway::Bogus
  include ::Spree::Gateway::Bogus::GeneratedAttributeMethods
  include ::Spree::Gateway::Bogus::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Gateway::Bogus::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::BogusCreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::Bogus::GeneratedRelationMethods
end

class Spree::Gateway::Bogus::ActiveRecord_AssociationRelation
end

class Spree::Gateway::Bogus::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::BogusCreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::Bogus::GeneratedRelationMethods
end

class Spree::Gateway::Bogus::ActiveRecord_Associations_CollectionProxy
end

class Spree::Gateway::Bogus::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::BogusCreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::Bogus::GeneratedRelationMethods
end

class Spree::Gateway::Bogus::ActiveRecord_Relation
end

module Spree::Gateway::Bogus::GeneratedAssociationMethods
end

module Spree::Gateway::Bogus::GeneratedAssociationMethods
end

module Spree::Gateway::Bogus::GeneratedAttributeMethods
end

module Spree::Gateway::Bogus::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Gateway::Bogus::GeneratedRelationMethods
end

module Spree::Gateway::Bogus::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Gateway::BogusSimple
  include ::Spree::Gateway::BogusSimple::GeneratedAttributeMethods
  include ::Spree::Gateway::BogusSimple::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Gateway::BogusSimple::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::BogusCreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::BogusSimple::GeneratedRelationMethods
end

class Spree::Gateway::BogusSimple::ActiveRecord_AssociationRelation
end

class Spree::Gateway::BogusSimple::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::BogusCreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::BogusSimple::GeneratedRelationMethods
end

class Spree::Gateway::BogusSimple::ActiveRecord_Associations_CollectionProxy
end

class Spree::Gateway::BogusSimple::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::BogusCreditCard::GeneratedRelationMethods
  include ::Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedRelationMethods
  include ::Spree::Gateway::BogusSimple::GeneratedRelationMethods
end

class Spree::Gateway::BogusSimple::ActiveRecord_Relation
end

module Spree::Gateway::BogusSimple::GeneratedAssociationMethods
end

module Spree::Gateway::BogusSimple::GeneratedAssociationMethods
end

module Spree::Gateway::BogusSimple::GeneratedAttributeMethods
end

module Spree::Gateway::BogusSimple::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Gateway::BogusSimple::GeneratedRelationMethods
end

module Spree::Gateway::BogusSimple::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree::Gateway::GeneratedAssociationMethods
end

module Spree::Gateway::GeneratedAssociationMethods
end

module Spree::Gateway::GeneratedAttributeMethods
end

module Spree::Gateway::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Gateway::GeneratedRelationMethods
end

module Spree::Gateway::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Image
  include ::Spree::Image::GeneratedAttributeMethods
  include ::Spree::Image::GeneratedAssociationMethods
  include ::Spree::Image::PaperclipAttachment
  def _attachment_post_process_callbacks(); end

  def _post_process_callbacks(); end

  def _run_attachment_post_process_callbacks(&block); end

  def _run_post_process_callbacks(&block); end

  def attachment(*args); end

  def attachment=(file); end

  def attachment?(); end

  def mini_url(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Image::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Asset::GeneratedRelationMethods
  include ::Spree::Image::GeneratedRelationMethods
end

class Spree::Image::ActiveRecord_AssociationRelation
end

class Spree::Image::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Asset::GeneratedRelationMethods
  include ::Spree::Image::GeneratedRelationMethods
end

class Spree::Image::ActiveRecord_Associations_CollectionProxy
end

class Spree::Image::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Asset::GeneratedRelationMethods
  include ::Spree::Image::GeneratedRelationMethods
end

class Spree::Image::ActiveRecord_Relation
end

module Spree::Image::GeneratedAssociationMethods
end

module Spree::Image::GeneratedAssociationMethods
end

module Spree::Image::GeneratedAttributeMethods
end

module Spree::Image::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Image::GeneratedRelationMethods
end

module Spree::Image::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Image
  extend ::Paperclip::HasAttachedFile::ClassMethods
  def self._attachment_post_process_callbacks(); end

  def self._attachment_post_process_callbacks=(value); end

  def self._post_process_callbacks(); end

  def self._post_process_callbacks=(value); end
end

class Spree::LegacyUser
  include ::Spree::LegacyUser::GeneratedAttributeMethods
  include ::Spree::LegacyUser::GeneratedAssociationMethods
  include ::Spree::UserAddressBook
  include ::Spree::UserPaymentSource
  include ::Spree::UserApiAuthentication
  include ::Spree::UserReporting
  def after_add_for_addresses(); end

  def after_add_for_addresses=(val); end

  def after_add_for_addresses?(); end

  def after_add_for_credit_cards(); end

  def after_add_for_credit_cards=(val); end

  def after_add_for_credit_cards?(); end

  def after_add_for_orders(); end

  def after_add_for_orders=(val); end

  def after_add_for_orders?(); end

  def after_add_for_role_users(); end

  def after_add_for_role_users=(val); end

  def after_add_for_role_users?(); end

  def after_add_for_spree_orders(); end

  def after_add_for_spree_orders=(val); end

  def after_add_for_spree_orders?(); end

  def after_add_for_spree_roles(); end

  def after_add_for_spree_roles=(val); end

  def after_add_for_spree_roles?(); end

  def after_add_for_stock_locations(); end

  def after_add_for_stock_locations=(val); end

  def after_add_for_stock_locations?(); end

  def after_add_for_store_credit_events(); end

  def after_add_for_store_credit_events=(val); end

  def after_add_for_store_credit_events?(); end

  def after_add_for_store_credits(); end

  def after_add_for_store_credits=(val); end

  def after_add_for_store_credits?(); end

  def after_add_for_user_addresses(); end

  def after_add_for_user_addresses=(val); end

  def after_add_for_user_addresses?(); end

  def after_add_for_user_stock_locations(); end

  def after_add_for_user_stock_locations=(val); end

  def after_add_for_user_stock_locations?(); end

  def after_add_for_wallet_payment_sources(); end

  def after_add_for_wallet_payment_sources=(val); end

  def after_add_for_wallet_payment_sources?(); end

  def after_remove_for_addresses(); end

  def after_remove_for_addresses=(val); end

  def after_remove_for_addresses?(); end

  def after_remove_for_credit_cards(); end

  def after_remove_for_credit_cards=(val); end

  def after_remove_for_credit_cards?(); end

  def after_remove_for_orders(); end

  def after_remove_for_orders=(val); end

  def after_remove_for_orders?(); end

  def after_remove_for_role_users(); end

  def after_remove_for_role_users=(val); end

  def after_remove_for_role_users?(); end

  def after_remove_for_spree_orders(); end

  def after_remove_for_spree_orders=(val); end

  def after_remove_for_spree_orders?(); end

  def after_remove_for_spree_roles(); end

  def after_remove_for_spree_roles=(val); end

  def after_remove_for_spree_roles?(); end

  def after_remove_for_stock_locations(); end

  def after_remove_for_stock_locations=(val); end

  def after_remove_for_stock_locations?(); end

  def after_remove_for_store_credit_events(); end

  def after_remove_for_store_credit_events=(val); end

  def after_remove_for_store_credit_events?(); end

  def after_remove_for_store_credits(); end

  def after_remove_for_store_credits=(val); end

  def after_remove_for_store_credits?(); end

  def after_remove_for_user_addresses(); end

  def after_remove_for_user_addresses=(val); end

  def after_remove_for_user_addresses?(); end

  def after_remove_for_user_stock_locations(); end

  def after_remove_for_user_stock_locations=(val); end

  def after_remove_for_user_stock_locations?(); end

  def after_remove_for_wallet_payment_sources(); end

  def after_remove_for_wallet_payment_sources=(val); end

  def after_remove_for_wallet_payment_sources?(); end

  def autosave_associated_records_for_addresses(*args); end

  def autosave_associated_records_for_bill_address(); end

  def autosave_associated_records_for_credit_cards(*args); end

  def autosave_associated_records_for_default_user_bill_address(); end

  def autosave_associated_records_for_default_user_ship_address(); end

  def autosave_associated_records_for_orders(*args); end

  def autosave_associated_records_for_role_users(*args); end

  def autosave_associated_records_for_ship_address(); end

  def autosave_associated_records_for_spree_orders(*args); end

  def autosave_associated_records_for_spree_roles(*args); end

  def autosave_associated_records_for_stock_locations(*args); end

  def autosave_associated_records_for_store_credit_events(*args); end

  def autosave_associated_records_for_store_credits(*args); end

  def autosave_associated_records_for_user_addresses(*args); end

  def autosave_associated_records_for_user_stock_locations(*args); end

  def autosave_associated_records_for_wallet_payment_sources(*args); end

  def before_add_for_addresses(); end

  def before_add_for_addresses=(val); end

  def before_add_for_addresses?(); end

  def before_add_for_credit_cards(); end

  def before_add_for_credit_cards=(val); end

  def before_add_for_credit_cards?(); end

  def before_add_for_orders(); end

  def before_add_for_orders=(val); end

  def before_add_for_orders?(); end

  def before_add_for_role_users(); end

  def before_add_for_role_users=(val); end

  def before_add_for_role_users?(); end

  def before_add_for_spree_orders(); end

  def before_add_for_spree_orders=(val); end

  def before_add_for_spree_orders?(); end

  def before_add_for_spree_roles(); end

  def before_add_for_spree_roles=(val); end

  def before_add_for_spree_roles?(); end

  def before_add_for_stock_locations(); end

  def before_add_for_stock_locations=(val); end

  def before_add_for_stock_locations?(); end

  def before_add_for_store_credit_events(); end

  def before_add_for_store_credit_events=(val); end

  def before_add_for_store_credit_events?(); end

  def before_add_for_store_credits(); end

  def before_add_for_store_credits=(val); end

  def before_add_for_store_credits?(); end

  def before_add_for_user_addresses(); end

  def before_add_for_user_addresses=(val); end

  def before_add_for_user_addresses?(); end

  def before_add_for_user_stock_locations(); end

  def before_add_for_user_stock_locations=(val); end

  def before_add_for_user_stock_locations?(); end

  def before_add_for_wallet_payment_sources(); end

  def before_add_for_wallet_payment_sources=(val); end

  def before_add_for_wallet_payment_sources?(); end

  def before_remove_for_addresses(); end

  def before_remove_for_addresses=(val); end

  def before_remove_for_addresses?(); end

  def before_remove_for_credit_cards(); end

  def before_remove_for_credit_cards=(val); end

  def before_remove_for_credit_cards?(); end

  def before_remove_for_orders(); end

  def before_remove_for_orders=(val); end

  def before_remove_for_orders?(); end

  def before_remove_for_role_users(); end

  def before_remove_for_role_users=(val); end

  def before_remove_for_role_users?(); end

  def before_remove_for_spree_orders(); end

  def before_remove_for_spree_orders=(val); end

  def before_remove_for_spree_orders?(); end

  def before_remove_for_spree_roles(); end

  def before_remove_for_spree_roles=(val); end

  def before_remove_for_spree_roles?(); end

  def before_remove_for_stock_locations(); end

  def before_remove_for_stock_locations=(val); end

  def before_remove_for_stock_locations?(); end

  def before_remove_for_store_credit_events(); end

  def before_remove_for_store_credit_events=(val); end

  def before_remove_for_store_credit_events?(); end

  def before_remove_for_store_credits(); end

  def before_remove_for_store_credits=(val); end

  def before_remove_for_store_credits?(); end

  def before_remove_for_user_addresses(); end

  def before_remove_for_user_addresses=(val); end

  def before_remove_for_user_addresses?(); end

  def before_remove_for_user_stock_locations(); end

  def before_remove_for_user_stock_locations=(val); end

  def before_remove_for_user_stock_locations?(); end

  def before_remove_for_wallet_payment_sources(); end

  def before_remove_for_wallet_payment_sources=(val); end

  def before_remove_for_wallet_payment_sources?(); end

  def display_total_available_store_credit(*args, &block); end

  def validate_associated_records_for_addresses(*args); end

  def validate_associated_records_for_credit_cards(*args); end

  def validate_associated_records_for_orders(*args); end

  def validate_associated_records_for_role_users(*args); end

  def validate_associated_records_for_spree_orders(*args); end

  def validate_associated_records_for_spree_roles(*args); end

  def validate_associated_records_for_stock_locations(*args); end

  def validate_associated_records_for_store_credit_events(*args); end

  def validate_associated_records_for_store_credits(*args); end

  def validate_associated_records_for_user_addresses(*args); end

  def validate_associated_records_for_user_stock_locations(*args); end

  def validate_associated_records_for_wallet_payment_sources(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::LegacyUser::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LegacyUser::GeneratedRelationMethods
end

class Spree::LegacyUser::ActiveRecord_AssociationRelation
end

class Spree::LegacyUser::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LegacyUser::GeneratedRelationMethods
end

class Spree::LegacyUser::ActiveRecord_Associations_CollectionProxy
end

class Spree::LegacyUser::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LegacyUser::GeneratedRelationMethods
end

class Spree::LegacyUser::ActiveRecord_Relation
end

module Spree::LegacyUser::GeneratedAssociationMethods
  def address_ids(); end

  def address_ids=(ids); end

  def addresses(); end

  def addresses=(value); end

  def bill_address(); end

  def bill_address=(value); end

  def build_default_user_bill_address(*args, &block); end

  def build_default_user_ship_address(*args, &block); end

  def create_default_user_bill_address(*args, &block); end

  def create_default_user_bill_address!(*args, &block); end

  def create_default_user_ship_address(*args, &block); end

  def create_default_user_ship_address!(*args, &block); end

  def credit_card_ids(); end

  def credit_card_ids=(ids); end

  def credit_cards(); end

  def credit_cards=(value); end

  def default_user_bill_address(); end

  def default_user_bill_address=(value); end

  def default_user_ship_address(); end

  def default_user_ship_address=(value); end

  def order_ids(); end

  def order_ids=(ids); end

  def orders(); end

  def orders=(value); end

  def reload_bill_address(); end

  def reload_default_user_bill_address(); end

  def reload_default_user_ship_address(); end

  def reload_ship_address(); end

  def role_user_ids(); end

  def role_user_ids=(ids); end

  def role_users(); end

  def role_users=(value); end

  def ship_address(); end

  def ship_address=(value); end

  def spree_order_ids(); end

  def spree_order_ids=(ids); end

  def spree_orders(); end

  def spree_orders=(value); end

  def spree_role_ids(); end

  def spree_role_ids=(ids); end

  def spree_roles(); end

  def spree_roles=(value); end

  def stock_location_ids(); end

  def stock_location_ids=(ids); end

  def stock_locations(); end

  def stock_locations=(value); end

  def store_credit_event_ids(); end

  def store_credit_event_ids=(ids); end

  def store_credit_events(); end

  def store_credit_events=(value); end

  def store_credit_ids(); end

  def store_credit_ids=(ids); end

  def store_credits(); end

  def store_credits=(value); end

  def user_address_ids(); end

  def user_address_ids=(ids); end

  def user_addresses(); end

  def user_addresses=(value); end

  def user_stock_location_ids(); end

  def user_stock_location_ids=(ids); end

  def user_stock_locations(); end

  def user_stock_locations=(value); end

  def wallet_payment_source_ids(); end

  def wallet_payment_source_ids=(ids); end

  def wallet_payment_sources(); end

  def wallet_payment_sources=(value); end
end

module Spree::LegacyUser::GeneratedAssociationMethods
end

module Spree::LegacyUser::GeneratedAttributeMethods
end

module Spree::LegacyUser::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::LegacyUser::GeneratedRelationMethods
end

module Spree::LegacyUser::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree::LegacyUser::UserAddressesAssociationExtension
  def find_first_by_address_values(address_attrs); end

  def mark_default(user_address, address_type: T.unsafe(nil)); end
end

module Spree::LegacyUser::UserAddressesAssociationExtension
end

class Spree::LegacyUser
  extend ::Spree::DisplayMoney
  def self.after_add_for_addresses(); end

  def self.after_add_for_addresses=(val); end

  def self.after_add_for_addresses?(); end

  def self.after_add_for_credit_cards(); end

  def self.after_add_for_credit_cards=(val); end

  def self.after_add_for_credit_cards?(); end

  def self.after_add_for_orders(); end

  def self.after_add_for_orders=(val); end

  def self.after_add_for_orders?(); end

  def self.after_add_for_role_users(); end

  def self.after_add_for_role_users=(val); end

  def self.after_add_for_role_users?(); end

  def self.after_add_for_spree_orders(); end

  def self.after_add_for_spree_orders=(val); end

  def self.after_add_for_spree_orders?(); end

  def self.after_add_for_spree_roles(); end

  def self.after_add_for_spree_roles=(val); end

  def self.after_add_for_spree_roles?(); end

  def self.after_add_for_stock_locations(); end

  def self.after_add_for_stock_locations=(val); end

  def self.after_add_for_stock_locations?(); end

  def self.after_add_for_store_credit_events(); end

  def self.after_add_for_store_credit_events=(val); end

  def self.after_add_for_store_credit_events?(); end

  def self.after_add_for_store_credits(); end

  def self.after_add_for_store_credits=(val); end

  def self.after_add_for_store_credits?(); end

  def self.after_add_for_user_addresses(); end

  def self.after_add_for_user_addresses=(val); end

  def self.after_add_for_user_addresses?(); end

  def self.after_add_for_user_stock_locations(); end

  def self.after_add_for_user_stock_locations=(val); end

  def self.after_add_for_user_stock_locations?(); end

  def self.after_add_for_wallet_payment_sources(); end

  def self.after_add_for_wallet_payment_sources=(val); end

  def self.after_add_for_wallet_payment_sources?(); end

  def self.after_remove_for_addresses(); end

  def self.after_remove_for_addresses=(val); end

  def self.after_remove_for_addresses?(); end

  def self.after_remove_for_credit_cards(); end

  def self.after_remove_for_credit_cards=(val); end

  def self.after_remove_for_credit_cards?(); end

  def self.after_remove_for_orders(); end

  def self.after_remove_for_orders=(val); end

  def self.after_remove_for_orders?(); end

  def self.after_remove_for_role_users(); end

  def self.after_remove_for_role_users=(val); end

  def self.after_remove_for_role_users?(); end

  def self.after_remove_for_spree_orders(); end

  def self.after_remove_for_spree_orders=(val); end

  def self.after_remove_for_spree_orders?(); end

  def self.after_remove_for_spree_roles(); end

  def self.after_remove_for_spree_roles=(val); end

  def self.after_remove_for_spree_roles?(); end

  def self.after_remove_for_stock_locations(); end

  def self.after_remove_for_stock_locations=(val); end

  def self.after_remove_for_stock_locations?(); end

  def self.after_remove_for_store_credit_events(); end

  def self.after_remove_for_store_credit_events=(val); end

  def self.after_remove_for_store_credit_events?(); end

  def self.after_remove_for_store_credits(); end

  def self.after_remove_for_store_credits=(val); end

  def self.after_remove_for_store_credits?(); end

  def self.after_remove_for_user_addresses(); end

  def self.after_remove_for_user_addresses=(val); end

  def self.after_remove_for_user_addresses?(); end

  def self.after_remove_for_user_stock_locations(); end

  def self.after_remove_for_user_stock_locations=(val); end

  def self.after_remove_for_user_stock_locations?(); end

  def self.after_remove_for_wallet_payment_sources(); end

  def self.after_remove_for_wallet_payment_sources=(val); end

  def self.after_remove_for_wallet_payment_sources?(); end

  def self.before_add_for_addresses(); end

  def self.before_add_for_addresses=(val); end

  def self.before_add_for_addresses?(); end

  def self.before_add_for_credit_cards(); end

  def self.before_add_for_credit_cards=(val); end

  def self.before_add_for_credit_cards?(); end

  def self.before_add_for_orders(); end

  def self.before_add_for_orders=(val); end

  def self.before_add_for_orders?(); end

  def self.before_add_for_role_users(); end

  def self.before_add_for_role_users=(val); end

  def self.before_add_for_role_users?(); end

  def self.before_add_for_spree_orders(); end

  def self.before_add_for_spree_orders=(val); end

  def self.before_add_for_spree_orders?(); end

  def self.before_add_for_spree_roles(); end

  def self.before_add_for_spree_roles=(val); end

  def self.before_add_for_spree_roles?(); end

  def self.before_add_for_stock_locations(); end

  def self.before_add_for_stock_locations=(val); end

  def self.before_add_for_stock_locations?(); end

  def self.before_add_for_store_credit_events(); end

  def self.before_add_for_store_credit_events=(val); end

  def self.before_add_for_store_credit_events?(); end

  def self.before_add_for_store_credits(); end

  def self.before_add_for_store_credits=(val); end

  def self.before_add_for_store_credits?(); end

  def self.before_add_for_user_addresses(); end

  def self.before_add_for_user_addresses=(val); end

  def self.before_add_for_user_addresses?(); end

  def self.before_add_for_user_stock_locations(); end

  def self.before_add_for_user_stock_locations=(val); end

  def self.before_add_for_user_stock_locations?(); end

  def self.before_add_for_wallet_payment_sources(); end

  def self.before_add_for_wallet_payment_sources=(val); end

  def self.before_add_for_wallet_payment_sources?(); end

  def self.before_remove_for_addresses(); end

  def self.before_remove_for_addresses=(val); end

  def self.before_remove_for_addresses?(); end

  def self.before_remove_for_credit_cards(); end

  def self.before_remove_for_credit_cards=(val); end

  def self.before_remove_for_credit_cards?(); end

  def self.before_remove_for_orders(); end

  def self.before_remove_for_orders=(val); end

  def self.before_remove_for_orders?(); end

  def self.before_remove_for_role_users(); end

  def self.before_remove_for_role_users=(val); end

  def self.before_remove_for_role_users?(); end

  def self.before_remove_for_spree_orders(); end

  def self.before_remove_for_spree_orders=(val); end

  def self.before_remove_for_spree_orders?(); end

  def self.before_remove_for_spree_roles(); end

  def self.before_remove_for_spree_roles=(val); end

  def self.before_remove_for_spree_roles?(); end

  def self.before_remove_for_stock_locations(); end

  def self.before_remove_for_stock_locations=(val); end

  def self.before_remove_for_stock_locations?(); end

  def self.before_remove_for_store_credit_events(); end

  def self.before_remove_for_store_credit_events=(val); end

  def self.before_remove_for_store_credit_events?(); end

  def self.before_remove_for_store_credits(); end

  def self.before_remove_for_store_credits=(val); end

  def self.before_remove_for_store_credits?(); end

  def self.before_remove_for_user_addresses(); end

  def self.before_remove_for_user_addresses=(val); end

  def self.before_remove_for_user_addresses?(); end

  def self.before_remove_for_user_stock_locations(); end

  def self.before_remove_for_user_stock_locations=(val); end

  def self.before_remove_for_user_stock_locations?(); end

  def self.before_remove_for_wallet_payment_sources(); end

  def self.before_remove_for_wallet_payment_sources=(val); end

  def self.before_remove_for_wallet_payment_sources?(); end
end

class Spree::LineItem
  include ::Spree::LineItem::GeneratedAttributeMethods
  include ::Spree::LineItem::GeneratedAssociationMethods
  def after_add_for_actions(); end

  def after_add_for_actions=(val); end

  def after_add_for_actions?(); end

  def after_add_for_adjustments(); end

  def after_add_for_adjustments=(val); end

  def after_add_for_adjustments?(); end

  def after_add_for_inventory_units(); end

  def after_add_for_inventory_units=(val); end

  def after_add_for_inventory_units?(); end

  def after_add_for_line_item_actions(); end

  def after_add_for_line_item_actions=(val); end

  def after_add_for_line_item_actions?(); end

  def after_remove_for_actions(); end

  def after_remove_for_actions=(val); end

  def after_remove_for_actions?(); end

  def after_remove_for_adjustments(); end

  def after_remove_for_adjustments=(val); end

  def after_remove_for_adjustments?(); end

  def after_remove_for_inventory_units(); end

  def after_remove_for_inventory_units=(val); end

  def after_remove_for_inventory_units?(); end

  def after_remove_for_line_item_actions(); end

  def after_remove_for_line_item_actions=(val); end

  def after_remove_for_line_item_actions?(); end

  def autosave_associated_records_for_actions(*args); end

  def autosave_associated_records_for_adjustments(*args); end

  def autosave_associated_records_for_inventory_units(*args); end

  def autosave_associated_records_for_line_item_actions(*args); end

  def autosave_associated_records_for_order(*args); end

  def autosave_associated_records_for_product(); end

  def autosave_associated_records_for_tax_category(*args); end

  def autosave_associated_records_for_variant(*args); end

  def before_add_for_actions(); end

  def before_add_for_actions=(val); end

  def before_add_for_actions?(); end

  def before_add_for_adjustments(); end

  def before_add_for_adjustments=(val); end

  def before_add_for_adjustments?(); end

  def before_add_for_inventory_units(); end

  def before_add_for_inventory_units=(val); end

  def before_add_for_inventory_units?(); end

  def before_add_for_line_item_actions(); end

  def before_add_for_line_item_actions=(val); end

  def before_add_for_line_item_actions?(); end

  def before_remove_for_actions(); end

  def before_remove_for_actions=(val); end

  def before_remove_for_actions?(); end

  def before_remove_for_adjustments(); end

  def before_remove_for_adjustments=(val); end

  def before_remove_for_adjustments?(); end

  def before_remove_for_inventory_units(); end

  def before_remove_for_inventory_units=(val); end

  def before_remove_for_inventory_units?(); end

  def before_remove_for_line_item_actions(); end

  def before_remove_for_line_item_actions=(val); end

  def before_remove_for_line_item_actions?(); end

  def display_additional_tax_total(); end

  def display_amount(); end

  def display_discounted_amount(*args, &block); end

  def display_included_tax_total(); end

  def display_price(); end

  def display_total_before_tax(); end

  def display_total_excluding_vat(); end

  def validate_associated_records_for_actions(*args); end

  def validate_associated_records_for_adjustments(*args); end

  def validate_associated_records_for_inventory_units(*args); end

  def validate_associated_records_for_line_item_actions(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::LineItem::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LineItem::GeneratedRelationMethods
end

class Spree::LineItem::ActiveRecord_AssociationRelation
end

class Spree::LineItem::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LineItem::GeneratedRelationMethods
end

class Spree::LineItem::ActiveRecord_Associations_CollectionProxy
end

class Spree::LineItem::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LineItem::GeneratedRelationMethods
end

class Spree::LineItem::ActiveRecord_Relation
end

module Spree::LineItem::GeneratedAssociationMethods
  def action_ids(); end

  def action_ids=(ids); end

  def actions(); end

  def actions=(value); end

  def adjustment_ids(); end

  def adjustment_ids=(ids); end

  def adjustments(); end

  def adjustments=(value); end

  def build_order(*args, &block); end

  def build_tax_category(*args, &block); end

  def build_variant(*args, &block); end

  def create_order(*args, &block); end

  def create_order!(*args, &block); end

  def create_tax_category(*args, &block); end

  def create_tax_category!(*args, &block); end

  def create_variant(*args, &block); end

  def create_variant!(*args, &block); end

  def inventory_unit_ids(); end

  def inventory_unit_ids=(ids); end

  def inventory_units(); end

  def inventory_units=(value); end

  def line_item_action_ids(); end

  def line_item_action_ids=(ids); end

  def line_item_actions(); end

  def line_item_actions=(value); end

  def order(); end

  def order=(value); end

  def product(); end

  def product=(value); end

  def reload_order(); end

  def reload_product(); end

  def reload_tax_category(); end

  def reload_variant(); end

  def tax_category(); end

  def tax_category=(value); end

  def variant(); end

  def variant=(value); end
end

module Spree::LineItem::GeneratedAssociationMethods
end

module Spree::LineItem::GeneratedAttributeMethods
end

module Spree::LineItem::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::LineItem::GeneratedRelationMethods
end

module Spree::LineItem::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::LineItem
  extend ::Spree::DisplayMoney
  def self.after_add_for_actions(); end

  def self.after_add_for_actions=(val); end

  def self.after_add_for_actions?(); end

  def self.after_add_for_adjustments(); end

  def self.after_add_for_adjustments=(val); end

  def self.after_add_for_adjustments?(); end

  def self.after_add_for_inventory_units(); end

  def self.after_add_for_inventory_units=(val); end

  def self.after_add_for_inventory_units?(); end

  def self.after_add_for_line_item_actions(); end

  def self.after_add_for_line_item_actions=(val); end

  def self.after_add_for_line_item_actions?(); end

  def self.after_remove_for_actions(); end

  def self.after_remove_for_actions=(val); end

  def self.after_remove_for_actions?(); end

  def self.after_remove_for_adjustments(); end

  def self.after_remove_for_adjustments=(val); end

  def self.after_remove_for_adjustments?(); end

  def self.after_remove_for_inventory_units(); end

  def self.after_remove_for_inventory_units=(val); end

  def self.after_remove_for_inventory_units?(); end

  def self.after_remove_for_line_item_actions(); end

  def self.after_remove_for_line_item_actions=(val); end

  def self.after_remove_for_line_item_actions?(); end

  def self.before_add_for_actions(); end

  def self.before_add_for_actions=(val); end

  def self.before_add_for_actions?(); end

  def self.before_add_for_adjustments(); end

  def self.before_add_for_adjustments=(val); end

  def self.before_add_for_adjustments?(); end

  def self.before_add_for_inventory_units(); end

  def self.before_add_for_inventory_units=(val); end

  def self.before_add_for_inventory_units?(); end

  def self.before_add_for_line_item_actions(); end

  def self.before_add_for_line_item_actions=(val); end

  def self.before_add_for_line_item_actions?(); end

  def self.before_remove_for_actions(); end

  def self.before_remove_for_actions=(val); end

  def self.before_remove_for_actions?(); end

  def self.before_remove_for_adjustments(); end

  def self.before_remove_for_adjustments=(val); end

  def self.before_remove_for_adjustments?(); end

  def self.before_remove_for_inventory_units(); end

  def self.before_remove_for_inventory_units=(val); end

  def self.before_remove_for_inventory_units?(); end

  def self.before_remove_for_line_item_actions(); end

  def self.before_remove_for_line_item_actions=(val); end

  def self.before_remove_for_line_item_actions?(); end
end

class Spree::LineItemAction
  include ::Spree::LineItemAction::GeneratedAttributeMethods
  include ::Spree::LineItemAction::GeneratedAssociationMethods
  def autosave_associated_records_for_action(*args); end

  def autosave_associated_records_for_line_item(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::LineItemAction::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LineItemAction::GeneratedRelationMethods
end

class Spree::LineItemAction::ActiveRecord_AssociationRelation
end

class Spree::LineItemAction::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LineItemAction::GeneratedRelationMethods
end

class Spree::LineItemAction::ActiveRecord_Associations_CollectionProxy
end

class Spree::LineItemAction::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LineItemAction::GeneratedRelationMethods
end

class Spree::LineItemAction::ActiveRecord_Relation
end

module Spree::LineItemAction::GeneratedAssociationMethods
  def action(); end

  def action=(value); end

  def build_action(*args, &block); end

  def build_line_item(*args, &block); end

  def create_action(*args, &block); end

  def create_action!(*args, &block); end

  def create_line_item(*args, &block); end

  def create_line_item!(*args, &block); end

  def line_item(); end

  def line_item=(value); end

  def reload_action(); end

  def reload_line_item(); end
end

module Spree::LineItemAction::GeneratedAssociationMethods
end

module Spree::LineItemAction::GeneratedAttributeMethods
end

module Spree::LineItemAction::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::LineItemAction::GeneratedRelationMethods
end

module Spree::LineItemAction::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::LogEntry
  include ::Spree::LogEntry::GeneratedAttributeMethods
  include ::Spree::LogEntry::GeneratedAssociationMethods
  def autosave_associated_records_for_source(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::LogEntry::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LogEntry::GeneratedRelationMethods
end

class Spree::LogEntry::ActiveRecord_AssociationRelation
end

class Spree::LogEntry::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LogEntry::GeneratedRelationMethods
end

class Spree::LogEntry::ActiveRecord_Associations_CollectionProxy
end

class Spree::LogEntry::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::LogEntry::GeneratedRelationMethods
end

class Spree::LogEntry::ActiveRecord_Relation
end

module Spree::LogEntry::GeneratedAssociationMethods
  def reload_source(); end

  def source(); end

  def source=(value); end
end

module Spree::LogEntry::GeneratedAssociationMethods
end

module Spree::LogEntry::GeneratedAttributeMethods
end

module Spree::LogEntry::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::LogEntry::GeneratedRelationMethods
end

module Spree::LogEntry::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree::MailerSubscriber
  include ::Spree::Event::Subscriber
  def event_actions(); end

  def event_actions=(obj); end

  def order_finalized_handler(); end

  def order_finalized_handler=(obj); end

  def send_reimbursement_email_handler(); end

  def send_reimbursement_email_handler=(obj); end
end

module Spree::MailerSubscriber
  extend ::Spree::MailerSubscriber
  extend ::Spree::Event::Subscriber
end

class Spree::OptionType
  include ::Spree::OptionType::GeneratedAttributeMethods
  include ::Spree::OptionType::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def after_add_for_option_values(); end

  def after_add_for_option_values=(val); end

  def after_add_for_option_values?(); end

  def after_add_for_product_option_types(); end

  def after_add_for_product_option_types=(val); end

  def after_add_for_product_option_types?(); end

  def after_add_for_products(); end

  def after_add_for_products=(val); end

  def after_add_for_products?(); end

  def after_remove_for_option_values(); end

  def after_remove_for_option_values=(val); end

  def after_remove_for_option_values?(); end

  def after_remove_for_product_option_types(); end

  def after_remove_for_product_option_types=(val); end

  def after_remove_for_product_option_types?(); end

  def after_remove_for_products(); end

  def after_remove_for_products=(val); end

  def after_remove_for_products?(); end

  def autosave_associated_records_for_option_values(*args); end

  def autosave_associated_records_for_product_option_types(*args); end

  def autosave_associated_records_for_products(*args); end

  def before_add_for_option_values(); end

  def before_add_for_option_values=(val); end

  def before_add_for_option_values?(); end

  def before_add_for_product_option_types(); end

  def before_add_for_product_option_types=(val); end

  def before_add_for_product_option_types?(); end

  def before_add_for_products(); end

  def before_add_for_products=(val); end

  def before_add_for_products?(); end

  def before_remove_for_option_values(); end

  def before_remove_for_option_values=(val); end

  def before_remove_for_option_values?(); end

  def before_remove_for_product_option_types(); end

  def before_remove_for_product_option_types=(val); end

  def before_remove_for_product_option_types?(); end

  def before_remove_for_products(); end

  def before_remove_for_products=(val); end

  def before_remove_for_products?(); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end

  def validate_associated_records_for_option_values(*args); end

  def validate_associated_records_for_product_option_types(*args); end

  def validate_associated_records_for_products(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::OptionType::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionType::GeneratedRelationMethods
end

class Spree::OptionType::ActiveRecord_AssociationRelation
end

class Spree::OptionType::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionType::GeneratedRelationMethods
end

class Spree::OptionType::ActiveRecord_Associations_CollectionProxy
end

class Spree::OptionType::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionType::GeneratedRelationMethods
end

class Spree::OptionType::ActiveRecord_Relation
end

module Spree::OptionType::GeneratedAssociationMethods
  def option_value_ids(); end

  def option_value_ids=(ids); end

  def option_values(); end

  def option_values=(value); end

  def option_values_attributes=(attributes); end

  def product_ids(); end

  def product_ids=(ids); end

  def product_option_type_ids(); end

  def product_option_type_ids=(ids); end

  def product_option_types(); end

  def product_option_types=(value); end

  def products(); end

  def products=(value); end
end

module Spree::OptionType::GeneratedAssociationMethods
end

module Spree::OptionType::GeneratedAttributeMethods
end

module Spree::OptionType::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::OptionType::GeneratedRelationMethods
  def in_list(*args, &block); end
end

module Spree::OptionType::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::OptionType
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.after_add_for_option_values(); end

  def self.after_add_for_option_values=(val); end

  def self.after_add_for_option_values?(); end

  def self.after_add_for_product_option_types(); end

  def self.after_add_for_product_option_types=(val); end

  def self.after_add_for_product_option_types?(); end

  def self.after_add_for_products(); end

  def self.after_add_for_products=(val); end

  def self.after_add_for_products?(); end

  def self.after_remove_for_option_values(); end

  def self.after_remove_for_option_values=(val); end

  def self.after_remove_for_option_values?(); end

  def self.after_remove_for_product_option_types(); end

  def self.after_remove_for_product_option_types=(val); end

  def self.after_remove_for_product_option_types?(); end

  def self.after_remove_for_products(); end

  def self.after_remove_for_products=(val); end

  def self.after_remove_for_products?(); end

  def self.before_add_for_option_values(); end

  def self.before_add_for_option_values=(val); end

  def self.before_add_for_option_values?(); end

  def self.before_add_for_product_option_types(); end

  def self.before_add_for_product_option_types=(val); end

  def self.before_add_for_product_option_types?(); end

  def self.before_add_for_products(); end

  def self.before_add_for_products=(val); end

  def self.before_add_for_products?(); end

  def self.before_remove_for_option_values(); end

  def self.before_remove_for_option_values=(val); end

  def self.before_remove_for_option_values?(); end

  def self.before_remove_for_product_option_types(); end

  def self.before_remove_for_product_option_types=(val); end

  def self.before_remove_for_product_option_types?(); end

  def self.before_remove_for_products(); end

  def self.before_remove_for_products=(val); end

  def self.before_remove_for_products?(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::OptionValue
  include ::Spree::OptionValue::GeneratedAttributeMethods
  include ::Spree::OptionValue::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def after_add_for_option_values_variants(); end

  def after_add_for_option_values_variants=(val); end

  def after_add_for_option_values_variants?(); end

  def after_add_for_variants(); end

  def after_add_for_variants=(val); end

  def after_add_for_variants?(); end

  def after_remove_for_option_values_variants(); end

  def after_remove_for_option_values_variants=(val); end

  def after_remove_for_option_values_variants?(); end

  def after_remove_for_variants(); end

  def after_remove_for_variants=(val); end

  def after_remove_for_variants?(); end

  def autosave_associated_records_for_option_type(*args); end

  def autosave_associated_records_for_option_values_variants(*args); end

  def autosave_associated_records_for_variants(*args); end

  def before_add_for_option_values_variants(); end

  def before_add_for_option_values_variants=(val); end

  def before_add_for_option_values_variants?(); end

  def before_add_for_variants(); end

  def before_add_for_variants=(val); end

  def before_add_for_variants?(); end

  def before_remove_for_option_values_variants(); end

  def before_remove_for_option_values_variants=(val); end

  def before_remove_for_option_values_variants?(); end

  def before_remove_for_variants(); end

  def before_remove_for_variants=(val); end

  def before_remove_for_variants?(); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end

  def validate_associated_records_for_option_values_variants(*args); end

  def validate_associated_records_for_variants(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::OptionValue::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionValue::GeneratedRelationMethods
end

class Spree::OptionValue::ActiveRecord_AssociationRelation
end

class Spree::OptionValue::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionValue::GeneratedRelationMethods
end

class Spree::OptionValue::ActiveRecord_Associations_CollectionProxy
end

class Spree::OptionValue::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionValue::GeneratedRelationMethods
end

class Spree::OptionValue::ActiveRecord_Relation
end

module Spree::OptionValue::GeneratedAssociationMethods
  def build_option_type(*args, &block); end

  def create_option_type(*args, &block); end

  def create_option_type!(*args, &block); end

  def option_type(); end

  def option_type=(value); end

  def option_values_variant_ids(); end

  def option_values_variant_ids=(ids); end

  def option_values_variants(); end

  def option_values_variants=(value); end

  def reload_option_type(); end

  def variant_ids(); end

  def variant_ids=(ids); end

  def variants(); end

  def variants=(value); end
end

module Spree::OptionValue::GeneratedAssociationMethods
end

module Spree::OptionValue::GeneratedAttributeMethods
end

module Spree::OptionValue::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::OptionValue::GeneratedRelationMethods
  def in_list(*args, &block); end
end

module Spree::OptionValue::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::OptionValue
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.after_add_for_option_values_variants(); end

  def self.after_add_for_option_values_variants=(val); end

  def self.after_add_for_option_values_variants?(); end

  def self.after_add_for_variants(); end

  def self.after_add_for_variants=(val); end

  def self.after_add_for_variants?(); end

  def self.after_remove_for_option_values_variants(); end

  def self.after_remove_for_option_values_variants=(val); end

  def self.after_remove_for_option_values_variants?(); end

  def self.after_remove_for_variants(); end

  def self.after_remove_for_variants=(val); end

  def self.after_remove_for_variants?(); end

  def self.before_add_for_option_values_variants(); end

  def self.before_add_for_option_values_variants=(val); end

  def self.before_add_for_option_values_variants?(); end

  def self.before_add_for_variants(); end

  def self.before_add_for_variants=(val); end

  def self.before_add_for_variants?(); end

  def self.before_remove_for_option_values_variants(); end

  def self.before_remove_for_option_values_variants=(val); end

  def self.before_remove_for_option_values_variants?(); end

  def self.before_remove_for_variants(); end

  def self.before_remove_for_variants=(val); end

  def self.before_remove_for_variants?(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::OptionValuesVariant
  include ::Spree::OptionValuesVariant::GeneratedAttributeMethods
  include ::Spree::OptionValuesVariant::GeneratedAssociationMethods
  def autosave_associated_records_for_option_value(*args); end

  def autosave_associated_records_for_variant(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::OptionValuesVariant::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionValuesVariant::GeneratedRelationMethods
end

class Spree::OptionValuesVariant::ActiveRecord_AssociationRelation
end

class Spree::OptionValuesVariant::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionValuesVariant::GeneratedRelationMethods
end

class Spree::OptionValuesVariant::ActiveRecord_Associations_CollectionProxy
end

class Spree::OptionValuesVariant::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OptionValuesVariant::GeneratedRelationMethods
end

class Spree::OptionValuesVariant::ActiveRecord_Relation
end

module Spree::OptionValuesVariant::GeneratedAssociationMethods
  def build_option_value(*args, &block); end

  def build_variant(*args, &block); end

  def create_option_value(*args, &block); end

  def create_option_value!(*args, &block); end

  def create_variant(*args, &block); end

  def create_variant!(*args, &block); end

  def option_value(); end

  def option_value=(value); end

  def reload_option_value(); end

  def reload_variant(); end

  def variant(); end

  def variant=(value); end
end

module Spree::OptionValuesVariant::GeneratedAssociationMethods
end

module Spree::OptionValuesVariant::GeneratedAttributeMethods
end

module Spree::OptionValuesVariant::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::OptionValuesVariant::GeneratedRelationMethods
end

module Spree::OptionValuesVariant::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Order
  include ::Spree::Order::GeneratedAttributeMethods
  include ::Spree::Order::GeneratedAssociationMethods
  include ::Spree::Core::StateMachines::Order
  include ::Spree::Order::Payments
  include ::StateMachines::InstanceMethods
  def add_default_payment_from_wallet(); end

  def add_payment_sources_to_wallet(); end

  def add_store_credit_payments(); end

  def after_add_for_adjustments(); end

  def after_add_for_adjustments=(val); end

  def after_add_for_adjustments?(); end

  def after_add_for_all_adjustments(); end

  def after_add_for_all_adjustments=(val); end

  def after_add_for_all_adjustments?(); end

  def after_add_for_cartons(); end

  def after_add_for_cartons=(val); end

  def after_add_for_cartons?(); end

  def after_add_for_customer_returns(); end

  def after_add_for_customer_returns=(val); end

  def after_add_for_customer_returns?(); end

  def after_add_for_inventory_units(); end

  def after_add_for_inventory_units=(val); end

  def after_add_for_inventory_units?(); end

  def after_add_for_line_item_adjustments(); end

  def after_add_for_line_item_adjustments=(val); end

  def after_add_for_line_item_adjustments?(); end

  def after_add_for_line_items(); end

  def after_add_for_line_items=(val); end

  def after_add_for_line_items?(); end

  def after_add_for_order_promotions(); end

  def after_add_for_order_promotions=(val); end

  def after_add_for_order_promotions?(); end

  def after_add_for_payments(); end

  def after_add_for_payments=(val); end

  def after_add_for_payments?(); end

  def after_add_for_products(); end

  def after_add_for_products=(val); end

  def after_add_for_products?(); end

  def after_add_for_promotions(); end

  def after_add_for_promotions=(val); end

  def after_add_for_promotions?(); end

  def after_add_for_refunds(); end

  def after_add_for_refunds=(val); end

  def after_add_for_refunds?(); end

  def after_add_for_reimbursements(); end

  def after_add_for_reimbursements=(val); end

  def after_add_for_reimbursements?(); end

  def after_add_for_return_authorizations(); end

  def after_add_for_return_authorizations=(val); end

  def after_add_for_return_authorizations?(); end

  def after_add_for_return_items(); end

  def after_add_for_return_items=(val); end

  def after_add_for_return_items?(); end

  def after_add_for_shipment_adjustments(); end

  def after_add_for_shipment_adjustments=(val); end

  def after_add_for_shipment_adjustments?(); end

  def after_add_for_shipments(); end

  def after_add_for_shipments=(val); end

  def after_add_for_shipments?(); end

  def after_add_for_state_changes(); end

  def after_add_for_state_changes=(val); end

  def after_add_for_state_changes?(); end

  def after_add_for_valid_store_credit_payments(); end

  def after_add_for_valid_store_credit_payments=(val); end

  def after_add_for_valid_store_credit_payments?(); end

  def after_add_for_variants(); end

  def after_add_for_variants=(val); end

  def after_add_for_variants?(); end

  def after_remove_for_adjustments(); end

  def after_remove_for_adjustments=(val); end

  def after_remove_for_adjustments?(); end

  def after_remove_for_all_adjustments(); end

  def after_remove_for_all_adjustments=(val); end

  def after_remove_for_all_adjustments?(); end

  def after_remove_for_cartons(); end

  def after_remove_for_cartons=(val); end

  def after_remove_for_cartons?(); end

  def after_remove_for_customer_returns(); end

  def after_remove_for_customer_returns=(val); end

  def after_remove_for_customer_returns?(); end

  def after_remove_for_inventory_units(); end

  def after_remove_for_inventory_units=(val); end

  def after_remove_for_inventory_units?(); end

  def after_remove_for_line_item_adjustments(); end

  def after_remove_for_line_item_adjustments=(val); end

  def after_remove_for_line_item_adjustments?(); end

  def after_remove_for_line_items(); end

  def after_remove_for_line_items=(val); end

  def after_remove_for_line_items?(); end

  def after_remove_for_order_promotions(); end

  def after_remove_for_order_promotions=(val); end

  def after_remove_for_order_promotions?(); end

  def after_remove_for_payments(); end

  def after_remove_for_payments=(val); end

  def after_remove_for_payments?(); end

  def after_remove_for_products(); end

  def after_remove_for_products=(val); end

  def after_remove_for_products?(); end

  def after_remove_for_promotions(); end

  def after_remove_for_promotions=(val); end

  def after_remove_for_promotions?(); end

  def after_remove_for_refunds(); end

  def after_remove_for_refunds=(val); end

  def after_remove_for_refunds?(); end

  def after_remove_for_reimbursements(); end

  def after_remove_for_reimbursements=(val); end

  def after_remove_for_reimbursements?(); end

  def after_remove_for_return_authorizations(); end

  def after_remove_for_return_authorizations=(val); end

  def after_remove_for_return_authorizations?(); end

  def after_remove_for_return_items(); end

  def after_remove_for_return_items=(val); end

  def after_remove_for_return_items?(); end

  def after_remove_for_shipment_adjustments(); end

  def after_remove_for_shipment_adjustments=(val); end

  def after_remove_for_shipment_adjustments?(); end

  def after_remove_for_shipments(); end

  def after_remove_for_shipments=(val); end

  def after_remove_for_shipments?(); end

  def after_remove_for_state_changes(); end

  def after_remove_for_state_changes=(val); end

  def after_remove_for_state_changes?(); end

  def after_remove_for_valid_store_credit_payments(); end

  def after_remove_for_valid_store_credit_payments=(val); end

  def after_remove_for_valid_store_credit_payments?(); end

  def after_remove_for_variants(); end

  def after_remove_for_variants=(val); end

  def after_remove_for_variants?(); end

  def all_inventory_units_returned?(); end

  def allow_cancel?(); end

  def amount(); end

  def apply_free_shipping_promotions(*args, &block); end

  def apply_shipping_promotions(); end

  def approved?(); end

  def assign_billing_to_shipping_address(); end

  def assign_default_addresses!(*args, &block); end

  def assign_default_credit_card(*args, &block); end

  def assign_default_user_addresses(); end

  def assign_default_user_addresses!(*args, &block); end

  def associate_user!(user, override_email=T.unsafe(nil)); end

  def autosave_associated_records_for_adjustments(*args); end

  def autosave_associated_records_for_all_adjustments(*args); end

  def autosave_associated_records_for_approver(*args); end

  def autosave_associated_records_for_bill_address(*args); end

  def autosave_associated_records_for_canceler(*args); end

  def autosave_associated_records_for_cartons(*args); end

  def autosave_associated_records_for_created_by(*args); end

  def autosave_associated_records_for_customer_returns(*args); end

  def autosave_associated_records_for_inventory_units(*args); end

  def autosave_associated_records_for_line_item_adjustments(*args); end

  def autosave_associated_records_for_line_items(*args); end

  def autosave_associated_records_for_order_promotions(*args); end

  def autosave_associated_records_for_payments(*args); end

  def autosave_associated_records_for_products(*args); end

  def autosave_associated_records_for_promotions(*args); end

  def autosave_associated_records_for_refunds(*args); end

  def autosave_associated_records_for_reimbursements(*args); end

  def autosave_associated_records_for_return_authorizations(*args); end

  def autosave_associated_records_for_return_items(*args); end

  def autosave_associated_records_for_ship_address(*args); end

  def autosave_associated_records_for_shipment_adjustments(*args); end

  def autosave_associated_records_for_shipments(*args); end

  def autosave_associated_records_for_state_changes(*args); end

  def autosave_associated_records_for_store(*args); end

  def autosave_associated_records_for_user(*args); end

  def autosave_associated_records_for_valid_store_credit_payments(*args); end

  def autosave_associated_records_for_variants(*args); end

  def available_payment_methods(); end

  def backordered?(); end

  def before_add_for_adjustments(); end

  def before_add_for_adjustments=(val); end

  def before_add_for_adjustments?(); end

  def before_add_for_all_adjustments(); end

  def before_add_for_all_adjustments=(val); end

  def before_add_for_all_adjustments?(); end

  def before_add_for_cartons(); end

  def before_add_for_cartons=(val); end

  def before_add_for_cartons?(); end

  def before_add_for_customer_returns(); end

  def before_add_for_customer_returns=(val); end

  def before_add_for_customer_returns?(); end

  def before_add_for_inventory_units(); end

  def before_add_for_inventory_units=(val); end

  def before_add_for_inventory_units?(); end

  def before_add_for_line_item_adjustments(); end

  def before_add_for_line_item_adjustments=(val); end

  def before_add_for_line_item_adjustments?(); end

  def before_add_for_line_items(); end

  def before_add_for_line_items=(val); end

  def before_add_for_line_items?(); end

  def before_add_for_order_promotions(); end

  def before_add_for_order_promotions=(val); end

  def before_add_for_order_promotions?(); end

  def before_add_for_payments(); end

  def before_add_for_payments=(val); end

  def before_add_for_payments?(); end

  def before_add_for_products(); end

  def before_add_for_products=(val); end

  def before_add_for_products?(); end

  def before_add_for_promotions(); end

  def before_add_for_promotions=(val); end

  def before_add_for_promotions?(); end

  def before_add_for_refunds(); end

  def before_add_for_refunds=(val); end

  def before_add_for_refunds?(); end

  def before_add_for_reimbursements(); end

  def before_add_for_reimbursements=(val); end

  def before_add_for_reimbursements?(); end

  def before_add_for_return_authorizations(); end

  def before_add_for_return_authorizations=(val); end

  def before_add_for_return_authorizations?(); end

  def before_add_for_return_items(); end

  def before_add_for_return_items=(val); end

  def before_add_for_return_items?(); end

  def before_add_for_shipment_adjustments(); end

  def before_add_for_shipment_adjustments=(val); end

  def before_add_for_shipment_adjustments?(); end

  def before_add_for_shipments(); end

  def before_add_for_shipments=(val); end

  def before_add_for_shipments?(); end

  def before_add_for_state_changes(); end

  def before_add_for_state_changes=(val); end

  def before_add_for_state_changes?(); end

  def before_add_for_valid_store_credit_payments(); end

  def before_add_for_valid_store_credit_payments=(val); end

  def before_add_for_valid_store_credit_payments?(); end

  def before_add_for_variants(); end

  def before_add_for_variants=(val); end

  def before_add_for_variants?(); end

  def before_remove_for_adjustments(); end

  def before_remove_for_adjustments=(val); end

  def before_remove_for_adjustments?(); end

  def before_remove_for_all_adjustments(); end

  def before_remove_for_all_adjustments=(val); end

  def before_remove_for_all_adjustments?(); end

  def before_remove_for_cartons(); end

  def before_remove_for_cartons=(val); end

  def before_remove_for_cartons?(); end

  def before_remove_for_customer_returns(); end

  def before_remove_for_customer_returns=(val); end

  def before_remove_for_customer_returns?(); end

  def before_remove_for_inventory_units(); end

  def before_remove_for_inventory_units=(val); end

  def before_remove_for_inventory_units?(); end

  def before_remove_for_line_item_adjustments(); end

  def before_remove_for_line_item_adjustments=(val); end

  def before_remove_for_line_item_adjustments?(); end

  def before_remove_for_line_items(); end

  def before_remove_for_line_items=(val); end

  def before_remove_for_line_items?(); end

  def before_remove_for_order_promotions(); end

  def before_remove_for_order_promotions=(val); end

  def before_remove_for_order_promotions?(); end

  def before_remove_for_payments(); end

  def before_remove_for_payments=(val); end

  def before_remove_for_payments?(); end

  def before_remove_for_products(); end

  def before_remove_for_products=(val); end

  def before_remove_for_products?(); end

  def before_remove_for_promotions(); end

  def before_remove_for_promotions=(val); end

  def before_remove_for_promotions?(); end

  def before_remove_for_refunds(); end

  def before_remove_for_refunds=(val); end

  def before_remove_for_refunds?(); end

  def before_remove_for_reimbursements(); end

  def before_remove_for_reimbursements=(val); end

  def before_remove_for_reimbursements?(); end

  def before_remove_for_return_authorizations(); end

  def before_remove_for_return_authorizations=(val); end

  def before_remove_for_return_authorizations?(); end

  def before_remove_for_return_items(); end

  def before_remove_for_return_items=(val); end

  def before_remove_for_return_items?(); end

  def before_remove_for_shipment_adjustments(); end

  def before_remove_for_shipment_adjustments=(val); end

  def before_remove_for_shipment_adjustments?(); end

  def before_remove_for_shipments(); end

  def before_remove_for_shipments=(val); end

  def before_remove_for_shipments?(); end

  def before_remove_for_state_changes(); end

  def before_remove_for_state_changes=(val); end

  def before_remove_for_state_changes?(); end

  def before_remove_for_valid_store_credit_payments(); end

  def before_remove_for_valid_store_credit_payments=(val); end

  def before_remove_for_valid_store_credit_payments?(); end

  def before_remove_for_variants(); end

  def before_remove_for_variants=(val); end

  def before_remove_for_variants?(); end

  def bill_address_firstname(*args, &block); end

  def bill_address_lastname(*args, &block); end

  def bill_address_name(*args, &block); end

  def billing_address(*args); end

  def billing_address=(*args); end

  def billing_address?(*args); end

  def billing_address_before_last_save(*args); end

  def billing_address_before_type_cast(*args); end

  def billing_address_came_from_user?(*args); end

  def billing_address_change(*args); end

  def billing_address_change_to_be_saved(*args); end

  def billing_address_changed?(*args); end

  def billing_address_in_database(*args); end

  def billing_address_previous_change(*args); end

  def billing_address_previously_changed?(*args); end

  def billing_address_required?(); end

  def billing_address_was(*args); end

  def billing_address_will_change!(*args); end

  def billing_firstname(*args, &block); end

  def billing_lastname(*args, &block); end

  def billing_name(*args, &block); end

  def can_add_coupon?(); end

  def can_approve?(); end

  def can_ship?(); end

  def canceled_by(user); end

  def cancellations(); end

  def checkout_allowed?(); end

  def completed?(); end

  def confirmation_required?(*args, &block); end

  def contains?(variant, options=T.unsafe(nil)); end

  def contents(); end

  def coupon_code(); end

  def coupon_code=(code); end

  def covered_by_store_credit(); end

  def covered_by_store_credit?(); end

  def create_proposed_shipments(); end

  def create_shipments_for_line_item(line_item); end

  def create_tax_charge!(*args, &block); end

  def credit_cards(); end

  def currency(); end

  def deliver_order_confirmation_email(); end

  def discounted_item_amount(*args, &block); end

  def display_additional_tax_total(); end

  def display_adjustment_total(); end

  def display_included_tax_total(); end

  def display_item_total(); end

  def display_order_total_after_store_credit(); end

  def display_outstanding_balance(); end

  def display_ship_total(); end

  def display_shipment_total(); end

  def display_store_credit_remaining_after_capture(); end

  def display_tax_total(); end

  def display_total(); end

  def display_total_applicable_store_credit(); end

  def display_total_available_store_credit(); end

  def empty!(); end

  def ensure_billing_address(); end

  def ensure_line_item_variants_are_not_deleted(); end

  def ensure_shipping_address(); end

  def ensure_updated_shipments(); end

  def finalize!(); end

  def find_line_item_by_variant(variant, options=T.unsafe(nil)); end

  def fulfill!(); end

  def generate_order_number(options=T.unsafe(nil)); end

  def has_non_reimbursement_related_refunds?(); end

  def has_step?(*args, &block); end

  def insufficient_stock_lines(); end

  def is_risky?(); end

  def item_total_before_tax(); end

  def item_total_excluding_vat(); end

  def line_item_comparison_hooks(); end

  def line_item_comparison_hooks=(val); end

  def line_item_comparison_hooks?(); end

  def line_item_options_match(line_item, options); end

  def merge!(*args); end

  def name(); end

  def order_total_after_store_credit(); end

  def outstanding_balance(); end

  def outstanding_balance?(); end

  def paid?(); end

  def payment_required?(); end

  def persist_user_address!(); end

  def persist_user_credit_card(*args, &block); end

  def pre_tax_item_amount(*args, &block); end

  def quantity(); end

  def quantity_of(variant, options=T.unsafe(nil)); end

  def recalculate(); end

  def record_ip_address(ip_address); end

  def refresh_shipment_rates(); end

  def refund_total(); end

  def reimbursement_total(); end

  def restart_checkout_flow(); end

  def restore_billing_address!(*args); end

  def restore_ship_total!(*args); end

  def restore_shipping_address!(*args); end

  def saved_change_to_billing_address(*args); end

  def saved_change_to_billing_address?(*args); end

  def saved_change_to_ship_total(*args); end

  def saved_change_to_ship_total?(*args); end

  def saved_change_to_shipping_address(*args); end

  def saved_change_to_shipping_address?(*args); end

  def set_shipments_cost(*args, &block); end

  def ship_total(*args); end

  def ship_total=(*args); end

  def ship_total?(*args); end

  def ship_total_before_last_save(*args); end

  def ship_total_before_type_cast(*args); end

  def ship_total_came_from_user?(*args); end

  def ship_total_change(*args); end

  def ship_total_change_to_be_saved(*args); end

  def ship_total_changed?(*args); end

  def ship_total_in_database(*args); end

  def ship_total_previous_change(*args); end

  def ship_total_previously_changed?(*args); end

  def ship_total_was(*args); end

  def ship_total_will_change!(*args); end

  def shipped?(); end

  def shipped_shipments(); end

  def shipping(); end

  def shipping_address(*args); end

  def shipping_address=(*args); end

  def shipping_address?(*args); end

  def shipping_address_before_last_save(*args); end

  def shipping_address_before_type_cast(*args); end

  def shipping_address_came_from_user?(*args); end

  def shipping_address_change(*args); end

  def shipping_address_change_to_be_saved(*args); end

  def shipping_address_changed?(*args); end

  def shipping_address_in_database(*args); end

  def shipping_address_previous_change(*args); end

  def shipping_address_previously_changed?(*args); end

  def shipping_address_was(*args); end

  def shipping_address_will_change!(*args); end

  def shipping_discount(); end

  def shipping_eq_billing_address?(); end

  def state_changed(*args, &block); end

  def tax_address(); end

  def tax_total(); end

  def temporary_address(); end

  def temporary_address=(temporary_address); end

  def temporary_credit_card(*args, &block); end

  def temporary_credit_card=(*args, &block); end

  def temporary_payment_source(); end

  def temporary_payment_source=(temporary_payment_source); end

  def token(); end

  def total_applicable_store_credit(); end

  def total_available_store_credit(); end

  def update!(*args); end

  def update_hooks(); end

  def update_hooks=(val); end

  def update_hooks?(); end

  def updater(); end

  def use_billing(); end

  def use_billing=(use_billing); end

  def valid_credit_cards(); end

  def validate_associated_records_for_adjustments(*args); end

  def validate_associated_records_for_all_adjustments(*args); end

  def validate_associated_records_for_bill_address(*args); end

  def validate_associated_records_for_cartons(*args); end

  def validate_associated_records_for_customer_returns(*args); end

  def validate_associated_records_for_inventory_units(*args); end

  def validate_associated_records_for_line_item_adjustments(*args); end

  def validate_associated_records_for_line_items(*args); end

  def validate_associated_records_for_order_promotions(*args); end

  def validate_associated_records_for_payments(*args); end

  def validate_associated_records_for_products(*args); end

  def validate_associated_records_for_promotions(*args); end

  def validate_associated_records_for_refunds(*args); end

  def validate_associated_records_for_reimbursements(*args); end

  def validate_associated_records_for_return_authorizations(*args); end

  def validate_associated_records_for_return_items(*args); end

  def validate_associated_records_for_ship_address(*args); end

  def validate_associated_records_for_shipment_adjustments(*args); end

  def validate_associated_records_for_shipments(*args); end

  def validate_associated_records_for_state_changes(*args); end

  def validate_associated_records_for_valid_store_credit_payments(*args); end

  def validate_associated_records_for_variants(*args); end

  def validate_payments_attributes(attributes); end

  def will_save_change_to_billing_address?(*args); end

  def will_save_change_to_ship_total?(*args); end

  def will_save_change_to_shipping_address?(*args); end
  ORDER_NUMBER_LETTERS = ::T.let(nil, ::T.untyped)
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Order::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Order::GeneratedRelationMethods
end

class Spree::Order::ActiveRecord_AssociationRelation
end

class Spree::Order::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Order::GeneratedRelationMethods
end

class Spree::Order::ActiveRecord_Associations_CollectionProxy
end

class Spree::Order::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Order::GeneratedRelationMethods
end

class Spree::Order::ActiveRecord_Relation
end

module Spree::Order::GeneratedAssociationMethods
  def adjustment_ids(); end

  def adjustment_ids=(ids); end

  def adjustments(); end

  def adjustments=(value); end

  def all_adjustment_ids(); end

  def all_adjustment_ids=(ids); end

  def all_adjustments(); end

  def all_adjustments=(value); end

  def approver(); end

  def approver=(value); end

  def bill_address(); end

  def bill_address=(value); end

  def bill_address_attributes=(attributes); end

  def build_approver(*args, &block); end

  def build_bill_address(*args, &block); end

  def build_canceler(*args, &block); end

  def build_created_by(*args, &block); end

  def build_ship_address(*args, &block); end

  def build_store(*args, &block); end

  def build_user(*args, &block); end

  def canceler(); end

  def canceler=(value); end

  def carton_ids(); end

  def carton_ids=(ids); end

  def cartons(); end

  def cartons=(value); end

  def create_approver(*args, &block); end

  def create_approver!(*args, &block); end

  def create_bill_address(*args, &block); end

  def create_bill_address!(*args, &block); end

  def create_canceler(*args, &block); end

  def create_canceler!(*args, &block); end

  def create_created_by(*args, &block); end

  def create_created_by!(*args, &block); end

  def create_ship_address(*args, &block); end

  def create_ship_address!(*args, &block); end

  def create_store(*args, &block); end

  def create_store!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def created_by(); end

  def created_by=(value); end

  def customer_return_ids(); end

  def customer_return_ids=(ids); end

  def customer_returns(); end

  def customer_returns=(value); end

  def inventory_unit_ids(); end

  def inventory_unit_ids=(ids); end

  def inventory_units(); end

  def inventory_units=(value); end

  def line_item_adjustment_ids(); end

  def line_item_adjustment_ids=(ids); end

  def line_item_adjustments(); end

  def line_item_adjustments=(value); end

  def line_item_ids(); end

  def line_item_ids=(ids); end

  def line_items(); end

  def line_items=(value); end

  def line_items_attributes=(attributes); end

  def order_promotion_ids(); end

  def order_promotion_ids=(ids); end

  def order_promotions(); end

  def order_promotions=(value); end

  def payment_ids(); end

  def payment_ids=(ids); end

  def payments(); end

  def payments=(value); end

  def payments_attributes=(attributes); end

  def product_ids(); end

  def product_ids=(ids); end

  def products(); end

  def products=(value); end

  def promotion_ids(); end

  def promotion_ids=(ids); end

  def promotions(); end

  def promotions=(value); end

  def refund_ids(); end

  def refund_ids=(ids); end

  def refunds(); end

  def refunds=(value); end

  def reimbursement_ids(); end

  def reimbursement_ids=(ids); end

  def reimbursements(); end

  def reimbursements=(value); end

  def reload_approver(); end

  def reload_bill_address(); end

  def reload_canceler(); end

  def reload_created_by(); end

  def reload_ship_address(); end

  def reload_store(); end

  def reload_user(); end

  def return_authorization_ids(); end

  def return_authorization_ids=(ids); end

  def return_authorizations(); end

  def return_authorizations=(value); end

  def return_item_ids(); end

  def return_item_ids=(ids); end

  def return_items(); end

  def return_items=(value); end

  def ship_address(); end

  def ship_address=(value); end

  def ship_address_attributes=(attributes); end

  def shipment_adjustment_ids(); end

  def shipment_adjustment_ids=(ids); end

  def shipment_adjustments(); end

  def shipment_adjustments=(value); end

  def shipment_ids(); end

  def shipment_ids=(ids); end

  def shipments(); end

  def shipments=(value); end

  def shipments_attributes=(attributes); end

  def state_change_ids(); end

  def state_change_ids=(ids); end

  def state_changes(); end

  def state_changes=(value); end

  def store(); end

  def store=(value); end

  def user(); end

  def user=(value); end

  def valid_store_credit_payment_ids(); end

  def valid_store_credit_payment_ids=(ids); end

  def valid_store_credit_payments(); end

  def valid_store_credit_payments=(value); end

  def variant_ids(); end

  def variant_ids=(ids); end

  def variants(); end

  def variants=(value); end
end

module Spree::Order::GeneratedAssociationMethods
end

module Spree::Order::GeneratedAttributeMethods
end

module Spree::Order::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Order::GeneratedRelationMethods
  def by_store(*args, &block); end

  def completed_between(*args, &block); end

  def created_between(*args, &block); end

  def reverse_chronological(*args, &block); end
end

module Spree::Order::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Order::InsufficientStock
  def initialize(message=T.unsafe(nil), items: T.unsafe(nil)); end

  def items(); end
end

module Spree::Order::ShipmentsAssociationExtension
  def states(); end
end

module Spree::Order::ShipmentsAssociationExtension
end

class Spree::Order
  extend ::Spree::Core::StateMachines::Order::ClassMethods
  extend ::Spree::DisplayMoney
  extend ::StateMachines::ClassMethods
  def self.after_add_for_adjustments(); end

  def self.after_add_for_adjustments=(val); end

  def self.after_add_for_adjustments?(); end

  def self.after_add_for_all_adjustments(); end

  def self.after_add_for_all_adjustments=(val); end

  def self.after_add_for_all_adjustments?(); end

  def self.after_add_for_cartons(); end

  def self.after_add_for_cartons=(val); end

  def self.after_add_for_cartons?(); end

  def self.after_add_for_customer_returns(); end

  def self.after_add_for_customer_returns=(val); end

  def self.after_add_for_customer_returns?(); end

  def self.after_add_for_inventory_units(); end

  def self.after_add_for_inventory_units=(val); end

  def self.after_add_for_inventory_units?(); end

  def self.after_add_for_line_item_adjustments(); end

  def self.after_add_for_line_item_adjustments=(val); end

  def self.after_add_for_line_item_adjustments?(); end

  def self.after_add_for_line_items(); end

  def self.after_add_for_line_items=(val); end

  def self.after_add_for_line_items?(); end

  def self.after_add_for_order_promotions(); end

  def self.after_add_for_order_promotions=(val); end

  def self.after_add_for_order_promotions?(); end

  def self.after_add_for_payments(); end

  def self.after_add_for_payments=(val); end

  def self.after_add_for_payments?(); end

  def self.after_add_for_products(); end

  def self.after_add_for_products=(val); end

  def self.after_add_for_products?(); end

  def self.after_add_for_promotions(); end

  def self.after_add_for_promotions=(val); end

  def self.after_add_for_promotions?(); end

  def self.after_add_for_refunds(); end

  def self.after_add_for_refunds=(val); end

  def self.after_add_for_refunds?(); end

  def self.after_add_for_reimbursements(); end

  def self.after_add_for_reimbursements=(val); end

  def self.after_add_for_reimbursements?(); end

  def self.after_add_for_return_authorizations(); end

  def self.after_add_for_return_authorizations=(val); end

  def self.after_add_for_return_authorizations?(); end

  def self.after_add_for_return_items(); end

  def self.after_add_for_return_items=(val); end

  def self.after_add_for_return_items?(); end

  def self.after_add_for_shipment_adjustments(); end

  def self.after_add_for_shipment_adjustments=(val); end

  def self.after_add_for_shipment_adjustments?(); end

  def self.after_add_for_shipments(); end

  def self.after_add_for_shipments=(val); end

  def self.after_add_for_shipments?(); end

  def self.after_add_for_state_changes(); end

  def self.after_add_for_state_changes=(val); end

  def self.after_add_for_state_changes?(); end

  def self.after_add_for_valid_store_credit_payments(); end

  def self.after_add_for_valid_store_credit_payments=(val); end

  def self.after_add_for_valid_store_credit_payments?(); end

  def self.after_add_for_variants(); end

  def self.after_add_for_variants=(val); end

  def self.after_add_for_variants?(); end

  def self.after_remove_for_adjustments(); end

  def self.after_remove_for_adjustments=(val); end

  def self.after_remove_for_adjustments?(); end

  def self.after_remove_for_all_adjustments(); end

  def self.after_remove_for_all_adjustments=(val); end

  def self.after_remove_for_all_adjustments?(); end

  def self.after_remove_for_cartons(); end

  def self.after_remove_for_cartons=(val); end

  def self.after_remove_for_cartons?(); end

  def self.after_remove_for_customer_returns(); end

  def self.after_remove_for_customer_returns=(val); end

  def self.after_remove_for_customer_returns?(); end

  def self.after_remove_for_inventory_units(); end

  def self.after_remove_for_inventory_units=(val); end

  def self.after_remove_for_inventory_units?(); end

  def self.after_remove_for_line_item_adjustments(); end

  def self.after_remove_for_line_item_adjustments=(val); end

  def self.after_remove_for_line_item_adjustments?(); end

  def self.after_remove_for_line_items(); end

  def self.after_remove_for_line_items=(val); end

  def self.after_remove_for_line_items?(); end

  def self.after_remove_for_order_promotions(); end

  def self.after_remove_for_order_promotions=(val); end

  def self.after_remove_for_order_promotions?(); end

  def self.after_remove_for_payments(); end

  def self.after_remove_for_payments=(val); end

  def self.after_remove_for_payments?(); end

  def self.after_remove_for_products(); end

  def self.after_remove_for_products=(val); end

  def self.after_remove_for_products?(); end

  def self.after_remove_for_promotions(); end

  def self.after_remove_for_promotions=(val); end

  def self.after_remove_for_promotions?(); end

  def self.after_remove_for_refunds(); end

  def self.after_remove_for_refunds=(val); end

  def self.after_remove_for_refunds?(); end

  def self.after_remove_for_reimbursements(); end

  def self.after_remove_for_reimbursements=(val); end

  def self.after_remove_for_reimbursements?(); end

  def self.after_remove_for_return_authorizations(); end

  def self.after_remove_for_return_authorizations=(val); end

  def self.after_remove_for_return_authorizations?(); end

  def self.after_remove_for_return_items(); end

  def self.after_remove_for_return_items=(val); end

  def self.after_remove_for_return_items?(); end

  def self.after_remove_for_shipment_adjustments(); end

  def self.after_remove_for_shipment_adjustments=(val); end

  def self.after_remove_for_shipment_adjustments?(); end

  def self.after_remove_for_shipments(); end

  def self.after_remove_for_shipments=(val); end

  def self.after_remove_for_shipments?(); end

  def self.after_remove_for_state_changes(); end

  def self.after_remove_for_state_changes=(val); end

  def self.after_remove_for_state_changes?(); end

  def self.after_remove_for_valid_store_credit_payments(); end

  def self.after_remove_for_valid_store_credit_payments=(val); end

  def self.after_remove_for_valid_store_credit_payments?(); end

  def self.after_remove_for_variants(); end

  def self.after_remove_for_variants=(val); end

  def self.after_remove_for_variants?(); end

  def self.before_add_for_adjustments(); end

  def self.before_add_for_adjustments=(val); end

  def self.before_add_for_adjustments?(); end

  def self.before_add_for_all_adjustments(); end

  def self.before_add_for_all_adjustments=(val); end

  def self.before_add_for_all_adjustments?(); end

  def self.before_add_for_cartons(); end

  def self.before_add_for_cartons=(val); end

  def self.before_add_for_cartons?(); end

  def self.before_add_for_customer_returns(); end

  def self.before_add_for_customer_returns=(val); end

  def self.before_add_for_customer_returns?(); end

  def self.before_add_for_inventory_units(); end

  def self.before_add_for_inventory_units=(val); end

  def self.before_add_for_inventory_units?(); end

  def self.before_add_for_line_item_adjustments(); end

  def self.before_add_for_line_item_adjustments=(val); end

  def self.before_add_for_line_item_adjustments?(); end

  def self.before_add_for_line_items(); end

  def self.before_add_for_line_items=(val); end

  def self.before_add_for_line_items?(); end

  def self.before_add_for_order_promotions(); end

  def self.before_add_for_order_promotions=(val); end

  def self.before_add_for_order_promotions?(); end

  def self.before_add_for_payments(); end

  def self.before_add_for_payments=(val); end

  def self.before_add_for_payments?(); end

  def self.before_add_for_products(); end

  def self.before_add_for_products=(val); end

  def self.before_add_for_products?(); end

  def self.before_add_for_promotions(); end

  def self.before_add_for_promotions=(val); end

  def self.before_add_for_promotions?(); end

  def self.before_add_for_refunds(); end

  def self.before_add_for_refunds=(val); end

  def self.before_add_for_refunds?(); end

  def self.before_add_for_reimbursements(); end

  def self.before_add_for_reimbursements=(val); end

  def self.before_add_for_reimbursements?(); end

  def self.before_add_for_return_authorizations(); end

  def self.before_add_for_return_authorizations=(val); end

  def self.before_add_for_return_authorizations?(); end

  def self.before_add_for_return_items(); end

  def self.before_add_for_return_items=(val); end

  def self.before_add_for_return_items?(); end

  def self.before_add_for_shipment_adjustments(); end

  def self.before_add_for_shipment_adjustments=(val); end

  def self.before_add_for_shipment_adjustments?(); end

  def self.before_add_for_shipments(); end

  def self.before_add_for_shipments=(val); end

  def self.before_add_for_shipments?(); end

  def self.before_add_for_state_changes(); end

  def self.before_add_for_state_changes=(val); end

  def self.before_add_for_state_changes?(); end

  def self.before_add_for_valid_store_credit_payments(); end

  def self.before_add_for_valid_store_credit_payments=(val); end

  def self.before_add_for_valid_store_credit_payments?(); end

  def self.before_add_for_variants(); end

  def self.before_add_for_variants=(val); end

  def self.before_add_for_variants?(); end

  def self.before_remove_for_adjustments(); end

  def self.before_remove_for_adjustments=(val); end

  def self.before_remove_for_adjustments?(); end

  def self.before_remove_for_all_adjustments(); end

  def self.before_remove_for_all_adjustments=(val); end

  def self.before_remove_for_all_adjustments?(); end

  def self.before_remove_for_cartons(); end

  def self.before_remove_for_cartons=(val); end

  def self.before_remove_for_cartons?(); end

  def self.before_remove_for_customer_returns(); end

  def self.before_remove_for_customer_returns=(val); end

  def self.before_remove_for_customer_returns?(); end

  def self.before_remove_for_inventory_units(); end

  def self.before_remove_for_inventory_units=(val); end

  def self.before_remove_for_inventory_units?(); end

  def self.before_remove_for_line_item_adjustments(); end

  def self.before_remove_for_line_item_adjustments=(val); end

  def self.before_remove_for_line_item_adjustments?(); end

  def self.before_remove_for_line_items(); end

  def self.before_remove_for_line_items=(val); end

  def self.before_remove_for_line_items?(); end

  def self.before_remove_for_order_promotions(); end

  def self.before_remove_for_order_promotions=(val); end

  def self.before_remove_for_order_promotions?(); end

  def self.before_remove_for_payments(); end

  def self.before_remove_for_payments=(val); end

  def self.before_remove_for_payments?(); end

  def self.before_remove_for_products(); end

  def self.before_remove_for_products=(val); end

  def self.before_remove_for_products?(); end

  def self.before_remove_for_promotions(); end

  def self.before_remove_for_promotions=(val); end

  def self.before_remove_for_promotions?(); end

  def self.before_remove_for_refunds(); end

  def self.before_remove_for_refunds=(val); end

  def self.before_remove_for_refunds?(); end

  def self.before_remove_for_reimbursements(); end

  def self.before_remove_for_reimbursements=(val); end

  def self.before_remove_for_reimbursements?(); end

  def self.before_remove_for_return_authorizations(); end

  def self.before_remove_for_return_authorizations=(val); end

  def self.before_remove_for_return_authorizations?(); end

  def self.before_remove_for_return_items(); end

  def self.before_remove_for_return_items=(val); end

  def self.before_remove_for_return_items?(); end

  def self.before_remove_for_shipment_adjustments(); end

  def self.before_remove_for_shipment_adjustments=(val); end

  def self.before_remove_for_shipment_adjustments?(); end

  def self.before_remove_for_shipments(); end

  def self.before_remove_for_shipments=(val); end

  def self.before_remove_for_shipments?(); end

  def self.before_remove_for_state_changes(); end

  def self.before_remove_for_state_changes=(val); end

  def self.before_remove_for_state_changes?(); end

  def self.before_remove_for_valid_store_credit_payments(); end

  def self.before_remove_for_valid_store_credit_payments=(val); end

  def self.before_remove_for_valid_store_credit_payments?(); end

  def self.before_remove_for_variants(); end

  def self.before_remove_for_variants=(val); end

  def self.before_remove_for_variants?(); end

  def self.by_customer(customer); end

  def self.by_state(state); end

  def self.by_store(*args); end

  def self.canceled(); end

  def self.complete(); end

  def self.completed_between(*args); end

  def self.created_between(*args); end

  def self.find_by_param(value); end

  def self.find_by_param!(value); end

  def self.incomplete(); end

  def self.line_item_comparison_hooks(); end

  def self.line_item_comparison_hooks=(val); end

  def self.line_item_comparison_hooks?(); end

  def self.not_canceled(); end

  def self.register_line_item_comparison_hook(hook); end

  def self.register_update_hook(hook); end

  def self.reverse_chronological(*args); end

  def self.update_hooks(); end

  def self.update_hooks=(val); end

  def self.update_hooks?(); end
end

class Spree::OrderMutex
  include ::Spree::OrderMutex::GeneratedAttributeMethods
  include ::Spree::OrderMutex::GeneratedAssociationMethods
  def autosave_associated_records_for_order(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::OrderMutex::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OrderMutex::GeneratedRelationMethods
end

class Spree::OrderMutex::ActiveRecord_AssociationRelation
end

class Spree::OrderMutex::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OrderMutex::GeneratedRelationMethods
end

class Spree::OrderMutex::ActiveRecord_Associations_CollectionProxy
end

class Spree::OrderMutex::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OrderMutex::GeneratedRelationMethods
end

class Spree::OrderMutex::ActiveRecord_Relation
end

module Spree::OrderMutex::GeneratedAssociationMethods
  def build_order(*args, &block); end

  def create_order(*args, &block); end

  def create_order!(*args, &block); end

  def order(); end

  def order=(value); end

  def reload_order(); end
end

module Spree::OrderMutex::GeneratedAssociationMethods
end

module Spree::OrderMutex::GeneratedAttributeMethods
end

module Spree::OrderMutex::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::OrderMutex::GeneratedRelationMethods
  def expired(*args, &block); end
end

module Spree::OrderMutex::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::OrderMutex
  def self.expired(*args); end
end

class Spree::OrderPromotion
  include ::Spree::OrderPromotion::GeneratedAttributeMethods
  include ::Spree::OrderPromotion::GeneratedAssociationMethods
  def autosave_associated_records_for_order(*args); end

  def autosave_associated_records_for_promotion(*args); end

  def autosave_associated_records_for_promotion_code(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::OrderPromotion::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OrderPromotion::GeneratedRelationMethods
end

class Spree::OrderPromotion::ActiveRecord_AssociationRelation
end

class Spree::OrderPromotion::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OrderPromotion::GeneratedRelationMethods
end

class Spree::OrderPromotion::ActiveRecord_Associations_CollectionProxy
end

class Spree::OrderPromotion::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::OrderPromotion::GeneratedRelationMethods
end

class Spree::OrderPromotion::ActiveRecord_Relation
end

module Spree::OrderPromotion::GeneratedAssociationMethods
  def build_order(*args, &block); end

  def build_promotion(*args, &block); end

  def build_promotion_code(*args, &block); end

  def create_order(*args, &block); end

  def create_order!(*args, &block); end

  def create_promotion(*args, &block); end

  def create_promotion!(*args, &block); end

  def create_promotion_code(*args, &block); end

  def create_promotion_code!(*args, &block); end

  def order(); end

  def order=(value); end

  def promotion(); end

  def promotion=(value); end

  def promotion_code(); end

  def promotion_code=(value); end

  def reload_order(); end

  def reload_promotion(); end

  def reload_promotion_code(); end
end

module Spree::OrderPromotion::GeneratedAssociationMethods
end

module Spree::OrderPromotion::GeneratedAttributeMethods
end

module Spree::OrderPromotion::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::OrderPromotion::GeneratedRelationMethods
end

module Spree::OrderPromotion::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Payment
  include ::Spree::Payment::GeneratedAttributeMethods
  include ::Spree::Payment::GeneratedAssociationMethods
  include ::Spree::Payment::Processing
  include ::Spree::Core::StateMachines::Payment
  include ::StateMachines::InstanceMethods
  def actions(); end

  def after_add_for_capture_events(); end

  def after_add_for_capture_events=(val); end

  def after_add_for_capture_events?(); end

  def after_add_for_log_entries(); end

  def after_add_for_log_entries=(val); end

  def after_add_for_log_entries?(); end

  def after_add_for_offsets(); end

  def after_add_for_offsets=(val); end

  def after_add_for_offsets?(); end

  def after_add_for_refunds(); end

  def after_add_for_refunds=(val); end

  def after_add_for_refunds?(); end

  def after_add_for_state_changes(); end

  def after_add_for_state_changes=(val); end

  def after_add_for_state_changes?(); end

  def after_remove_for_capture_events(); end

  def after_remove_for_capture_events=(val); end

  def after_remove_for_capture_events?(); end

  def after_remove_for_log_entries(); end

  def after_remove_for_log_entries=(val); end

  def after_remove_for_log_entries?(); end

  def after_remove_for_offsets(); end

  def after_remove_for_offsets=(val); end

  def after_remove_for_offsets?(); end

  def after_remove_for_refunds(); end

  def after_remove_for_refunds=(val); end

  def after_remove_for_refunds?(); end

  def after_remove_for_state_changes(); end

  def after_remove_for_state_changes=(val); end

  def after_remove_for_state_changes?(); end

  def amount=(amount); end

  def autosave_associated_records_for_capture_events(*args); end

  def autosave_associated_records_for_log_entries(*args); end

  def autosave_associated_records_for_offsets(*args); end

  def autosave_associated_records_for_order(*args); end

  def autosave_associated_records_for_payment_method(*args); end

  def autosave_associated_records_for_refunds(*args); end

  def autosave_associated_records_for_source(*args); end

  def autosave_associated_records_for_state_changes(*args); end

  def before_add_for_capture_events(); end

  def before_add_for_capture_events=(val); end

  def before_add_for_capture_events?(); end

  def before_add_for_log_entries(); end

  def before_add_for_log_entries=(val); end

  def before_add_for_log_entries?(); end

  def before_add_for_offsets(); end

  def before_add_for_offsets=(val); end

  def before_add_for_offsets?(); end

  def before_add_for_refunds(); end

  def before_add_for_refunds=(val); end

  def before_add_for_refunds?(); end

  def before_add_for_state_changes(); end

  def before_add_for_state_changes=(val); end

  def before_add_for_state_changes?(); end

  def before_remove_for_capture_events(); end

  def before_remove_for_capture_events=(val); end

  def before_remove_for_capture_events?(); end

  def before_remove_for_log_entries(); end

  def before_remove_for_log_entries=(val); end

  def before_remove_for_log_entries?(); end

  def before_remove_for_offsets(); end

  def before_remove_for_offsets=(val); end

  def before_remove_for_offsets?(); end

  def before_remove_for_refunds(); end

  def before_remove_for_refunds=(val); end

  def before_remove_for_refunds?(); end

  def before_remove_for_state_changes(); end

  def before_remove_for_state_changes=(val); end

  def before_remove_for_state_changes?(); end

  def can_credit?(); end

  def captured_amount(); end

  def credit_allowed(); end

  def currency(*args, &block); end

  def display_amount(); end

  def fully_refunded?(); end

  def identifier(*args, &block); end

  def identifier=(*args, &block); end

  def identifier?(*args); end

  def identifier_before_last_save(*args); end

  def identifier_before_type_cast(*args); end

  def identifier_came_from_user?(*args); end

  def identifier_change(*args); end

  def identifier_change_to_be_saved(*args); end

  def identifier_changed?(*args); end

  def identifier_in_database(*args); end

  def identifier_previous_change(*args); end

  def identifier_previously_changed?(*args); end

  def identifier_was(*args); end

  def identifier_will_change!(*args); end

  def is_avs_risky?(); end

  def is_cvv_risky?(); end

  def money(); end

  def offsets_total(); end

  def payment_source(); end

  def request_env(); end

  def request_env=(request_env); end

  def restore_identifier!(*args); end

  def saved_change_to_identifier(*args); end

  def saved_change_to_identifier?(*args); end

  def store_credit?(); end

  def transaction_id(); end

  def uncaptured_amount(); end

  def validate_associated_records_for_capture_events(*args); end

  def validate_associated_records_for_log_entries(*args); end

  def validate_associated_records_for_offsets(*args); end

  def validate_associated_records_for_refunds(*args); end

  def validate_associated_records_for_state_changes(*args); end

  def will_save_change_to_identifier?(*args); end
  IDENTIFIER_CHARS = ::T.let(nil, ::T.untyped)
  NON_RISKY_AVS_CODES = ::T.let(nil, ::T.untyped)
  RISKY_AVS_CODES = ::T.let(nil, ::T.untyped)
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Payment::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Payment::GeneratedRelationMethods
end

class Spree::Payment::ActiveRecord_AssociationRelation
end

class Spree::Payment::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Payment::GeneratedRelationMethods
end

class Spree::Payment::ActiveRecord_Associations_CollectionProxy
end

class Spree::Payment::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Payment::GeneratedRelationMethods
end

class Spree::Payment::ActiveRecord_Relation
end

module Spree::Payment::GeneratedAssociationMethods
  def build_order(*args, &block); end

  def build_payment_method(*args, &block); end

  def capture_event_ids(); end

  def capture_event_ids=(ids); end

  def capture_events(); end

  def capture_events=(value); end

  def create_order(*args, &block); end

  def create_order!(*args, &block); end

  def create_payment_method(*args, &block); end

  def create_payment_method!(*args, &block); end

  def log_entries(); end

  def log_entries=(value); end

  def log_entry_ids(); end

  def log_entry_ids=(ids); end

  def offset_ids(); end

  def offset_ids=(ids); end

  def offsets(); end

  def offsets=(value); end

  def order(); end

  def order=(value); end

  def payment_method(); end

  def payment_method=(value); end

  def refund_ids(); end

  def refund_ids=(ids); end

  def refunds(); end

  def refunds=(value); end

  def reload_order(); end

  def reload_payment_method(); end

  def reload_source(); end

  def source(); end

  def source=(value); end

  def state_change_ids(); end

  def state_change_ids=(ids); end

  def state_changes(); end

  def state_changes=(value); end
end

module Spree::Payment::GeneratedAssociationMethods
end

module Spree::Payment::GeneratedAttributeMethods
end

module Spree::Payment::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Payment::GeneratedRelationMethods
  def checkout(*args, &block); end

  def completed(*args, &block); end

  def failed(*args, &block); end

  def from_credit_card(*args, &block); end

  def not_store_credits(*args, &block); end

  def offset_payment(*args, &block); end

  def pending(*args, &block); end

  def processing(*args, &block); end

  def risky(*args, &block); end

  def store_credits(*args, &block); end

  def valid(*args, &block); end

  def with_state(*args, &block); end
end

module Spree::Payment::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Payment
  extend ::StateMachines::ClassMethods
  def self.after_add_for_capture_events(); end

  def self.after_add_for_capture_events=(val); end

  def self.after_add_for_capture_events?(); end

  def self.after_add_for_log_entries(); end

  def self.after_add_for_log_entries=(val); end

  def self.after_add_for_log_entries?(); end

  def self.after_add_for_offsets(); end

  def self.after_add_for_offsets=(val); end

  def self.after_add_for_offsets?(); end

  def self.after_add_for_refunds(); end

  def self.after_add_for_refunds=(val); end

  def self.after_add_for_refunds?(); end

  def self.after_add_for_state_changes(); end

  def self.after_add_for_state_changes=(val); end

  def self.after_add_for_state_changes?(); end

  def self.after_remove_for_capture_events(); end

  def self.after_remove_for_capture_events=(val); end

  def self.after_remove_for_capture_events?(); end

  def self.after_remove_for_log_entries(); end

  def self.after_remove_for_log_entries=(val); end

  def self.after_remove_for_log_entries?(); end

  def self.after_remove_for_offsets(); end

  def self.after_remove_for_offsets=(val); end

  def self.after_remove_for_offsets?(); end

  def self.after_remove_for_refunds(); end

  def self.after_remove_for_refunds=(val); end

  def self.after_remove_for_refunds?(); end

  def self.after_remove_for_state_changes(); end

  def self.after_remove_for_state_changes=(val); end

  def self.after_remove_for_state_changes?(); end

  def self.before_add_for_capture_events(); end

  def self.before_add_for_capture_events=(val); end

  def self.before_add_for_capture_events?(); end

  def self.before_add_for_log_entries(); end

  def self.before_add_for_log_entries=(val); end

  def self.before_add_for_log_entries?(); end

  def self.before_add_for_offsets(); end

  def self.before_add_for_offsets=(val); end

  def self.before_add_for_offsets?(); end

  def self.before_add_for_refunds(); end

  def self.before_add_for_refunds=(val); end

  def self.before_add_for_refunds?(); end

  def self.before_add_for_state_changes(); end

  def self.before_add_for_state_changes=(val); end

  def self.before_add_for_state_changes?(); end

  def self.before_remove_for_capture_events(); end

  def self.before_remove_for_capture_events=(val); end

  def self.before_remove_for_capture_events?(); end

  def self.before_remove_for_log_entries(); end

  def self.before_remove_for_log_entries=(val); end

  def self.before_remove_for_log_entries?(); end

  def self.before_remove_for_offsets(); end

  def self.before_remove_for_offsets=(val); end

  def self.before_remove_for_offsets?(); end

  def self.before_remove_for_refunds(); end

  def self.before_remove_for_refunds=(val); end

  def self.before_remove_for_refunds?(); end

  def self.before_remove_for_state_changes(); end

  def self.before_remove_for_state_changes=(val); end

  def self.before_remove_for_state_changes?(); end

  def self.checkout(*args); end

  def self.completed(*args); end

  def self.failed(*args); end

  def self.from_credit_card(*args); end

  def self.not_store_credits(*args); end

  def self.offset_payment(*args); end

  def self.pending(*args); end

  def self.processing(*args); end

  def self.risky(*args); end

  def self.store_credits(*args); end

  def self.valid(*args); end

  def self.with_state(*args); end
end

class Spree::PaymentCaptureEvent
  include ::Spree::PaymentCaptureEvent::GeneratedAttributeMethods
  include ::Spree::PaymentCaptureEvent::GeneratedAssociationMethods
  def autosave_associated_records_for_payment(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PaymentCaptureEvent::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentCaptureEvent::GeneratedRelationMethods
end

class Spree::PaymentCaptureEvent::ActiveRecord_AssociationRelation
end

class Spree::PaymentCaptureEvent::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentCaptureEvent::GeneratedRelationMethods
end

class Spree::PaymentCaptureEvent::ActiveRecord_Associations_CollectionProxy
end

class Spree::PaymentCaptureEvent::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentCaptureEvent::GeneratedRelationMethods
end

class Spree::PaymentCaptureEvent::ActiveRecord_Relation
end

module Spree::PaymentCaptureEvent::GeneratedAssociationMethods
  def build_payment(*args, &block); end

  def create_payment(*args, &block); end

  def create_payment!(*args, &block); end

  def payment(); end

  def payment=(value); end

  def reload_payment(); end
end

module Spree::PaymentCaptureEvent::GeneratedAssociationMethods
end

module Spree::PaymentCaptureEvent::GeneratedAttributeMethods
end

module Spree::PaymentCaptureEvent::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PaymentCaptureEvent::GeneratedRelationMethods
end

module Spree::PaymentCaptureEvent::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PaymentMethod
  include ::Spree::PaymentMethod::GeneratedAttributeMethods
  include ::Spree::PaymentMethod::GeneratedAssociationMethods
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  include ::Spree::Preferences::StaticallyConfigurable
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def after_add_for_credit_cards(); end

  def after_add_for_credit_cards=(val); end

  def after_add_for_credit_cards?(); end

  def after_add_for_payments(); end

  def after_add_for_payments=(val); end

  def after_add_for_payments?(); end

  def after_add_for_store_payment_methods(); end

  def after_add_for_store_payment_methods=(val); end

  def after_add_for_store_payment_methods?(); end

  def after_add_for_stores(); end

  def after_add_for_stores=(val); end

  def after_add_for_stores?(); end

  def after_remove_for_credit_cards(); end

  def after_remove_for_credit_cards=(val); end

  def after_remove_for_credit_cards?(); end

  def after_remove_for_payments(); end

  def after_remove_for_payments=(val); end

  def after_remove_for_payments?(); end

  def after_remove_for_store_payment_methods(); end

  def after_remove_for_store_payment_methods=(val); end

  def after_remove_for_store_payment_methods?(); end

  def after_remove_for_stores(); end

  def after_remove_for_stores=(val); end

  def after_remove_for_stores?(); end

  def autosave_associated_records_for_credit_cards(*args); end

  def autosave_associated_records_for_payments(*args); end

  def autosave_associated_records_for_store_payment_methods(*args); end

  def autosave_associated_records_for_stores(*args); end

  def before_add_for_credit_cards(); end

  def before_add_for_credit_cards=(val); end

  def before_add_for_credit_cards?(); end

  def before_add_for_payments(); end

  def before_add_for_payments=(val); end

  def before_add_for_payments?(); end

  def before_add_for_store_payment_methods(); end

  def before_add_for_store_payment_methods=(val); end

  def before_add_for_store_payment_methods?(); end

  def before_add_for_stores(); end

  def before_add_for_stores=(val); end

  def before_add_for_stores?(); end

  def before_remove_for_credit_cards(); end

  def before_remove_for_credit_cards=(val); end

  def before_remove_for_credit_cards?(); end

  def before_remove_for_payments(); end

  def before_remove_for_payments=(val); end

  def before_remove_for_payments?(); end

  def before_remove_for_store_payment_methods(); end

  def before_remove_for_store_payment_methods=(val); end

  def before_remove_for_store_payment_methods?(); end

  def before_remove_for_stores(); end

  def before_remove_for_stores=(val); end

  def before_remove_for_stores?(); end

  def connection(*args, &block); end

  def destroy_without_paranoia(); end

  def destroyed_via_scope?(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def preferred_server(); end

  def preferred_server=(value); end

  def preferred_server_default(); end

  def preferred_server_type(); end

  def preferred_test_mode(); end

  def preferred_test_mode=(value); end

  def preferred_test_mode_default(); end

  def preferred_test_mode_type(); end

  def really_delete(); end

  def really_destroyed?(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end

  def validate_associated_records_for_credit_cards(*args); end

  def validate_associated_records_for_payments(*args); end

  def validate_associated_records_for_store_payment_methods(*args); end

  def validate_associated_records_for_stores(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PaymentMethod::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
end

class Spree::PaymentMethod::ActiveRecord_AssociationRelation
end

class Spree::PaymentMethod::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
end

class Spree::PaymentMethod::ActiveRecord_Associations_CollectionProxy
end

class Spree::PaymentMethod::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
end

class Spree::PaymentMethod::ActiveRecord_Relation
end

class Spree::PaymentMethod::BogusCreditCard
  include ::Spree::PaymentMethod::BogusCreditCard::GeneratedAttributeMethods
  include ::Spree::PaymentMethod::BogusCreditCard::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

module Spree::PaymentMethod::BogusCreditCard::GeneratedAssociationMethods
end

module Spree::PaymentMethod::BogusCreditCard::GeneratedAssociationMethods
end

module Spree::PaymentMethod::BogusCreditCard::GeneratedAttributeMethods
end

module Spree::PaymentMethod::BogusCreditCard::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PaymentMethod::BogusCreditCard::GeneratedRelationMethods
end

module Spree::PaymentMethod::BogusCreditCard::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PaymentMethod::Check
  include ::Spree::PaymentMethod::Check::GeneratedAttributeMethods
  include ::Spree::PaymentMethod::Check::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PaymentMethod::Check::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::Check::GeneratedRelationMethods
end

class Spree::PaymentMethod::Check::ActiveRecord_AssociationRelation
end

class Spree::PaymentMethod::Check::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::Check::GeneratedRelationMethods
end

class Spree::PaymentMethod::Check::ActiveRecord_Associations_CollectionProxy
end

class Spree::PaymentMethod::Check::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::Check::GeneratedRelationMethods
end

class Spree::PaymentMethod::Check::ActiveRecord_Relation
end

module Spree::PaymentMethod::Check::GeneratedAssociationMethods
end

module Spree::PaymentMethod::Check::GeneratedAssociationMethods
end

module Spree::PaymentMethod::Check::GeneratedAttributeMethods
end

module Spree::PaymentMethod::Check::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PaymentMethod::Check::GeneratedRelationMethods
end

module Spree::PaymentMethod::Check::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PaymentMethod::CreditCard
  include ::Spree::PaymentMethod::CreditCard::GeneratedAttributeMethods
  include ::Spree::PaymentMethod::CreditCard::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

module Spree::PaymentMethod::CreditCard::GeneratedAssociationMethods
end

module Spree::PaymentMethod::CreditCard::GeneratedAssociationMethods
end

module Spree::PaymentMethod::CreditCard::GeneratedAttributeMethods
end

module Spree::PaymentMethod::CreditCard::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
end

module Spree::PaymentMethod::CreditCard::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree::PaymentMethod::GeneratedAssociationMethods
  def credit_card_ids(); end

  def credit_card_ids=(ids); end

  def credit_cards(); end

  def credit_cards=(value); end

  def payment_ids(); end

  def payment_ids=(ids); end

  def payments(); end

  def payments=(value); end

  def store_ids(); end

  def store_ids=(ids); end

  def store_payment_method_ids(); end

  def store_payment_method_ids=(ids); end

  def store_payment_methods(); end

  def store_payment_methods=(value); end

  def stores(); end

  def stores=(value); end
end

module Spree::PaymentMethod::GeneratedAssociationMethods
end

module Spree::PaymentMethod::GeneratedAttributeMethods
end

module Spree::PaymentMethod::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PaymentMethod::GeneratedRelationMethods
  def active(*args, &block); end

  def available_to_admin(*args, &block); end

  def available_to_store(*args, &block); end

  def available_to_users(*args, &block); end

  def discarded(*args, &block); end

  def in_list(*args, &block); end

  def kept(*args, &block); end

  def ordered_by_position(*args, &block); end

  def paranoia_scope(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::PaymentMethod::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PaymentMethod::SimpleBogusCreditCard
  include ::Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedAttributeMethods
  include ::Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

module Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedAssociationMethods
end

module Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedAssociationMethods
end

module Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedAttributeMethods
end

module Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedRelationMethods
end

module Spree::PaymentMethod::SimpleBogusCreditCard::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PaymentMethod::StoreCredit
  include ::Spree::PaymentMethod::StoreCredit::GeneratedAttributeMethods
  include ::Spree::PaymentMethod::StoreCredit::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PaymentMethod::StoreCredit::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::StoreCredit::GeneratedRelationMethods
end

class Spree::PaymentMethod::StoreCredit::ActiveRecord_AssociationRelation
end

class Spree::PaymentMethod::StoreCredit::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::StoreCredit::GeneratedRelationMethods
end

class Spree::PaymentMethod::StoreCredit::ActiveRecord_Associations_CollectionProxy
end

class Spree::PaymentMethod::StoreCredit::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentMethod::GeneratedRelationMethods
  include ::Spree::PaymentMethod::StoreCredit::GeneratedRelationMethods
end

class Spree::PaymentMethod::StoreCredit::ActiveRecord_Relation
end

module Spree::PaymentMethod::StoreCredit::GeneratedAssociationMethods
end

module Spree::PaymentMethod::StoreCredit::GeneratedAssociationMethods
end

module Spree::PaymentMethod::StoreCredit::GeneratedAttributeMethods
end

module Spree::PaymentMethod::StoreCredit::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PaymentMethod::StoreCredit::GeneratedRelationMethods
end

module Spree::PaymentMethod::StoreCredit::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PaymentMethod
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.active(*args); end

  def self.acts_as_list_top(); end

  def self.after_add_for_credit_cards(); end

  def self.after_add_for_credit_cards=(val); end

  def self.after_add_for_credit_cards?(); end

  def self.after_add_for_payments(); end

  def self.after_add_for_payments=(val); end

  def self.after_add_for_payments?(); end

  def self.after_add_for_store_payment_methods(); end

  def self.after_add_for_store_payment_methods=(val); end

  def self.after_add_for_store_payment_methods?(); end

  def self.after_add_for_stores(); end

  def self.after_add_for_stores=(val); end

  def self.after_add_for_stores?(); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_remove_for_credit_cards(); end

  def self.after_remove_for_credit_cards=(val); end

  def self.after_remove_for_credit_cards?(); end

  def self.after_remove_for_payments(); end

  def self.after_remove_for_payments=(val); end

  def self.after_remove_for_payments?(); end

  def self.after_remove_for_store_payment_methods(); end

  def self.after_remove_for_store_payment_methods=(val); end

  def self.after_remove_for_store_payment_methods?(); end

  def self.after_remove_for_stores(); end

  def self.after_remove_for_stores=(val); end

  def self.after_remove_for_stores?(); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.available_to_admin(*args); end

  def self.available_to_store(*args); end

  def self.available_to_users(*args); end

  def self.before_add_for_credit_cards(); end

  def self.before_add_for_credit_cards=(val); end

  def self.before_add_for_credit_cards?(); end

  def self.before_add_for_payments(); end

  def self.before_add_for_payments=(val); end

  def self.before_add_for_payments?(); end

  def self.before_add_for_store_payment_methods(); end

  def self.before_add_for_store_payment_methods=(val); end

  def self.before_add_for_store_payment_methods?(); end

  def self.before_add_for_stores(); end

  def self.before_add_for_stores=(val); end

  def self.before_add_for_stores?(); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_remove_for_credit_cards(); end

  def self.before_remove_for_credit_cards=(val); end

  def self.before_remove_for_credit_cards?(); end

  def self.before_remove_for_payments(); end

  def self.before_remove_for_payments=(val); end

  def self.before_remove_for_payments?(); end

  def self.before_remove_for_store_payment_methods(); end

  def self.before_remove_for_store_payment_methods=(val); end

  def self.before_remove_for_store_payment_methods?(); end

  def self.before_remove_for_stores(); end

  def self.before_remove_for_stores=(val); end

  def self.before_remove_for_stores?(); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.kept(*args); end

  def self.ordered_by_position(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.undiscarded(*args); end

  def self.update_all_with_touch(updates); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::PaymentSource
  include ::Spree::PaymentSource::GeneratedAttributeMethods
  include ::Spree::PaymentSource::GeneratedAssociationMethods
  def after_add_for_payments(); end

  def after_add_for_payments=(val); end

  def after_add_for_payments?(); end

  def after_add_for_wallet_payment_sources(); end

  def after_add_for_wallet_payment_sources=(val); end

  def after_add_for_wallet_payment_sources?(); end

  def after_remove_for_payments(); end

  def after_remove_for_payments=(val); end

  def after_remove_for_payments?(); end

  def after_remove_for_wallet_payment_sources(); end

  def after_remove_for_wallet_payment_sources=(val); end

  def after_remove_for_wallet_payment_sources?(); end

  def autosave_associated_records_for_payment_method(*args); end

  def autosave_associated_records_for_payments(*args); end

  def autosave_associated_records_for_wallet_payment_sources(*args); end

  def before_add_for_payments(); end

  def before_add_for_payments=(val); end

  def before_add_for_payments?(); end

  def before_add_for_wallet_payment_sources(); end

  def before_add_for_wallet_payment_sources=(val); end

  def before_add_for_wallet_payment_sources?(); end

  def before_remove_for_payments(); end

  def before_remove_for_payments=(val); end

  def before_remove_for_payments?(); end

  def before_remove_for_wallet_payment_sources(); end

  def before_remove_for_wallet_payment_sources=(val); end

  def before_remove_for_wallet_payment_sources?(); end

  def validate_associated_records_for_payments(*args); end

  def validate_associated_records_for_wallet_payment_sources(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PaymentSource::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentSource::GeneratedRelationMethods
end

class Spree::PaymentSource::ActiveRecord_AssociationRelation
end

class Spree::PaymentSource::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentSource::GeneratedRelationMethods
end

class Spree::PaymentSource::ActiveRecord_Associations_CollectionProxy
end

class Spree::PaymentSource::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PaymentSource::GeneratedRelationMethods
end

class Spree::PaymentSource::ActiveRecord_Relation
end

module Spree::PaymentSource::GeneratedAssociationMethods
  def build_payment_method(*args, &block); end

  def create_payment_method(*args, &block); end

  def create_payment_method!(*args, &block); end

  def payment_ids(); end

  def payment_ids=(ids); end

  def payment_method(); end

  def payment_method=(value); end

  def payments(); end

  def payments=(value); end

  def reload_payment_method(); end

  def wallet_payment_source_ids(); end

  def wallet_payment_source_ids=(ids); end

  def wallet_payment_sources(); end

  def wallet_payment_sources=(value); end
end

module Spree::PaymentSource::GeneratedAssociationMethods
end

module Spree::PaymentSource::GeneratedAttributeMethods
end

module Spree::PaymentSource::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PaymentSource::GeneratedRelationMethods
end

module Spree::PaymentSource::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PaymentSource
  def self.after_add_for_payments(); end

  def self.after_add_for_payments=(val); end

  def self.after_add_for_payments?(); end

  def self.after_add_for_wallet_payment_sources(); end

  def self.after_add_for_wallet_payment_sources=(val); end

  def self.after_add_for_wallet_payment_sources?(); end

  def self.after_remove_for_payments(); end

  def self.after_remove_for_payments=(val); end

  def self.after_remove_for_payments?(); end

  def self.after_remove_for_wallet_payment_sources(); end

  def self.after_remove_for_wallet_payment_sources=(val); end

  def self.after_remove_for_wallet_payment_sources?(); end

  def self.before_add_for_payments(); end

  def self.before_add_for_payments=(val); end

  def self.before_add_for_payments?(); end

  def self.before_add_for_wallet_payment_sources(); end

  def self.before_add_for_wallet_payment_sources=(val); end

  def self.before_add_for_wallet_payment_sources?(); end

  def self.before_remove_for_payments(); end

  def self.before_remove_for_payments=(val); end

  def self.before_remove_for_payments?(); end

  def self.before_remove_for_wallet_payment_sources(); end

  def self.before_remove_for_wallet_payment_sources=(val); end

  def self.before_remove_for_wallet_payment_sources?(); end
end

module Spree::PermittedAttributes
  def address_attributes(); end

  def address_book_attributes(); end

  def checkout_address_attributes(); end

  def checkout_confirm_attributes(); end

  def checkout_delivery_attributes(); end

  def checkout_payment_attributes(); end

  def credit_card_update_attributes(); end

  def customer_return_attributes(); end

  def image_attributes(); end

  def inventory_unit_attributes(); end

  def line_item_attributes(); end

  def option_type_attributes(); end

  def option_value_attributes(); end

  def payment_attributes(); end

  def product_attributes(); end

  def product_properties_attributes(); end

  def property_attributes(); end

  def return_authorization_attributes(); end

  def shipment_attributes(); end

  def source_attributes(); end

  def stock_item_attributes(); end

  def stock_location_attributes(); end

  def stock_movement_attributes(); end

  def store_attributes(); end

  def taxon_attributes(); end

  def taxonomy_attributes(); end

  def user_attributes(); end

  def variant_attributes(); end
end

module Spree::PermittedAttributes
  def self.address_attributes(); end

  def self.address_book_attributes(); end

  def self.checkout_address_attributes(); end

  def self.checkout_confirm_attributes(); end

  def self.checkout_delivery_attributes(); end

  def self.checkout_payment_attributes(); end

  def self.credit_card_update_attributes(); end

  def self.customer_return_attributes(); end

  def self.image_attributes(); end

  def self.inventory_unit_attributes(); end

  def self.line_item_attributes(); end

  def self.option_type_attributes(); end

  def self.option_value_attributes(); end

  def self.payment_attributes(); end

  def self.product_attributes(); end

  def self.product_properties_attributes(); end

  def self.property_attributes(); end

  def self.return_authorization_attributes(); end

  def self.shipment_attributes(); end

  def self.source_attributes(); end

  def self.stock_item_attributes(); end

  def self.stock_location_attributes(); end

  def self.stock_movement_attributes(); end

  def self.store_attributes(); end

  def self.taxon_attributes(); end

  def self.taxonomy_attributes(); end

  def self.user_attributes(); end

  def self.variant_attributes(); end
end

class Spree::Preference
  include ::Spree::Preference::GeneratedAttributeMethods
  include ::Spree::Preference::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Preference::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Preference::GeneratedRelationMethods
end

class Spree::Preference::ActiveRecord_AssociationRelation
end

class Spree::Preference::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Preference::GeneratedRelationMethods
end

class Spree::Preference::ActiveRecord_Associations_CollectionProxy
end

class Spree::Preference::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Preference::GeneratedRelationMethods
end

class Spree::Preference::ActiveRecord_Relation
end

module Spree::Preference::GeneratedAssociationMethods
end

module Spree::Preference::GeneratedAssociationMethods
end

module Spree::Preference::GeneratedAttributeMethods
end

module Spree::Preference::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Preference::GeneratedRelationMethods
end

module Spree::Preference::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Preferences::Configuration
  extend ::Spree::Preferences::PreferableClassMethods
end

class Spree::Price
  include ::Spree::Price::GeneratedAttributeMethods
  include ::Spree::Price::GeneratedAssociationMethods
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def autosave_associated_records_for_country(*args); end

  def autosave_associated_records_for_variant(*args); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def display_amount(); end

  def display_price(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Price::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Price::GeneratedRelationMethods
end

class Spree::Price::ActiveRecord_AssociationRelation
end

class Spree::Price::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Price::GeneratedRelationMethods
end

class Spree::Price::ActiveRecord_Associations_CollectionProxy
end

class Spree::Price::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Price::GeneratedRelationMethods
end

class Spree::Price::ActiveRecord_Relation
end

module Spree::Price::GeneratedAssociationMethods
  def build_country(*args, &block); end

  def build_variant(*args, &block); end

  def country(); end

  def country=(value); end

  def create_country(*args, &block); end

  def create_country!(*args, &block); end

  def create_variant(*args, &block); end

  def create_variant!(*args, &block); end

  def reload_country(); end

  def reload_variant(); end

  def variant(); end

  def variant=(value); end
end

module Spree::Price::GeneratedAssociationMethods
end

module Spree::Price::GeneratedAttributeMethods
end

module Spree::Price::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Price::GeneratedRelationMethods
  def currently_valid(*args, &block); end

  def discarded(*args, &block); end

  def for_any_country(*args, &block); end

  def for_master(*args, &block); end

  def for_variant(*args, &block); end

  def kept(*args, &block); end

  def undiscarded(*args, &block); end

  def with_default_attributes(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::Price::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Price
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.currently_valid(*args); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.for_any_country(*args); end

  def self.for_master(*args); end

  def self.for_variant(*args); end

  def self.kept(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.undiscarded(*args); end

  def self.with_default_attributes(*args); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::Product
  include ::Spree::Product::GeneratedAttributeMethods
  include ::Spree::Product::GeneratedAssociationMethods
  include ::FriendlyId::Reserved
  include ::FriendlyId::Model
  include ::FriendlyId::Slugged
  include ::FriendlyId::History
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  include ::Spree::Product::Scopes
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def after_add_for_classifications(); end

  def after_add_for_classifications=(val); end

  def after_add_for_classifications?(); end

  def after_add_for_line_items(); end

  def after_add_for_line_items=(val); end

  def after_add_for_line_items?(); end

  def after_add_for_option_types(); end

  def after_add_for_option_types=(val); end

  def after_add_for_option_types?(); end

  def after_add_for_orders(); end

  def after_add_for_orders=(val); end

  def after_add_for_orders?(); end

  def after_add_for_prices(); end

  def after_add_for_prices=(val); end

  def after_add_for_prices?(); end

  def after_add_for_product_option_types(); end

  def after_add_for_product_option_types=(val); end

  def after_add_for_product_option_types?(); end

  def after_add_for_product_promotion_rules(); end

  def after_add_for_product_promotion_rules=(val); end

  def after_add_for_product_promotion_rules?(); end

  def after_add_for_product_properties(); end

  def after_add_for_product_properties=(val); end

  def after_add_for_product_properties?(); end

  def after_add_for_promotion_rules(); end

  def after_add_for_promotion_rules=(val); end

  def after_add_for_promotion_rules?(); end

  def after_add_for_properties(); end

  def after_add_for_properties=(val); end

  def after_add_for_properties?(); end

  def after_add_for_slugs(); end

  def after_add_for_slugs=(val); end

  def after_add_for_slugs?(); end

  def after_add_for_stock_items(); end

  def after_add_for_stock_items=(val); end

  def after_add_for_stock_items?(); end

  def after_add_for_taxons(); end

  def after_add_for_taxons=(val); end

  def after_add_for_taxons?(); end

  def after_add_for_variant_images(); end

  def after_add_for_variant_images=(val); end

  def after_add_for_variant_images?(); end

  def after_add_for_variant_property_rule_conditions(); end

  def after_add_for_variant_property_rule_conditions=(val); end

  def after_add_for_variant_property_rule_conditions?(); end

  def after_add_for_variant_property_rule_values(); end

  def after_add_for_variant_property_rule_values=(val); end

  def after_add_for_variant_property_rule_values?(); end

  def after_add_for_variant_property_rules(); end

  def after_add_for_variant_property_rules=(val); end

  def after_add_for_variant_property_rules?(); end

  def after_add_for_variants(); end

  def after_add_for_variants=(val); end

  def after_add_for_variants?(); end

  def after_add_for_variants_including_master(); end

  def after_add_for_variants_including_master=(val); end

  def after_add_for_variants_including_master?(); end

  def after_remove_for_classifications(); end

  def after_remove_for_classifications=(val); end

  def after_remove_for_classifications?(); end

  def after_remove_for_line_items(); end

  def after_remove_for_line_items=(val); end

  def after_remove_for_line_items?(); end

  def after_remove_for_option_types(); end

  def after_remove_for_option_types=(val); end

  def after_remove_for_option_types?(); end

  def after_remove_for_orders(); end

  def after_remove_for_orders=(val); end

  def after_remove_for_orders?(); end

  def after_remove_for_prices(); end

  def after_remove_for_prices=(val); end

  def after_remove_for_prices?(); end

  def after_remove_for_product_option_types(); end

  def after_remove_for_product_option_types=(val); end

  def after_remove_for_product_option_types?(); end

  def after_remove_for_product_promotion_rules(); end

  def after_remove_for_product_promotion_rules=(val); end

  def after_remove_for_product_promotion_rules?(); end

  def after_remove_for_product_properties(); end

  def after_remove_for_product_properties=(val); end

  def after_remove_for_product_properties?(); end

  def after_remove_for_promotion_rules(); end

  def after_remove_for_promotion_rules=(val); end

  def after_remove_for_promotion_rules?(); end

  def after_remove_for_properties(); end

  def after_remove_for_properties=(val); end

  def after_remove_for_properties?(); end

  def after_remove_for_slugs(); end

  def after_remove_for_slugs=(val); end

  def after_remove_for_slugs?(); end

  def after_remove_for_stock_items(); end

  def after_remove_for_stock_items=(val); end

  def after_remove_for_stock_items?(); end

  def after_remove_for_taxons(); end

  def after_remove_for_taxons=(val); end

  def after_remove_for_taxons?(); end

  def after_remove_for_variant_images(); end

  def after_remove_for_variant_images=(val); end

  def after_remove_for_variant_images?(); end

  def after_remove_for_variant_property_rule_conditions(); end

  def after_remove_for_variant_property_rule_conditions=(val); end

  def after_remove_for_variant_property_rule_conditions?(); end

  def after_remove_for_variant_property_rule_values(); end

  def after_remove_for_variant_property_rule_values=(val); end

  def after_remove_for_variant_property_rule_values?(); end

  def after_remove_for_variant_property_rules(); end

  def after_remove_for_variant_property_rules=(val); end

  def after_remove_for_variant_property_rules?(); end

  def after_remove_for_variants(); end

  def after_remove_for_variants=(val); end

  def after_remove_for_variants?(); end

  def after_remove_for_variants_including_master(); end

  def after_remove_for_variants_including_master=(val); end

  def after_remove_for_variants_including_master?(); end

  def autosave_associated_records_for_classifications(*args); end

  def autosave_associated_records_for_line_items(*args); end

  def autosave_associated_records_for_master(); end

  def autosave_associated_records_for_option_types(*args); end

  def autosave_associated_records_for_orders(*args); end

  def autosave_associated_records_for_prices(*args); end

  def autosave_associated_records_for_product_option_types(*args); end

  def autosave_associated_records_for_product_promotion_rules(*args); end

  def autosave_associated_records_for_product_properties(*args); end

  def autosave_associated_records_for_promotion_rules(*args); end

  def autosave_associated_records_for_properties(*args); end

  def autosave_associated_records_for_shipping_category(*args); end

  def autosave_associated_records_for_slugs(*args); end

  def autosave_associated_records_for_stock_items(*args); end

  def autosave_associated_records_for_tax_category(*args); end

  def autosave_associated_records_for_taxons(*args); end

  def autosave_associated_records_for_variant_images(*args); end

  def autosave_associated_records_for_variant_property_rule_conditions(*args); end

  def autosave_associated_records_for_variant_property_rule_values(*args); end

  def autosave_associated_records_for_variant_property_rules(*args); end

  def autosave_associated_records_for_variants(*args); end

  def autosave_associated_records_for_variants_including_master(*args); end

  def before_add_for_classifications(); end

  def before_add_for_classifications=(val); end

  def before_add_for_classifications?(); end

  def before_add_for_line_items(); end

  def before_add_for_line_items=(val); end

  def before_add_for_line_items?(); end

  def before_add_for_option_types(); end

  def before_add_for_option_types=(val); end

  def before_add_for_option_types?(); end

  def before_add_for_orders(); end

  def before_add_for_orders=(val); end

  def before_add_for_orders?(); end

  def before_add_for_prices(); end

  def before_add_for_prices=(val); end

  def before_add_for_prices?(); end

  def before_add_for_product_option_types(); end

  def before_add_for_product_option_types=(val); end

  def before_add_for_product_option_types?(); end

  def before_add_for_product_promotion_rules(); end

  def before_add_for_product_promotion_rules=(val); end

  def before_add_for_product_promotion_rules?(); end

  def before_add_for_product_properties(); end

  def before_add_for_product_properties=(val); end

  def before_add_for_product_properties?(); end

  def before_add_for_promotion_rules(); end

  def before_add_for_promotion_rules=(val); end

  def before_add_for_promotion_rules?(); end

  def before_add_for_properties(); end

  def before_add_for_properties=(val); end

  def before_add_for_properties?(); end

  def before_add_for_slugs(); end

  def before_add_for_slugs=(val); end

  def before_add_for_slugs?(); end

  def before_add_for_stock_items(); end

  def before_add_for_stock_items=(val); end

  def before_add_for_stock_items?(); end

  def before_add_for_taxons(); end

  def before_add_for_taxons=(val); end

  def before_add_for_taxons?(); end

  def before_add_for_variant_images(); end

  def before_add_for_variant_images=(val); end

  def before_add_for_variant_images?(); end

  def before_add_for_variant_property_rule_conditions(); end

  def before_add_for_variant_property_rule_conditions=(val); end

  def before_add_for_variant_property_rule_conditions?(); end

  def before_add_for_variant_property_rule_values(); end

  def before_add_for_variant_property_rule_values=(val); end

  def before_add_for_variant_property_rule_values?(); end

  def before_add_for_variant_property_rules(); end

  def before_add_for_variant_property_rules=(val); end

  def before_add_for_variant_property_rules?(); end

  def before_add_for_variants(); end

  def before_add_for_variants=(val); end

  def before_add_for_variants?(); end

  def before_add_for_variants_including_master(); end

  def before_add_for_variants_including_master=(val); end

  def before_add_for_variants_including_master?(); end

  def before_remove_for_classifications(); end

  def before_remove_for_classifications=(val); end

  def before_remove_for_classifications?(); end

  def before_remove_for_line_items(); end

  def before_remove_for_line_items=(val); end

  def before_remove_for_line_items?(); end

  def before_remove_for_option_types(); end

  def before_remove_for_option_types=(val); end

  def before_remove_for_option_types?(); end

  def before_remove_for_orders(); end

  def before_remove_for_orders=(val); end

  def before_remove_for_orders?(); end

  def before_remove_for_prices(); end

  def before_remove_for_prices=(val); end

  def before_remove_for_prices?(); end

  def before_remove_for_product_option_types(); end

  def before_remove_for_product_option_types=(val); end

  def before_remove_for_product_option_types?(); end

  def before_remove_for_product_promotion_rules(); end

  def before_remove_for_product_promotion_rules=(val); end

  def before_remove_for_product_promotion_rules?(); end

  def before_remove_for_product_properties(); end

  def before_remove_for_product_properties=(val); end

  def before_remove_for_product_properties?(); end

  def before_remove_for_promotion_rules(); end

  def before_remove_for_promotion_rules=(val); end

  def before_remove_for_promotion_rules?(); end

  def before_remove_for_properties(); end

  def before_remove_for_properties=(val); end

  def before_remove_for_properties?(); end

  def before_remove_for_slugs(); end

  def before_remove_for_slugs=(val); end

  def before_remove_for_slugs?(); end

  def before_remove_for_stock_items(); end

  def before_remove_for_stock_items=(val); end

  def before_remove_for_stock_items?(); end

  def before_remove_for_taxons(); end

  def before_remove_for_taxons=(val); end

  def before_remove_for_taxons?(); end

  def before_remove_for_variant_images(); end

  def before_remove_for_variant_images=(val); end

  def before_remove_for_variant_images?(); end

  def before_remove_for_variant_property_rule_conditions(); end

  def before_remove_for_variant_property_rule_conditions=(val); end

  def before_remove_for_variant_property_rule_conditions?(); end

  def before_remove_for_variant_property_rule_values(); end

  def before_remove_for_variant_property_rule_values=(val); end

  def before_remove_for_variant_property_rule_values?(); end

  def before_remove_for_variant_property_rules(); end

  def before_remove_for_variant_property_rules=(val); end

  def before_remove_for_variant_property_rules?(); end

  def before_remove_for_variants(); end

  def before_remove_for_variants=(val); end

  def before_remove_for_variants?(); end

  def before_remove_for_variants_including_master(); end

  def before_remove_for_variants_including_master=(val); end

  def before_remove_for_variants_including_master?(); end

  def cost_currency(*args, &block); end

  def cost_currency=(arg); end

  def cost_price(*args, &block); end

  def cost_price=(arg); end

  def depth(*args, &block); end

  def depth=(arg); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def height(*args, &block); end

  def height=(arg); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def price(*args, &block); end

  def price=(arg); end

  def really_delete(); end

  def really_destroyed?(); end

  def search_scopes(); end

  def search_scopes=(obj); end

  def sku(*args, &block); end

  def sku=(arg); end

  def validate_associated_records_for_classifications(*args); end

  def validate_associated_records_for_line_items(*args); end

  def validate_associated_records_for_master(*args); end

  def validate_associated_records_for_option_types(*args); end

  def validate_associated_records_for_orders(*args); end

  def validate_associated_records_for_prices(*args); end

  def validate_associated_records_for_product_option_types(*args); end

  def validate_associated_records_for_product_promotion_rules(*args); end

  def validate_associated_records_for_product_properties(*args); end

  def validate_associated_records_for_promotion_rules(*args); end

  def validate_associated_records_for_properties(*args); end

  def validate_associated_records_for_slugs(*args); end

  def validate_associated_records_for_stock_items(*args); end

  def validate_associated_records_for_taxons(*args); end

  def validate_associated_records_for_variant_images(*args); end

  def validate_associated_records_for_variant_property_rule_conditions(*args); end

  def validate_associated_records_for_variant_property_rule_values(*args); end

  def validate_associated_records_for_variant_property_rules(*args); end

  def validate_associated_records_for_variants(*args); end

  def validate_associated_records_for_variants_including_master(*args); end

  def weight(*args, &block); end

  def weight=(arg); end

  def width(*args, &block); end

  def width=(arg); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Product::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Product::GeneratedRelationMethods
end

class Spree::Product::ActiveRecord_AssociationRelation
end

class Spree::Product::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Product::GeneratedRelationMethods
end

class Spree::Product::ActiveRecord_Associations_CollectionProxy
end

class Spree::Product::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Product::GeneratedRelationMethods
end

class Spree::Product::ActiveRecord_Relation
end

module Spree::Product::GeneratedAssociationMethods
  def build_master(*args, &block); end

  def build_shipping_category(*args, &block); end

  def build_tax_category(*args, &block); end

  def classification_ids(); end

  def classification_ids=(ids); end

  def classifications(); end

  def classifications=(value); end

  def create_master(*args, &block); end

  def create_master!(*args, &block); end

  def create_shipping_category(*args, &block); end

  def create_shipping_category!(*args, &block); end

  def create_tax_category(*args, &block); end

  def create_tax_category!(*args, &block); end

  def line_item_ids(); end

  def line_item_ids=(ids); end

  def line_items(); end

  def line_items=(value); end

  def master(); end

  def master=(value); end

  def option_type_ids(); end

  def option_type_ids=(ids); end

  def option_types(); end

  def option_types=(value); end

  def order_ids(); end

  def order_ids=(ids); end

  def orders(); end

  def orders=(value); end

  def price_ids(); end

  def price_ids=(ids); end

  def prices(); end

  def prices=(value); end

  def product_option_type_ids(); end

  def product_option_type_ids=(ids); end

  def product_option_types(); end

  def product_option_types=(value); end

  def product_promotion_rule_ids(); end

  def product_promotion_rule_ids=(ids); end

  def product_promotion_rules(); end

  def product_promotion_rules=(value); end

  def product_properties(); end

  def product_properties=(value); end

  def product_properties_attributes=(attributes); end

  def product_property_ids(); end

  def product_property_ids=(ids); end

  def promotion_rule_ids(); end

  def promotion_rule_ids=(ids); end

  def promotion_rules(); end

  def promotion_rules=(value); end

  def properties(); end

  def properties=(value); end

  def property_ids(); end

  def property_ids=(ids); end

  def reload_master(); end

  def reload_shipping_category(); end

  def reload_tax_category(); end

  def shipping_category(); end

  def shipping_category=(value); end

  def slug_ids(); end

  def slug_ids=(ids); end

  def slugs(); end

  def slugs=(value); end

  def stock_item_ids(); end

  def stock_item_ids=(ids); end

  def stock_items(); end

  def stock_items=(value); end

  def tax_category(); end

  def tax_category=(value); end

  def taxon_ids(); end

  def taxon_ids=(ids); end

  def taxons(); end

  def taxons=(value); end

  def variant_ids(); end

  def variant_ids=(ids); end

  def variant_image_ids(); end

  def variant_image_ids=(ids); end

  def variant_images(); end

  def variant_images=(value); end

  def variant_property_rule_condition_ids(); end

  def variant_property_rule_condition_ids=(ids); end

  def variant_property_rule_conditions(); end

  def variant_property_rule_conditions=(value); end

  def variant_property_rule_ids(); end

  def variant_property_rule_ids=(ids); end

  def variant_property_rule_value_ids(); end

  def variant_property_rule_value_ids=(ids); end

  def variant_property_rule_values(); end

  def variant_property_rule_values=(value); end

  def variant_property_rules(); end

  def variant_property_rules=(value); end

  def variant_property_rules_attributes=(attributes); end

  def variants(); end

  def variants=(value); end

  def variants_including_master(); end

  def variants_including_master=(value); end

  def variants_including_master_ids(); end

  def variants_including_master_ids=(ids); end
end

module Spree::Product::GeneratedAssociationMethods
end

module Spree::Product::GeneratedAttributeMethods
end

module Spree::Product::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Product::GeneratedRelationMethods
  def ascend_by_name(*args, &block); end

  def ascend_by_updated_at(*args, &block); end

  def descend_by_name(*args, &block); end

  def descend_by_updated_at(*args, &block); end

  def discarded(*args, &block); end

  def kept(*args, &block); end

  def paranoia_scope(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end

  def with_master_price(*args, &block); end
end

module Spree::Product::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Product
  extend ::FriendlyId::Base
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.add_search_scope(name, &block); end

  def self.after_add_for_classifications(); end

  def self.after_add_for_classifications=(val); end

  def self.after_add_for_classifications?(); end

  def self.after_add_for_line_items(); end

  def self.after_add_for_line_items=(val); end

  def self.after_add_for_line_items?(); end

  def self.after_add_for_option_types(); end

  def self.after_add_for_option_types=(val); end

  def self.after_add_for_option_types?(); end

  def self.after_add_for_orders(); end

  def self.after_add_for_orders=(val); end

  def self.after_add_for_orders?(); end

  def self.after_add_for_prices(); end

  def self.after_add_for_prices=(val); end

  def self.after_add_for_prices?(); end

  def self.after_add_for_product_option_types(); end

  def self.after_add_for_product_option_types=(val); end

  def self.after_add_for_product_option_types?(); end

  def self.after_add_for_product_promotion_rules(); end

  def self.after_add_for_product_promotion_rules=(val); end

  def self.after_add_for_product_promotion_rules?(); end

  def self.after_add_for_product_properties(); end

  def self.after_add_for_product_properties=(val); end

  def self.after_add_for_product_properties?(); end

  def self.after_add_for_promotion_rules(); end

  def self.after_add_for_promotion_rules=(val); end

  def self.after_add_for_promotion_rules?(); end

  def self.after_add_for_properties(); end

  def self.after_add_for_properties=(val); end

  def self.after_add_for_properties?(); end

  def self.after_add_for_slugs(); end

  def self.after_add_for_slugs=(val); end

  def self.after_add_for_slugs?(); end

  def self.after_add_for_stock_items(); end

  def self.after_add_for_stock_items=(val); end

  def self.after_add_for_stock_items?(); end

  def self.after_add_for_taxons(); end

  def self.after_add_for_taxons=(val); end

  def self.after_add_for_taxons?(); end

  def self.after_add_for_variant_images(); end

  def self.after_add_for_variant_images=(val); end

  def self.after_add_for_variant_images?(); end

  def self.after_add_for_variant_property_rule_conditions(); end

  def self.after_add_for_variant_property_rule_conditions=(val); end

  def self.after_add_for_variant_property_rule_conditions?(); end

  def self.after_add_for_variant_property_rule_values(); end

  def self.after_add_for_variant_property_rule_values=(val); end

  def self.after_add_for_variant_property_rule_values?(); end

  def self.after_add_for_variant_property_rules(); end

  def self.after_add_for_variant_property_rules=(val); end

  def self.after_add_for_variant_property_rules?(); end

  def self.after_add_for_variants(); end

  def self.after_add_for_variants=(val); end

  def self.after_add_for_variants?(); end

  def self.after_add_for_variants_including_master(); end

  def self.after_add_for_variants_including_master=(val); end

  def self.after_add_for_variants_including_master?(); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_remove_for_classifications(); end

  def self.after_remove_for_classifications=(val); end

  def self.after_remove_for_classifications?(); end

  def self.after_remove_for_line_items(); end

  def self.after_remove_for_line_items=(val); end

  def self.after_remove_for_line_items?(); end

  def self.after_remove_for_option_types(); end

  def self.after_remove_for_option_types=(val); end

  def self.after_remove_for_option_types?(); end

  def self.after_remove_for_orders(); end

  def self.after_remove_for_orders=(val); end

  def self.after_remove_for_orders?(); end

  def self.after_remove_for_prices(); end

  def self.after_remove_for_prices=(val); end

  def self.after_remove_for_prices?(); end

  def self.after_remove_for_product_option_types(); end

  def self.after_remove_for_product_option_types=(val); end

  def self.after_remove_for_product_option_types?(); end

  def self.after_remove_for_product_promotion_rules(); end

  def self.after_remove_for_product_promotion_rules=(val); end

  def self.after_remove_for_product_promotion_rules?(); end

  def self.after_remove_for_product_properties(); end

  def self.after_remove_for_product_properties=(val); end

  def self.after_remove_for_product_properties?(); end

  def self.after_remove_for_promotion_rules(); end

  def self.after_remove_for_promotion_rules=(val); end

  def self.after_remove_for_promotion_rules?(); end

  def self.after_remove_for_properties(); end

  def self.after_remove_for_properties=(val); end

  def self.after_remove_for_properties?(); end

  def self.after_remove_for_slugs(); end

  def self.after_remove_for_slugs=(val); end

  def self.after_remove_for_slugs?(); end

  def self.after_remove_for_stock_items(); end

  def self.after_remove_for_stock_items=(val); end

  def self.after_remove_for_stock_items?(); end

  def self.after_remove_for_taxons(); end

  def self.after_remove_for_taxons=(val); end

  def self.after_remove_for_taxons?(); end

  def self.after_remove_for_variant_images(); end

  def self.after_remove_for_variant_images=(val); end

  def self.after_remove_for_variant_images?(); end

  def self.after_remove_for_variant_property_rule_conditions(); end

  def self.after_remove_for_variant_property_rule_conditions=(val); end

  def self.after_remove_for_variant_property_rule_conditions?(); end

  def self.after_remove_for_variant_property_rule_values(); end

  def self.after_remove_for_variant_property_rule_values=(val); end

  def self.after_remove_for_variant_property_rule_values?(); end

  def self.after_remove_for_variant_property_rules(); end

  def self.after_remove_for_variant_property_rules=(val); end

  def self.after_remove_for_variant_property_rules?(); end

  def self.after_remove_for_variants(); end

  def self.after_remove_for_variants=(val); end

  def self.after_remove_for_variants?(); end

  def self.after_remove_for_variants_including_master(); end

  def self.after_remove_for_variants_including_master=(val); end

  def self.after_remove_for_variants_including_master?(); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.ascend_by_master_price(); end

  def self.ascend_by_name(*args); end

  def self.ascend_by_updated_at(*args); end

  def self.available(available_on=T.unsafe(nil)); end

  def self.before_add_for_classifications(); end

  def self.before_add_for_classifications=(val); end

  def self.before_add_for_classifications?(); end

  def self.before_add_for_line_items(); end

  def self.before_add_for_line_items=(val); end

  def self.before_add_for_line_items?(); end

  def self.before_add_for_option_types(); end

  def self.before_add_for_option_types=(val); end

  def self.before_add_for_option_types?(); end

  def self.before_add_for_orders(); end

  def self.before_add_for_orders=(val); end

  def self.before_add_for_orders?(); end

  def self.before_add_for_prices(); end

  def self.before_add_for_prices=(val); end

  def self.before_add_for_prices?(); end

  def self.before_add_for_product_option_types(); end

  def self.before_add_for_product_option_types=(val); end

  def self.before_add_for_product_option_types?(); end

  def self.before_add_for_product_promotion_rules(); end

  def self.before_add_for_product_promotion_rules=(val); end

  def self.before_add_for_product_promotion_rules?(); end

  def self.before_add_for_product_properties(); end

  def self.before_add_for_product_properties=(val); end

  def self.before_add_for_product_properties?(); end

  def self.before_add_for_promotion_rules(); end

  def self.before_add_for_promotion_rules=(val); end

  def self.before_add_for_promotion_rules?(); end

  def self.before_add_for_properties(); end

  def self.before_add_for_properties=(val); end

  def self.before_add_for_properties?(); end

  def self.before_add_for_slugs(); end

  def self.before_add_for_slugs=(val); end

  def self.before_add_for_slugs?(); end

  def self.before_add_for_stock_items(); end

  def self.before_add_for_stock_items=(val); end

  def self.before_add_for_stock_items?(); end

  def self.before_add_for_taxons(); end

  def self.before_add_for_taxons=(val); end

  def self.before_add_for_taxons?(); end

  def self.before_add_for_variant_images(); end

  def self.before_add_for_variant_images=(val); end

  def self.before_add_for_variant_images?(); end

  def self.before_add_for_variant_property_rule_conditions(); end

  def self.before_add_for_variant_property_rule_conditions=(val); end

  def self.before_add_for_variant_property_rule_conditions?(); end

  def self.before_add_for_variant_property_rule_values(); end

  def self.before_add_for_variant_property_rule_values=(val); end

  def self.before_add_for_variant_property_rule_values?(); end

  def self.before_add_for_variant_property_rules(); end

  def self.before_add_for_variant_property_rules=(val); end

  def self.before_add_for_variant_property_rules?(); end

  def self.before_add_for_variants(); end

  def self.before_add_for_variants=(val); end

  def self.before_add_for_variants?(); end

  def self.before_add_for_variants_including_master(); end

  def self.before_add_for_variants_including_master=(val); end

  def self.before_add_for_variants_including_master?(); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_remove_for_classifications(); end

  def self.before_remove_for_classifications=(val); end

  def self.before_remove_for_classifications?(); end

  def self.before_remove_for_line_items(); end

  def self.before_remove_for_line_items=(val); end

  def self.before_remove_for_line_items?(); end

  def self.before_remove_for_option_types(); end

  def self.before_remove_for_option_types=(val); end

  def self.before_remove_for_option_types?(); end

  def self.before_remove_for_orders(); end

  def self.before_remove_for_orders=(val); end

  def self.before_remove_for_orders?(); end

  def self.before_remove_for_prices(); end

  def self.before_remove_for_prices=(val); end

  def self.before_remove_for_prices?(); end

  def self.before_remove_for_product_option_types(); end

  def self.before_remove_for_product_option_types=(val); end

  def self.before_remove_for_product_option_types?(); end

  def self.before_remove_for_product_promotion_rules(); end

  def self.before_remove_for_product_promotion_rules=(val); end

  def self.before_remove_for_product_promotion_rules?(); end

  def self.before_remove_for_product_properties(); end

  def self.before_remove_for_product_properties=(val); end

  def self.before_remove_for_product_properties?(); end

  def self.before_remove_for_promotion_rules(); end

  def self.before_remove_for_promotion_rules=(val); end

  def self.before_remove_for_promotion_rules?(); end

  def self.before_remove_for_properties(); end

  def self.before_remove_for_properties=(val); end

  def self.before_remove_for_properties?(); end

  def self.before_remove_for_slugs(); end

  def self.before_remove_for_slugs=(val); end

  def self.before_remove_for_slugs?(); end

  def self.before_remove_for_stock_items(); end

  def self.before_remove_for_stock_items=(val); end

  def self.before_remove_for_stock_items?(); end

  def self.before_remove_for_taxons(); end

  def self.before_remove_for_taxons=(val); end

  def self.before_remove_for_taxons?(); end

  def self.before_remove_for_variant_images(); end

  def self.before_remove_for_variant_images=(val); end

  def self.before_remove_for_variant_images?(); end

  def self.before_remove_for_variant_property_rule_conditions(); end

  def self.before_remove_for_variant_property_rule_conditions=(val); end

  def self.before_remove_for_variant_property_rule_conditions?(); end

  def self.before_remove_for_variant_property_rule_values(); end

  def self.before_remove_for_variant_property_rule_values=(val); end

  def self.before_remove_for_variant_property_rule_values?(); end

  def self.before_remove_for_variant_property_rules(); end

  def self.before_remove_for_variant_property_rules=(val); end

  def self.before_remove_for_variant_property_rules?(); end

  def self.before_remove_for_variants(); end

  def self.before_remove_for_variants=(val); end

  def self.before_remove_for_variants?(); end

  def self.before_remove_for_variants_including_master(); end

  def self.before_remove_for_variants_including_master=(val); end

  def self.before_remove_for_variants_including_master?(); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.brand_any(*opts); end

  def self.descend_by_master_price(); end

  def self.descend_by_name(*args); end

  def self.descend_by_popularity(); end

  def self.descend_by_updated_at(*args); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.distinct_by_product_ids(sort_order=T.unsafe(nil)); end

  def self.in_name(words); end

  def self.in_name_or_description(words); end

  def self.in_name_or_keywords(words); end

  def self.in_taxon(taxon); end

  def self.in_taxons(*taxons); end

  def self.kept(*args); end

  def self.master_price_gte(price); end

  def self.master_price_lte(price); end

  def self.not_deleted(); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.price_between(low, high); end

  def self.price_range_any(*opts); end

  def self.property_conditions(property); end

  def self.search_scopes(); end

  def self.search_scopes=(obj); end

  def self.selective_brand_any(*opts); end

  def self.taxons_name_eq(name); end

  def self.undiscarded(*args); end

  def self.with(value); end

  def self.with_discarded(*args); end

  def self.with_ids(*ids); end

  def self.with_master_price(*args); end

  def self.with_option(option); end

  def self.with_option_value(option, value); end

  def self.with_property(property); end

  def self.with_property_value(property, value); end

  def self.with_variant_sku_cont(sku); end

  def self.without_deleted(); end
end

class Spree::ProductOptionType
  include ::Spree::ProductOptionType::GeneratedAttributeMethods
  include ::Spree::ProductOptionType::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def autosave_associated_records_for_option_type(*args); end

  def autosave_associated_records_for_product(*args); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ProductOptionType::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductOptionType::GeneratedRelationMethods
end

class Spree::ProductOptionType::ActiveRecord_AssociationRelation
end

class Spree::ProductOptionType::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductOptionType::GeneratedRelationMethods
end

class Spree::ProductOptionType::ActiveRecord_Associations_CollectionProxy
end

class Spree::ProductOptionType::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductOptionType::GeneratedRelationMethods
end

class Spree::ProductOptionType::ActiveRecord_Relation
end

module Spree::ProductOptionType::GeneratedAssociationMethods
  def build_option_type(*args, &block); end

  def build_product(*args, &block); end

  def create_option_type(*args, &block); end

  def create_option_type!(*args, &block); end

  def create_product(*args, &block); end

  def create_product!(*args, &block); end

  def option_type(); end

  def option_type=(value); end

  def product(); end

  def product=(value); end

  def reload_option_type(); end

  def reload_product(); end
end

module Spree::ProductOptionType::GeneratedAssociationMethods
end

module Spree::ProductOptionType::GeneratedAttributeMethods
end

module Spree::ProductOptionType::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ProductOptionType::GeneratedRelationMethods
  def in_list(*args, &block); end
end

module Spree::ProductOptionType::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ProductOptionType
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::ProductPromotionRule
  include ::Spree::ProductPromotionRule::GeneratedAttributeMethods
  include ::Spree::ProductPromotionRule::GeneratedAssociationMethods
  def autosave_associated_records_for_product(*args); end

  def autosave_associated_records_for_promotion_rule(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ProductPromotionRule::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductPromotionRule::GeneratedRelationMethods
end

class Spree::ProductPromotionRule::ActiveRecord_AssociationRelation
end

class Spree::ProductPromotionRule::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductPromotionRule::GeneratedRelationMethods
end

class Spree::ProductPromotionRule::ActiveRecord_Associations_CollectionProxy
end

class Spree::ProductPromotionRule::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductPromotionRule::GeneratedRelationMethods
end

class Spree::ProductPromotionRule::ActiveRecord_Relation
end

module Spree::ProductPromotionRule::GeneratedAssociationMethods
  def build_product(*args, &block); end

  def build_promotion_rule(*args, &block); end

  def create_product(*args, &block); end

  def create_product!(*args, &block); end

  def create_promotion_rule(*args, &block); end

  def create_promotion_rule!(*args, &block); end

  def product(); end

  def product=(value); end

  def promotion_rule(); end

  def promotion_rule=(value); end

  def reload_product(); end

  def reload_promotion_rule(); end
end

module Spree::ProductPromotionRule::GeneratedAssociationMethods
end

module Spree::ProductPromotionRule::GeneratedAttributeMethods
end

module Spree::ProductPromotionRule::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ProductPromotionRule::GeneratedRelationMethods
end

module Spree::ProductPromotionRule::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ProductProperty
  include ::Spree::ProductProperty::GeneratedAttributeMethods
  include ::Spree::ProductProperty::GeneratedAssociationMethods
  include ::Spree::OrderedPropertyValueList
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def autosave_associated_records_for_product(*args); end

  def autosave_associated_records_for_property(*args); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ProductProperty::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductProperty::GeneratedRelationMethods
end

class Spree::ProductProperty::ActiveRecord_AssociationRelation
end

class Spree::ProductProperty::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductProperty::GeneratedRelationMethods
end

class Spree::ProductProperty::ActiveRecord_Associations_CollectionProxy
end

class Spree::ProductProperty::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ProductProperty::GeneratedRelationMethods
end

class Spree::ProductProperty::ActiveRecord_Relation
end

module Spree::ProductProperty::GeneratedAssociationMethods
  def build_product(*args, &block); end

  def build_property(*args, &block); end

  def create_product(*args, &block); end

  def create_product!(*args, &block); end

  def create_property(*args, &block); end

  def create_property!(*args, &block); end

  def product(); end

  def product=(value); end

  def property(); end

  def property=(value); end

  def reload_product(); end

  def reload_property(); end
end

module Spree::ProductProperty::GeneratedAssociationMethods
end

module Spree::ProductProperty::GeneratedAttributeMethods
end

module Spree::ProductProperty::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ProductProperty::GeneratedRelationMethods
  def in_list(*args, &block); end
end

module Spree::ProductProperty::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ProductProperty
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::Promotion
  include ::Spree::Promotion::GeneratedAttributeMethods
  include ::Spree::Promotion::GeneratedAssociationMethods
  def after_add_for_codes(); end

  def after_add_for_codes=(val); end

  def after_add_for_codes?(); end

  def after_add_for_order_promotions(); end

  def after_add_for_order_promotions=(val); end

  def after_add_for_order_promotions?(); end

  def after_add_for_orders(); end

  def after_add_for_orders=(val); end

  def after_add_for_orders?(); end

  def after_add_for_promotion_actions(); end

  def after_add_for_promotion_actions=(val); end

  def after_add_for_promotion_actions?(); end

  def after_add_for_promotion_code_batches(); end

  def after_add_for_promotion_code_batches=(val); end

  def after_add_for_promotion_code_batches?(); end

  def after_add_for_promotion_rules(); end

  def after_add_for_promotion_rules=(val); end

  def after_add_for_promotion_rules?(); end

  def after_remove_for_codes(); end

  def after_remove_for_codes=(val); end

  def after_remove_for_codes?(); end

  def after_remove_for_order_promotions(); end

  def after_remove_for_order_promotions=(val); end

  def after_remove_for_order_promotions?(); end

  def after_remove_for_orders(); end

  def after_remove_for_orders=(val); end

  def after_remove_for_orders?(); end

  def after_remove_for_promotion_actions(); end

  def after_remove_for_promotion_actions=(val); end

  def after_remove_for_promotion_actions?(); end

  def after_remove_for_promotion_code_batches(); end

  def after_remove_for_promotion_code_batches=(val); end

  def after_remove_for_promotion_code_batches?(); end

  def after_remove_for_promotion_rules(); end

  def after_remove_for_promotion_rules=(val); end

  def after_remove_for_promotion_rules?(); end

  def autosave_associated_records_for_codes(*args); end

  def autosave_associated_records_for_order_promotions(*args); end

  def autosave_associated_records_for_orders(*args); end

  def autosave_associated_records_for_promotion_actions(*args); end

  def autosave_associated_records_for_promotion_category(*args); end

  def autosave_associated_records_for_promotion_code_batches(*args); end

  def autosave_associated_records_for_promotion_rules(*args); end

  def before_add_for_codes(); end

  def before_add_for_codes=(val); end

  def before_add_for_codes?(); end

  def before_add_for_order_promotions(); end

  def before_add_for_order_promotions=(val); end

  def before_add_for_order_promotions?(); end

  def before_add_for_orders(); end

  def before_add_for_orders=(val); end

  def before_add_for_orders?(); end

  def before_add_for_promotion_actions(); end

  def before_add_for_promotion_actions=(val); end

  def before_add_for_promotion_actions?(); end

  def before_add_for_promotion_code_batches(); end

  def before_add_for_promotion_code_batches=(val); end

  def before_add_for_promotion_code_batches?(); end

  def before_add_for_promotion_rules(); end

  def before_add_for_promotion_rules=(val); end

  def before_add_for_promotion_rules?(); end

  def before_remove_for_codes(); end

  def before_remove_for_codes=(val); end

  def before_remove_for_codes?(); end

  def before_remove_for_order_promotions(); end

  def before_remove_for_order_promotions=(val); end

  def before_remove_for_order_promotions?(); end

  def before_remove_for_orders(); end

  def before_remove_for_orders=(val); end

  def before_remove_for_orders?(); end

  def before_remove_for_promotion_actions(); end

  def before_remove_for_promotion_actions=(val); end

  def before_remove_for_promotion_actions?(); end

  def before_remove_for_promotion_code_batches(); end

  def before_remove_for_promotion_code_batches=(val); end

  def before_remove_for_promotion_code_batches?(); end

  def before_remove_for_promotion_rules(); end

  def before_remove_for_promotion_rules=(val); end

  def before_remove_for_promotion_rules?(); end

  def validate_associated_records_for_codes(*args); end

  def validate_associated_records_for_order_promotions(*args); end

  def validate_associated_records_for_orders(*args); end

  def validate_associated_records_for_promotion_actions(*args); end

  def validate_associated_records_for_promotion_code_batches(*args); end

  def validate_associated_records_for_promotion_rules(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Actions::CreateAdjustment
  include ::Spree::Promotion::Actions::CreateAdjustment::GeneratedAttributeMethods
  include ::Spree::Promotion::Actions::CreateAdjustment::GeneratedAssociationMethods
  include ::Spree::CalculatedAdjustments
  include ::Spree::AdjustmentSource
  def after_add_for_adjustments(); end

  def after_add_for_adjustments=(val); end

  def after_add_for_adjustments?(); end

  def after_remove_for_adjustments(); end

  def after_remove_for_adjustments=(val); end

  def after_remove_for_adjustments?(); end

  def autosave_associated_records_for_adjustments(*args); end

  def autosave_associated_records_for_calculator(); end

  def before_add_for_adjustments(); end

  def before_add_for_adjustments=(val); end

  def before_add_for_adjustments?(); end

  def before_remove_for_adjustments(); end

  def before_remove_for_adjustments=(val); end

  def before_remove_for_adjustments?(); end

  def validate_associated_records_for_adjustments(*args); end

  def validate_associated_records_for_calculator(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Actions::CreateAdjustment::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateAdjustment::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateAdjustment::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Actions::CreateAdjustment::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateAdjustment::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateAdjustment::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Actions::CreateAdjustment::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateAdjustment::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateAdjustment::ActiveRecord_Relation
end

module Spree::Promotion::Actions::CreateAdjustment::GeneratedAssociationMethods
  def adjustment_ids(); end

  def adjustment_ids=(ids); end

  def adjustments(); end

  def adjustments=(value); end

  def build_calculator(*args, &block); end

  def calculator(); end

  def calculator=(value); end

  def calculator_attributes=(attributes); end

  def create_calculator(*args, &block); end

  def create_calculator!(*args, &block); end

  def reload_calculator(); end
end

module Spree::Promotion::Actions::CreateAdjustment::GeneratedAssociationMethods
end

module Spree::Promotion::Actions::CreateAdjustment::GeneratedAttributeMethods
end

module Spree::Promotion::Actions::CreateAdjustment::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Actions::CreateAdjustment::GeneratedRelationMethods
end

module Spree::Promotion::Actions::CreateAdjustment::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Actions::CreateAdjustment
  extend ::Spree::CalculatedAdjustments::ClassMethods
  def self.after_add_for_adjustments(); end

  def self.after_add_for_adjustments=(val); end

  def self.after_add_for_adjustments?(); end

  def self.after_remove_for_adjustments(); end

  def self.after_remove_for_adjustments=(val); end

  def self.after_remove_for_adjustments?(); end

  def self.before_add_for_adjustments(); end

  def self.before_add_for_adjustments=(val); end

  def self.before_add_for_adjustments?(); end

  def self.before_remove_for_adjustments(); end

  def self.before_remove_for_adjustments=(val); end

  def self.before_remove_for_adjustments?(); end
end

class Spree::Promotion::Actions::CreateItemAdjustments
  include ::Spree::Promotion::Actions::CreateItemAdjustments::GeneratedAttributeMethods
  include ::Spree::Promotion::Actions::CreateItemAdjustments::GeneratedAssociationMethods
  include ::Spree::CalculatedAdjustments
  include ::Spree::AdjustmentSource
  def after_add_for_adjustments(); end

  def after_add_for_adjustments=(val); end

  def after_add_for_adjustments?(); end

  def after_remove_for_adjustments(); end

  def after_remove_for_adjustments=(val); end

  def after_remove_for_adjustments?(); end

  def autosave_associated_records_for_adjustments(*args); end

  def autosave_associated_records_for_calculator(); end

  def before_add_for_adjustments(); end

  def before_add_for_adjustments=(val); end

  def before_add_for_adjustments?(); end

  def before_remove_for_adjustments(); end

  def before_remove_for_adjustments=(val); end

  def before_remove_for_adjustments?(); end

  def validate_associated_records_for_adjustments(*args); end

  def validate_associated_records_for_calculator(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Actions::CreateItemAdjustments::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateItemAdjustments::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateItemAdjustments::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Actions::CreateItemAdjustments::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateItemAdjustments::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateItemAdjustments::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Actions::CreateItemAdjustments::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateItemAdjustments::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateItemAdjustments::ActiveRecord_Relation
end

module Spree::Promotion::Actions::CreateItemAdjustments::GeneratedAssociationMethods
  def adjustment_ids(); end

  def adjustment_ids=(ids); end

  def adjustments(); end

  def adjustments=(value); end

  def build_calculator(*args, &block); end

  def calculator(); end

  def calculator=(value); end

  def calculator_attributes=(attributes); end

  def create_calculator(*args, &block); end

  def create_calculator!(*args, &block); end

  def reload_calculator(); end
end

module Spree::Promotion::Actions::CreateItemAdjustments::GeneratedAssociationMethods
end

module Spree::Promotion::Actions::CreateItemAdjustments::GeneratedAttributeMethods
end

module Spree::Promotion::Actions::CreateItemAdjustments::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Actions::CreateItemAdjustments::GeneratedRelationMethods
end

module Spree::Promotion::Actions::CreateItemAdjustments::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Actions::CreateItemAdjustments
  extend ::Spree::CalculatedAdjustments::ClassMethods
  def self.after_add_for_adjustments(); end

  def self.after_add_for_adjustments=(val); end

  def self.after_add_for_adjustments?(); end

  def self.after_remove_for_adjustments(); end

  def self.after_remove_for_adjustments=(val); end

  def self.after_remove_for_adjustments?(); end

  def self.before_add_for_adjustments(); end

  def self.before_add_for_adjustments=(val); end

  def self.before_add_for_adjustments?(); end

  def self.before_remove_for_adjustments(); end

  def self.before_remove_for_adjustments=(val); end

  def self.before_remove_for_adjustments?(); end
end

class Spree::Promotion::Actions::CreateQuantityAdjustments
  include ::Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedAttributeMethods
  include ::Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedAssociationMethods
  def after_add_for_line_item_actions(); end

  def after_add_for_line_item_actions=(val); end

  def after_add_for_line_item_actions?(); end

  def after_add_for_line_items(); end

  def after_add_for_line_items=(val); end

  def after_add_for_line_items?(); end

  def after_remove_for_line_item_actions(); end

  def after_remove_for_line_item_actions=(val); end

  def after_remove_for_line_item_actions?(); end

  def after_remove_for_line_items(); end

  def after_remove_for_line_items=(val); end

  def after_remove_for_line_items?(); end

  def autosave_associated_records_for_line_item_actions(*args); end

  def autosave_associated_records_for_line_items(*args); end

  def before_add_for_line_item_actions(); end

  def before_add_for_line_item_actions=(val); end

  def before_add_for_line_item_actions?(); end

  def before_add_for_line_items(); end

  def before_add_for_line_items=(val); end

  def before_add_for_line_items?(); end

  def before_remove_for_line_item_actions(); end

  def before_remove_for_line_item_actions=(val); end

  def before_remove_for_line_item_actions?(); end

  def before_remove_for_line_items(); end

  def before_remove_for_line_items=(val); end

  def before_remove_for_line_items?(); end

  def preferred_group_size(); end

  def preferred_group_size=(value); end

  def preferred_group_size_default(); end

  def preferred_group_size_type(); end

  def validate_associated_records_for_line_item_actions(*args); end

  def validate_associated_records_for_line_items(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Actions::CreateQuantityAdjustments::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateItemAdjustments::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateQuantityAdjustments::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Actions::CreateQuantityAdjustments::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateItemAdjustments::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateQuantityAdjustments::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Actions::CreateQuantityAdjustments::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateItemAdjustments::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedRelationMethods
end

class Spree::Promotion::Actions::CreateQuantityAdjustments::ActiveRecord_Relation
end

module Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedAssociationMethods
  def line_item_action_ids(); end

  def line_item_action_ids=(ids); end

  def line_item_actions(); end

  def line_item_actions=(value); end

  def line_item_ids(); end

  def line_item_ids=(ids); end

  def line_items(); end

  def line_items=(value); end
end

module Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedAssociationMethods
end

module Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedAttributeMethods
end

module Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedRelationMethods
end

module Spree::Promotion::Actions::CreateQuantityAdjustments::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Actions::CreateQuantityAdjustments
  def self.after_add_for_line_item_actions(); end

  def self.after_add_for_line_item_actions=(val); end

  def self.after_add_for_line_item_actions?(); end

  def self.after_add_for_line_items(); end

  def self.after_add_for_line_items=(val); end

  def self.after_add_for_line_items?(); end

  def self.after_remove_for_line_item_actions(); end

  def self.after_remove_for_line_item_actions=(val); end

  def self.after_remove_for_line_item_actions?(); end

  def self.after_remove_for_line_items(); end

  def self.after_remove_for_line_items=(val); end

  def self.after_remove_for_line_items?(); end

  def self.before_add_for_line_item_actions(); end

  def self.before_add_for_line_item_actions=(val); end

  def self.before_add_for_line_item_actions?(); end

  def self.before_add_for_line_items(); end

  def self.before_add_for_line_items=(val); end

  def self.before_add_for_line_items?(); end

  def self.before_remove_for_line_item_actions(); end

  def self.before_remove_for_line_item_actions=(val); end

  def self.before_remove_for_line_item_actions?(); end

  def self.before_remove_for_line_items(); end

  def self.before_remove_for_line_items=(val); end

  def self.before_remove_for_line_items?(); end
end

class Spree::Promotion::Actions::FreeShipping
  include ::Spree::Promotion::Actions::FreeShipping::GeneratedAttributeMethods
  include ::Spree::Promotion::Actions::FreeShipping::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Actions::FreeShipping::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::FreeShipping::GeneratedRelationMethods
end

class Spree::Promotion::Actions::FreeShipping::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Actions::FreeShipping::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::FreeShipping::GeneratedRelationMethods
end

class Spree::Promotion::Actions::FreeShipping::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Actions::FreeShipping::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
  include ::Spree::Promotion::Actions::FreeShipping::GeneratedRelationMethods
end

class Spree::Promotion::Actions::FreeShipping::ActiveRecord_Relation
end

module Spree::Promotion::Actions::FreeShipping::GeneratedAssociationMethods
end

module Spree::Promotion::Actions::FreeShipping::GeneratedAssociationMethods
end

module Spree::Promotion::Actions::FreeShipping::GeneratedAttributeMethods
end

module Spree::Promotion::Actions::FreeShipping::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Actions::FreeShipping::GeneratedRelationMethods
end

module Spree::Promotion::Actions::FreeShipping::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Promotion::GeneratedRelationMethods
end

class Spree::Promotion::ActiveRecord_AssociationRelation
end

class Spree::Promotion::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Promotion::GeneratedRelationMethods
end

class Spree::Promotion::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Promotion::GeneratedRelationMethods
end

class Spree::Promotion::ActiveRecord_Relation
end

module Spree::Promotion::GeneratedAssociationMethods
  def build_promotion_category(*args, &block); end

  def code_ids(); end

  def code_ids=(ids); end

  def codes(); end

  def codes=(value); end

  def create_promotion_category(*args, &block); end

  def create_promotion_category!(*args, &block); end

  def order_ids(); end

  def order_ids=(ids); end

  def order_promotion_ids(); end

  def order_promotion_ids=(ids); end

  def order_promotions(); end

  def order_promotions=(value); end

  def orders(); end

  def orders=(value); end

  def promotion_action_ids(); end

  def promotion_action_ids=(ids); end

  def promotion_actions(); end

  def promotion_actions=(value); end

  def promotion_actions_attributes=(attributes); end

  def promotion_category(); end

  def promotion_category=(value); end

  def promotion_code_batch_ids(); end

  def promotion_code_batch_ids=(ids); end

  def promotion_code_batches(); end

  def promotion_code_batches=(value); end

  def promotion_rule_ids(); end

  def promotion_rule_ids=(ids); end

  def promotion_rules(); end

  def promotion_rules=(value); end

  def promotion_rules_attributes=(attributes); end

  def reload_promotion_category(); end
end

module Spree::Promotion::GeneratedAssociationMethods
end

module Spree::Promotion::GeneratedAttributeMethods
end

module Spree::Promotion::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::GeneratedRelationMethods
  def active(*args, &block); end

  def advertised(*args, &block); end

  def applied(*args, &block); end

  def coupons(*args, &block); end

  def has_actions(*args, &block); end

  def started_and_unexpired(*args, &block); end
end

module Spree::Promotion::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::FirstOrder
  include ::Spree::Promotion::Rules::FirstOrder::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::FirstOrder::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::FirstOrder::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::FirstOrder::GeneratedRelationMethods
end

class Spree::Promotion::Rules::FirstOrder::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::FirstOrder::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::FirstOrder::GeneratedRelationMethods
end

class Spree::Promotion::Rules::FirstOrder::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::FirstOrder::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::FirstOrder::GeneratedRelationMethods
end

class Spree::Promotion::Rules::FirstOrder::ActiveRecord_Relation
end

module Spree::Promotion::Rules::FirstOrder::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::FirstOrder::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::FirstOrder::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::FirstOrder::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::FirstOrder::GeneratedRelationMethods
end

module Spree::Promotion::Rules::FirstOrder::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::FirstRepeatPurchaseSince
  include ::Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedAssociationMethods
  def preferred_days_ago(); end

  def preferred_days_ago=(value); end

  def preferred_days_ago_default(); end

  def preferred_days_ago_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::FirstRepeatPurchaseSince::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedRelationMethods
end

class Spree::Promotion::Rules::FirstRepeatPurchaseSince::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::FirstRepeatPurchaseSince::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedRelationMethods
end

class Spree::Promotion::Rules::FirstRepeatPurchaseSince::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::FirstRepeatPurchaseSince::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedRelationMethods
end

class Spree::Promotion::Rules::FirstRepeatPurchaseSince::ActiveRecord_Relation
end

module Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedRelationMethods
end

module Spree::Promotion::Rules::FirstRepeatPurchaseSince::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::ItemTotal
  include ::Spree::Promotion::Rules::ItemTotal::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::ItemTotal::GeneratedAssociationMethods
  def preferred_amount(); end

  def preferred_amount=(value); end

  def preferred_amount_default(); end

  def preferred_amount_type(); end

  def preferred_currency(); end

  def preferred_currency=(value); end

  def preferred_currency_default(); end

  def preferred_currency_type(); end

  def preferred_operator(); end

  def preferred_operator=(value); end

  def preferred_operator_default(); end

  def preferred_operator_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::ItemTotal::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::ItemTotal::GeneratedRelationMethods
end

class Spree::Promotion::Rules::ItemTotal::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::ItemTotal::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::ItemTotal::GeneratedRelationMethods
end

class Spree::Promotion::Rules::ItemTotal::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::ItemTotal::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::ItemTotal::GeneratedRelationMethods
end

class Spree::Promotion::Rules::ItemTotal::ActiveRecord_Relation
end

module Spree::Promotion::Rules::ItemTotal::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::ItemTotal::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::ItemTotal::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::ItemTotal::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::ItemTotal::GeneratedRelationMethods
end

module Spree::Promotion::Rules::ItemTotal::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::NthOrder
  include ::Spree::Promotion::Rules::NthOrder::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::NthOrder::GeneratedAssociationMethods
  def preferred_nth_order(); end

  def preferred_nth_order=(value); end

  def preferred_nth_order_default(); end

  def preferred_nth_order_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::NthOrder::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::NthOrder::GeneratedRelationMethods
end

class Spree::Promotion::Rules::NthOrder::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::NthOrder::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::NthOrder::GeneratedRelationMethods
end

class Spree::Promotion::Rules::NthOrder::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::NthOrder::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::NthOrder::GeneratedRelationMethods
end

class Spree::Promotion::Rules::NthOrder::ActiveRecord_Relation
end

module Spree::Promotion::Rules::NthOrder::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::NthOrder::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::NthOrder::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::NthOrder::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::NthOrder::GeneratedRelationMethods
end

module Spree::Promotion::Rules::NthOrder::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::OneUsePerUser
  include ::Spree::Promotion::Rules::OneUsePerUser::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::OneUsePerUser::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::OneUsePerUser::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::OneUsePerUser::GeneratedRelationMethods
end

class Spree::Promotion::Rules::OneUsePerUser::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::OneUsePerUser::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::OneUsePerUser::GeneratedRelationMethods
end

class Spree::Promotion::Rules::OneUsePerUser::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::OneUsePerUser::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::OneUsePerUser::GeneratedRelationMethods
end

class Spree::Promotion::Rules::OneUsePerUser::ActiveRecord_Relation
end

module Spree::Promotion::Rules::OneUsePerUser::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::OneUsePerUser::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::OneUsePerUser::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::OneUsePerUser::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::OneUsePerUser::GeneratedRelationMethods
end

module Spree::Promotion::Rules::OneUsePerUser::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::OptionValue
  include ::Spree::Promotion::Rules::OptionValue::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::OptionValue::GeneratedAssociationMethods
  def preferred_eligible_values=(value); end

  def preferred_eligible_values_default(); end

  def preferred_eligible_values_type(); end

  def preferred_match_policy(); end

  def preferred_match_policy=(value); end

  def preferred_match_policy_default(); end

  def preferred_match_policy_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::OptionValue::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::OptionValue::GeneratedRelationMethods
end

class Spree::Promotion::Rules::OptionValue::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::OptionValue::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::OptionValue::GeneratedRelationMethods
end

class Spree::Promotion::Rules::OptionValue::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::OptionValue::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::OptionValue::GeneratedRelationMethods
end

class Spree::Promotion::Rules::OptionValue::ActiveRecord_Relation
end

module Spree::Promotion::Rules::OptionValue::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::OptionValue::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::OptionValue::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::OptionValue::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::OptionValue::GeneratedRelationMethods
end

module Spree::Promotion::Rules::OptionValue::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::Product
  include ::Spree::Promotion::Rules::Product::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::Product::GeneratedAssociationMethods
  def after_add_for_product_promotion_rules(); end

  def after_add_for_product_promotion_rules=(val); end

  def after_add_for_product_promotion_rules?(); end

  def after_add_for_products(); end

  def after_add_for_products=(val); end

  def after_add_for_products?(); end

  def after_remove_for_product_promotion_rules(); end

  def after_remove_for_product_promotion_rules=(val); end

  def after_remove_for_product_promotion_rules?(); end

  def after_remove_for_products(); end

  def after_remove_for_products=(val); end

  def after_remove_for_products?(); end

  def autosave_associated_records_for_product_promotion_rules(*args); end

  def autosave_associated_records_for_products(*args); end

  def before_add_for_product_promotion_rules(); end

  def before_add_for_product_promotion_rules=(val); end

  def before_add_for_product_promotion_rules?(); end

  def before_add_for_products(); end

  def before_add_for_products=(val); end

  def before_add_for_products?(); end

  def before_remove_for_product_promotion_rules(); end

  def before_remove_for_product_promotion_rules=(val); end

  def before_remove_for_product_promotion_rules?(); end

  def before_remove_for_products(); end

  def before_remove_for_products=(val); end

  def before_remove_for_products?(); end

  def preferred_match_policy(); end

  def preferred_match_policy=(value); end

  def preferred_match_policy_default(); end

  def preferred_match_policy_type(); end

  def validate_associated_records_for_product_promotion_rules(*args); end

  def validate_associated_records_for_products(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::Product::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Product::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Product::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::Product::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Product::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Product::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::Product::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Product::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Product::ActiveRecord_Relation
end

module Spree::Promotion::Rules::Product::GeneratedAssociationMethods
  def product_ids(); end

  def product_ids=(ids); end

  def product_promotion_rule_ids(); end

  def product_promotion_rule_ids=(ids); end

  def product_promotion_rules(); end

  def product_promotion_rules=(value); end

  def products(); end

  def products=(value); end
end

module Spree::Promotion::Rules::Product::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::Product::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::Product::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::Product::GeneratedRelationMethods
end

module Spree::Promotion::Rules::Product::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::Product
  def self.after_add_for_product_promotion_rules(); end

  def self.after_add_for_product_promotion_rules=(val); end

  def self.after_add_for_product_promotion_rules?(); end

  def self.after_add_for_products(); end

  def self.after_add_for_products=(val); end

  def self.after_add_for_products?(); end

  def self.after_remove_for_product_promotion_rules(); end

  def self.after_remove_for_product_promotion_rules=(val); end

  def self.after_remove_for_product_promotion_rules?(); end

  def self.after_remove_for_products(); end

  def self.after_remove_for_products=(val); end

  def self.after_remove_for_products?(); end

  def self.before_add_for_product_promotion_rules(); end

  def self.before_add_for_product_promotion_rules=(val); end

  def self.before_add_for_product_promotion_rules?(); end

  def self.before_add_for_products(); end

  def self.before_add_for_products=(val); end

  def self.before_add_for_products?(); end

  def self.before_remove_for_product_promotion_rules(); end

  def self.before_remove_for_product_promotion_rules=(val); end

  def self.before_remove_for_product_promotion_rules?(); end

  def self.before_remove_for_products(); end

  def self.before_remove_for_products=(val); end

  def self.before_remove_for_products?(); end
end

class Spree::Promotion::Rules::Store
  include ::Spree::Promotion::Rules::Store::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::Store::GeneratedAssociationMethods
  def after_add_for_promotion_rule_stores(); end

  def after_add_for_promotion_rule_stores=(val); end

  def after_add_for_promotion_rule_stores?(); end

  def after_add_for_stores(); end

  def after_add_for_stores=(val); end

  def after_add_for_stores?(); end

  def after_remove_for_promotion_rule_stores(); end

  def after_remove_for_promotion_rule_stores=(val); end

  def after_remove_for_promotion_rule_stores?(); end

  def after_remove_for_stores(); end

  def after_remove_for_stores=(val); end

  def after_remove_for_stores?(); end

  def autosave_associated_records_for_promotion_rule_stores(*args); end

  def autosave_associated_records_for_stores(*args); end

  def before_add_for_promotion_rule_stores(); end

  def before_add_for_promotion_rule_stores=(val); end

  def before_add_for_promotion_rule_stores?(); end

  def before_add_for_stores(); end

  def before_add_for_stores=(val); end

  def before_add_for_stores?(); end

  def before_remove_for_promotion_rule_stores(); end

  def before_remove_for_promotion_rule_stores=(val); end

  def before_remove_for_promotion_rule_stores?(); end

  def before_remove_for_stores(); end

  def before_remove_for_stores=(val); end

  def before_remove_for_stores?(); end

  def validate_associated_records_for_promotion_rule_stores(*args); end

  def validate_associated_records_for_stores(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::Store::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Store::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Store::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::Store::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Store::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Store::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::Store::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Store::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Store::ActiveRecord_Relation
end

module Spree::Promotion::Rules::Store::GeneratedAssociationMethods
  def promotion_rule_store_ids(); end

  def promotion_rule_store_ids=(ids); end

  def promotion_rule_stores(); end

  def promotion_rule_stores=(value); end

  def store_ids(); end

  def store_ids=(ids); end

  def stores(); end

  def stores=(value); end
end

module Spree::Promotion::Rules::Store::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::Store::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::Store::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::Store::GeneratedRelationMethods
end

module Spree::Promotion::Rules::Store::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::Store
  def self.after_add_for_promotion_rule_stores(); end

  def self.after_add_for_promotion_rule_stores=(val); end

  def self.after_add_for_promotion_rule_stores?(); end

  def self.after_add_for_stores(); end

  def self.after_add_for_stores=(val); end

  def self.after_add_for_stores?(); end

  def self.after_remove_for_promotion_rule_stores(); end

  def self.after_remove_for_promotion_rule_stores=(val); end

  def self.after_remove_for_promotion_rule_stores?(); end

  def self.after_remove_for_stores(); end

  def self.after_remove_for_stores=(val); end

  def self.after_remove_for_stores?(); end

  def self.before_add_for_promotion_rule_stores(); end

  def self.before_add_for_promotion_rule_stores=(val); end

  def self.before_add_for_promotion_rule_stores?(); end

  def self.before_add_for_stores(); end

  def self.before_add_for_stores=(val); end

  def self.before_add_for_stores?(); end

  def self.before_remove_for_promotion_rule_stores(); end

  def self.before_remove_for_promotion_rule_stores=(val); end

  def self.before_remove_for_promotion_rule_stores?(); end

  def self.before_remove_for_stores(); end

  def self.before_remove_for_stores=(val); end

  def self.before_remove_for_stores?(); end
end

class Spree::Promotion::Rules::Taxon
  include ::Spree::Promotion::Rules::Taxon::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::Taxon::GeneratedAssociationMethods
  def after_add_for_promotion_rule_taxons(); end

  def after_add_for_promotion_rule_taxons=(val); end

  def after_add_for_promotion_rule_taxons?(); end

  def after_add_for_taxons(); end

  def after_add_for_taxons=(val); end

  def after_add_for_taxons?(); end

  def after_remove_for_promotion_rule_taxons(); end

  def after_remove_for_promotion_rule_taxons=(val); end

  def after_remove_for_promotion_rule_taxons?(); end

  def after_remove_for_taxons(); end

  def after_remove_for_taxons=(val); end

  def after_remove_for_taxons?(); end

  def autosave_associated_records_for_promotion_rule_taxons(*args); end

  def autosave_associated_records_for_taxons(*args); end

  def before_add_for_promotion_rule_taxons(); end

  def before_add_for_promotion_rule_taxons=(val); end

  def before_add_for_promotion_rule_taxons?(); end

  def before_add_for_taxons(); end

  def before_add_for_taxons=(val); end

  def before_add_for_taxons?(); end

  def before_remove_for_promotion_rule_taxons(); end

  def before_remove_for_promotion_rule_taxons=(val); end

  def before_remove_for_promotion_rule_taxons?(); end

  def before_remove_for_taxons(); end

  def before_remove_for_taxons=(val); end

  def before_remove_for_taxons?(); end

  def preferred_match_policy(); end

  def preferred_match_policy=(value); end

  def preferred_match_policy_default(); end

  def preferred_match_policy_type(); end

  def validate_associated_records_for_promotion_rule_taxons(*args); end

  def validate_associated_records_for_taxons(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::Taxon::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Taxon::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Taxon::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::Taxon::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Taxon::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Taxon::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::Taxon::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::Taxon::GeneratedRelationMethods
end

class Spree::Promotion::Rules::Taxon::ActiveRecord_Relation
end

module Spree::Promotion::Rules::Taxon::GeneratedAssociationMethods
  def promotion_rule_taxon_ids(); end

  def promotion_rule_taxon_ids=(ids); end

  def promotion_rule_taxons(); end

  def promotion_rule_taxons=(value); end

  def taxon_ids(); end

  def taxon_ids=(ids); end

  def taxons(); end

  def taxons=(value); end
end

module Spree::Promotion::Rules::Taxon::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::Taxon::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::Taxon::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::Taxon::GeneratedRelationMethods
end

module Spree::Promotion::Rules::Taxon::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::Taxon
  def self.after_add_for_promotion_rule_taxons(); end

  def self.after_add_for_promotion_rule_taxons=(val); end

  def self.after_add_for_promotion_rule_taxons?(); end

  def self.after_add_for_taxons(); end

  def self.after_add_for_taxons=(val); end

  def self.after_add_for_taxons?(); end

  def self.after_remove_for_promotion_rule_taxons(); end

  def self.after_remove_for_promotion_rule_taxons=(val); end

  def self.after_remove_for_promotion_rule_taxons?(); end

  def self.after_remove_for_taxons(); end

  def self.after_remove_for_taxons=(val); end

  def self.after_remove_for_taxons?(); end

  def self.before_add_for_promotion_rule_taxons(); end

  def self.before_add_for_promotion_rule_taxons=(val); end

  def self.before_add_for_promotion_rule_taxons?(); end

  def self.before_add_for_taxons(); end

  def self.before_add_for_taxons=(val); end

  def self.before_add_for_taxons?(); end

  def self.before_remove_for_promotion_rule_taxons(); end

  def self.before_remove_for_promotion_rule_taxons=(val); end

  def self.before_remove_for_promotion_rule_taxons?(); end

  def self.before_remove_for_taxons(); end

  def self.before_remove_for_taxons=(val); end

  def self.before_remove_for_taxons?(); end
end

class Spree::Promotion::Rules::User
  include ::Spree::Promotion::Rules::User::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::User::GeneratedAssociationMethods
  def after_add_for_promotion_rule_users(); end

  def after_add_for_promotion_rule_users=(val); end

  def after_add_for_promotion_rule_users?(); end

  def after_add_for_users(); end

  def after_add_for_users=(val); end

  def after_add_for_users?(); end

  def after_remove_for_promotion_rule_users(); end

  def after_remove_for_promotion_rule_users=(val); end

  def after_remove_for_promotion_rule_users?(); end

  def after_remove_for_users(); end

  def after_remove_for_users=(val); end

  def after_remove_for_users?(); end

  def autosave_associated_records_for_promotion_rule_users(*args); end

  def autosave_associated_records_for_users(*args); end

  def before_add_for_promotion_rule_users(); end

  def before_add_for_promotion_rule_users=(val); end

  def before_add_for_promotion_rule_users?(); end

  def before_add_for_users(); end

  def before_add_for_users=(val); end

  def before_add_for_users?(); end

  def before_remove_for_promotion_rule_users(); end

  def before_remove_for_promotion_rule_users=(val); end

  def before_remove_for_promotion_rule_users?(); end

  def before_remove_for_users(); end

  def before_remove_for_users=(val); end

  def before_remove_for_users?(); end

  def validate_associated_records_for_promotion_rule_users(*args); end

  def validate_associated_records_for_users(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::User::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::User::GeneratedRelationMethods
end

class Spree::Promotion::Rules::User::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::User::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::User::GeneratedRelationMethods
end

class Spree::Promotion::Rules::User::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::User::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::User::GeneratedRelationMethods
end

class Spree::Promotion::Rules::User::ActiveRecord_Relation
end

module Spree::Promotion::Rules::User::GeneratedAssociationMethods
  def promotion_rule_user_ids(); end

  def promotion_rule_user_ids=(ids); end

  def promotion_rule_users(); end

  def promotion_rule_users=(value); end

  def user_ids(); end

  def user_ids=(ids); end

  def users(); end

  def users=(value); end
end

module Spree::Promotion::Rules::User::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::User::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::User::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::User::GeneratedRelationMethods
end

module Spree::Promotion::Rules::User::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::User
  def self.after_add_for_promotion_rule_users(); end

  def self.after_add_for_promotion_rule_users=(val); end

  def self.after_add_for_promotion_rule_users?(); end

  def self.after_add_for_users(); end

  def self.after_add_for_users=(val); end

  def self.after_add_for_users?(); end

  def self.after_remove_for_promotion_rule_users(); end

  def self.after_remove_for_promotion_rule_users=(val); end

  def self.after_remove_for_promotion_rule_users?(); end

  def self.after_remove_for_users(); end

  def self.after_remove_for_users=(val); end

  def self.after_remove_for_users?(); end

  def self.before_add_for_promotion_rule_users(); end

  def self.before_add_for_promotion_rule_users=(val); end

  def self.before_add_for_promotion_rule_users?(); end

  def self.before_add_for_users(); end

  def self.before_add_for_users=(val); end

  def self.before_add_for_users?(); end

  def self.before_remove_for_promotion_rule_users(); end

  def self.before_remove_for_promotion_rule_users=(val); end

  def self.before_remove_for_promotion_rule_users?(); end

  def self.before_remove_for_users(); end

  def self.before_remove_for_users=(val); end

  def self.before_remove_for_users?(); end
end

class Spree::Promotion::Rules::UserLoggedIn
  include ::Spree::Promotion::Rules::UserLoggedIn::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::UserLoggedIn::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::UserLoggedIn::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::UserLoggedIn::GeneratedRelationMethods
end

class Spree::Promotion::Rules::UserLoggedIn::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::UserLoggedIn::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::UserLoggedIn::GeneratedRelationMethods
end

class Spree::Promotion::Rules::UserLoggedIn::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::UserLoggedIn::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::UserLoggedIn::GeneratedRelationMethods
end

class Spree::Promotion::Rules::UserLoggedIn::ActiveRecord_Relation
end

module Spree::Promotion::Rules::UserLoggedIn::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::UserLoggedIn::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::UserLoggedIn::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::UserLoggedIn::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::UserLoggedIn::GeneratedRelationMethods
end

module Spree::Promotion::Rules::UserLoggedIn::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion::Rules::UserRole
  include ::Spree::Promotion::Rules::UserRole::GeneratedAttributeMethods
  include ::Spree::Promotion::Rules::UserRole::GeneratedAssociationMethods
  def preferred_match_policy(); end

  def preferred_match_policy=(value); end

  def preferred_match_policy_default(); end

  def preferred_match_policy_type(); end

  def preferred_role_ids(); end

  def preferred_role_ids=(value); end

  def preferred_role_ids_default(); end

  def preferred_role_ids_type(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Promotion::Rules::UserRole::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::UserRole::GeneratedRelationMethods
end

class Spree::Promotion::Rules::UserRole::ActiveRecord_AssociationRelation
end

class Spree::Promotion::Rules::UserRole::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::UserRole::GeneratedRelationMethods
end

class Spree::Promotion::Rules::UserRole::ActiveRecord_Associations_CollectionProxy
end

class Spree::Promotion::Rules::UserRole::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
  include ::Spree::Promotion::Rules::UserRole::GeneratedRelationMethods
end

class Spree::Promotion::Rules::UserRole::ActiveRecord_Relation
end

module Spree::Promotion::Rules::UserRole::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::UserRole::GeneratedAssociationMethods
end

module Spree::Promotion::Rules::UserRole::GeneratedAttributeMethods
end

module Spree::Promotion::Rules::UserRole::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Promotion::Rules::UserRole::GeneratedRelationMethods
end

module Spree::Promotion::Rules::UserRole::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Promotion
  def self.active(*args); end

  def self.advertised(*args); end

  def self.after_add_for_codes(); end

  def self.after_add_for_codes=(val); end

  def self.after_add_for_codes?(); end

  def self.after_add_for_order_promotions(); end

  def self.after_add_for_order_promotions=(val); end

  def self.after_add_for_order_promotions?(); end

  def self.after_add_for_orders(); end

  def self.after_add_for_orders=(val); end

  def self.after_add_for_orders?(); end

  def self.after_add_for_promotion_actions(); end

  def self.after_add_for_promotion_actions=(val); end

  def self.after_add_for_promotion_actions?(); end

  def self.after_add_for_promotion_code_batches(); end

  def self.after_add_for_promotion_code_batches=(val); end

  def self.after_add_for_promotion_code_batches?(); end

  def self.after_add_for_promotion_rules(); end

  def self.after_add_for_promotion_rules=(val); end

  def self.after_add_for_promotion_rules?(); end

  def self.after_remove_for_codes(); end

  def self.after_remove_for_codes=(val); end

  def self.after_remove_for_codes?(); end

  def self.after_remove_for_order_promotions(); end

  def self.after_remove_for_order_promotions=(val); end

  def self.after_remove_for_order_promotions?(); end

  def self.after_remove_for_orders(); end

  def self.after_remove_for_orders=(val); end

  def self.after_remove_for_orders?(); end

  def self.after_remove_for_promotion_actions(); end

  def self.after_remove_for_promotion_actions=(val); end

  def self.after_remove_for_promotion_actions?(); end

  def self.after_remove_for_promotion_code_batches(); end

  def self.after_remove_for_promotion_code_batches=(val); end

  def self.after_remove_for_promotion_code_batches?(); end

  def self.after_remove_for_promotion_rules(); end

  def self.after_remove_for_promotion_rules=(val); end

  def self.after_remove_for_promotion_rules?(); end

  def self.applied(*args); end

  def self.before_add_for_codes(); end

  def self.before_add_for_codes=(val); end

  def self.before_add_for_codes?(); end

  def self.before_add_for_order_promotions(); end

  def self.before_add_for_order_promotions=(val); end

  def self.before_add_for_order_promotions?(); end

  def self.before_add_for_orders(); end

  def self.before_add_for_orders=(val); end

  def self.before_add_for_orders?(); end

  def self.before_add_for_promotion_actions(); end

  def self.before_add_for_promotion_actions=(val); end

  def self.before_add_for_promotion_actions?(); end

  def self.before_add_for_promotion_code_batches(); end

  def self.before_add_for_promotion_code_batches=(val); end

  def self.before_add_for_promotion_code_batches?(); end

  def self.before_add_for_promotion_rules(); end

  def self.before_add_for_promotion_rules=(val); end

  def self.before_add_for_promotion_rules?(); end

  def self.before_remove_for_codes(); end

  def self.before_remove_for_codes=(val); end

  def self.before_remove_for_codes?(); end

  def self.before_remove_for_order_promotions(); end

  def self.before_remove_for_order_promotions=(val); end

  def self.before_remove_for_order_promotions?(); end

  def self.before_remove_for_orders(); end

  def self.before_remove_for_orders=(val); end

  def self.before_remove_for_orders?(); end

  def self.before_remove_for_promotion_actions(); end

  def self.before_remove_for_promotion_actions=(val); end

  def self.before_remove_for_promotion_actions?(); end

  def self.before_remove_for_promotion_code_batches(); end

  def self.before_remove_for_promotion_code_batches=(val); end

  def self.before_remove_for_promotion_code_batches?(); end

  def self.before_remove_for_promotion_rules(); end

  def self.before_remove_for_promotion_rules=(val); end

  def self.before_remove_for_promotion_rules?(); end

  def self.coupons(*args); end

  def self.has_actions(*args); end

  def self.started_and_unexpired(*args); end
end

class Spree::PromotionAction
  include ::Spree::PromotionAction::GeneratedAttributeMethods
  include ::Spree::PromotionAction::GeneratedAssociationMethods
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def autosave_associated_records_for_promotion(*args); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionAction::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
end

class Spree::PromotionAction::ActiveRecord_AssociationRelation
end

class Spree::PromotionAction::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
end

class Spree::PromotionAction::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionAction::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionAction::GeneratedRelationMethods
end

class Spree::PromotionAction::ActiveRecord_Relation
end

module Spree::PromotionAction::GeneratedAssociationMethods
  def build_promotion(*args, &block); end

  def create_promotion(*args, &block); end

  def create_promotion!(*args, &block); end

  def promotion(); end

  def promotion=(value); end

  def reload_promotion(); end
end

module Spree::PromotionAction::GeneratedAssociationMethods
end

module Spree::PromotionAction::GeneratedAttributeMethods
end

module Spree::PromotionAction::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionAction::GeneratedRelationMethods
  def discarded(*args, &block); end

  def kept(*args, &block); end

  def of_type(*args, &block); end

  def shipping(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::PromotionAction::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PromotionAction
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.kept(*args); end

  def self.of_type(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.shipping(*args); end

  def self.undiscarded(*args); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::PromotionCategory
  include ::Spree::PromotionCategory::GeneratedAttributeMethods
  include ::Spree::PromotionCategory::GeneratedAssociationMethods
  def after_add_for_promotions(); end

  def after_add_for_promotions=(val); end

  def after_add_for_promotions?(); end

  def after_remove_for_promotions(); end

  def after_remove_for_promotions=(val); end

  def after_remove_for_promotions?(); end

  def autosave_associated_records_for_promotions(*args); end

  def before_add_for_promotions(); end

  def before_add_for_promotions=(val); end

  def before_add_for_promotions?(); end

  def before_remove_for_promotions(); end

  def before_remove_for_promotions=(val); end

  def before_remove_for_promotions?(); end

  def validate_associated_records_for_promotions(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionCategory::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCategory::GeneratedRelationMethods
end

class Spree::PromotionCategory::ActiveRecord_AssociationRelation
end

class Spree::PromotionCategory::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCategory::GeneratedRelationMethods
end

class Spree::PromotionCategory::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionCategory::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCategory::GeneratedRelationMethods
end

class Spree::PromotionCategory::ActiveRecord_Relation
end

module Spree::PromotionCategory::GeneratedAssociationMethods
  def promotion_ids(); end

  def promotion_ids=(ids); end

  def promotions(); end

  def promotions=(value); end
end

module Spree::PromotionCategory::GeneratedAssociationMethods
end

module Spree::PromotionCategory::GeneratedAttributeMethods
end

module Spree::PromotionCategory::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionCategory::GeneratedRelationMethods
end

module Spree::PromotionCategory::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PromotionCategory
  def self.after_add_for_promotions(); end

  def self.after_add_for_promotions=(val); end

  def self.after_add_for_promotions?(); end

  def self.after_remove_for_promotions(); end

  def self.after_remove_for_promotions=(val); end

  def self.after_remove_for_promotions?(); end

  def self.before_add_for_promotions(); end

  def self.before_add_for_promotions=(val); end

  def self.before_add_for_promotions?(); end

  def self.before_remove_for_promotions(); end

  def self.before_remove_for_promotions=(val); end

  def self.before_remove_for_promotions?(); end
end

class Spree::PromotionCode
  include ::Spree::PromotionCode::GeneratedAttributeMethods
  include ::Spree::PromotionCode::GeneratedAssociationMethods
  def after_add_for_adjustments(); end

  def after_add_for_adjustments=(val); end

  def after_add_for_adjustments?(); end

  def after_remove_for_adjustments(); end

  def after_remove_for_adjustments=(val); end

  def after_remove_for_adjustments?(); end

  def autosave_associated_records_for_adjustments(*args); end

  def autosave_associated_records_for_promotion(*args); end

  def autosave_associated_records_for_promotion_code_batch(*args); end

  def before_add_for_adjustments(); end

  def before_add_for_adjustments=(val); end

  def before_add_for_adjustments?(); end

  def before_remove_for_adjustments(); end

  def before_remove_for_adjustments=(val); end

  def before_remove_for_adjustments?(); end

  def validate_associated_records_for_adjustments(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionCode::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCode::GeneratedRelationMethods
end

class Spree::PromotionCode::ActiveRecord_AssociationRelation
end

class Spree::PromotionCode::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCode::GeneratedRelationMethods
end

class Spree::PromotionCode::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionCode::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCode::GeneratedRelationMethods
end

class Spree::PromotionCode::ActiveRecord_Relation
end

class Spree::PromotionCode::BatchBuilder
  def batch_size(*args, &block); end

  def random_code_length(*args, &block); end

  def sample_characters(*args, &block); end
end

class Spree::PromotionCode::BatchBuilder
  def self.batch_size(); end

  def self.batch_size=(val); end

  def self.random_code_length(); end

  def self.random_code_length=(val); end

  def self.sample_characters(); end

  def self.sample_characters=(val); end
end

module Spree::PromotionCode::GeneratedAssociationMethods
  def adjustment_ids(); end

  def adjustment_ids=(ids); end

  def adjustments(); end

  def adjustments=(value); end

  def build_promotion(*args, &block); end

  def build_promotion_code_batch(*args, &block); end

  def create_promotion(*args, &block); end

  def create_promotion!(*args, &block); end

  def create_promotion_code_batch(*args, &block); end

  def create_promotion_code_batch!(*args, &block); end

  def promotion(); end

  def promotion=(value); end

  def promotion_code_batch(); end

  def promotion_code_batch=(value); end

  def reload_promotion(); end

  def reload_promotion_code_batch(); end
end

module Spree::PromotionCode::GeneratedAssociationMethods
end

module Spree::PromotionCode::GeneratedAttributeMethods
end

module Spree::PromotionCode::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionCode::GeneratedRelationMethods
end

module Spree::PromotionCode::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PromotionCode
  def self.after_add_for_adjustments(); end

  def self.after_add_for_adjustments=(val); end

  def self.after_add_for_adjustments?(); end

  def self.after_remove_for_adjustments(); end

  def self.after_remove_for_adjustments=(val); end

  def self.after_remove_for_adjustments?(); end

  def self.before_add_for_adjustments(); end

  def self.before_add_for_adjustments=(val); end

  def self.before_add_for_adjustments?(); end

  def self.before_remove_for_adjustments(); end

  def self.before_remove_for_adjustments=(val); end

  def self.before_remove_for_adjustments?(); end
end

class Spree::PromotionCodeBatch
  include ::Spree::PromotionCodeBatch::GeneratedAttributeMethods
  include ::Spree::PromotionCodeBatch::GeneratedAssociationMethods
  def after_add_for_promotion_codes(); end

  def after_add_for_promotion_codes=(val); end

  def after_add_for_promotion_codes?(); end

  def after_remove_for_promotion_codes(); end

  def after_remove_for_promotion_codes=(val); end

  def after_remove_for_promotion_codes?(); end

  def autosave_associated_records_for_promotion(*args); end

  def autosave_associated_records_for_promotion_codes(*args); end

  def before_add_for_promotion_codes(); end

  def before_add_for_promotion_codes=(val); end

  def before_add_for_promotion_codes?(); end

  def before_remove_for_promotion_codes(); end

  def before_remove_for_promotion_codes=(val); end

  def before_remove_for_promotion_codes?(); end

  def validate_associated_records_for_promotion_codes(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionCodeBatch::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCodeBatch::GeneratedRelationMethods
end

class Spree::PromotionCodeBatch::ActiveRecord_AssociationRelation
end

class Spree::PromotionCodeBatch::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCodeBatch::GeneratedRelationMethods
end

class Spree::PromotionCodeBatch::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionCodeBatch::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionCodeBatch::GeneratedRelationMethods
end

class Spree::PromotionCodeBatch::ActiveRecord_Relation
end

module Spree::PromotionCodeBatch::GeneratedAssociationMethods
  def build_promotion(*args, &block); end

  def create_promotion(*args, &block); end

  def create_promotion!(*args, &block); end

  def promotion(); end

  def promotion=(value); end

  def promotion_code_ids(); end

  def promotion_code_ids=(ids); end

  def promotion_codes(); end

  def promotion_codes=(value); end

  def reload_promotion(); end
end

module Spree::PromotionCodeBatch::GeneratedAssociationMethods
end

module Spree::PromotionCodeBatch::GeneratedAttributeMethods
end

module Spree::PromotionCodeBatch::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionCodeBatch::GeneratedRelationMethods
end

module Spree::PromotionCodeBatch::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PromotionCodeBatch
  def self.after_add_for_promotion_codes(); end

  def self.after_add_for_promotion_codes=(val); end

  def self.after_add_for_promotion_codes?(); end

  def self.after_remove_for_promotion_codes(); end

  def self.after_remove_for_promotion_codes=(val); end

  def self.after_remove_for_promotion_codes?(); end

  def self.before_add_for_promotion_codes(); end

  def self.before_add_for_promotion_codes=(val); end

  def self.before_add_for_promotion_codes?(); end

  def self.before_remove_for_promotion_codes(); end

  def self.before_remove_for_promotion_codes=(val); end

  def self.before_remove_for_promotion_codes?(); end
end

class Spree::PromotionRule
  include ::Spree::PromotionRule::GeneratedAttributeMethods
  include ::Spree::PromotionRule::GeneratedAssociationMethods
  def autosave_associated_records_for_promotion(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionRule::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
end

class Spree::PromotionRule::ActiveRecord_AssociationRelation
end

class Spree::PromotionRule::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
end

class Spree::PromotionRule::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionRule::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRule::GeneratedRelationMethods
end

class Spree::PromotionRule::ActiveRecord_Relation
end

module Spree::PromotionRule::GeneratedAssociationMethods
  def build_promotion(*args, &block); end

  def create_promotion(*args, &block); end

  def create_promotion!(*args, &block); end

  def promotion(); end

  def promotion=(value); end

  def reload_promotion(); end
end

module Spree::PromotionRule::GeneratedAssociationMethods
end

module Spree::PromotionRule::GeneratedAttributeMethods
end

module Spree::PromotionRule::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionRule::GeneratedRelationMethods
  def of_type(*args, &block); end
end

module Spree::PromotionRule::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PromotionRule
  def self.of_type(*args); end
end

class Spree::PromotionRuleRole
  include ::Spree::PromotionRuleRole::GeneratedAttributeMethods
  include ::Spree::PromotionRuleRole::GeneratedAssociationMethods
  def autosave_associated_records_for_promotion_rule(*args); end

  def autosave_associated_records_for_role(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionRuleRole::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleRole::GeneratedRelationMethods
end

class Spree::PromotionRuleRole::ActiveRecord_AssociationRelation
end

class Spree::PromotionRuleRole::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleRole::GeneratedRelationMethods
end

class Spree::PromotionRuleRole::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionRuleRole::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleRole::GeneratedRelationMethods
end

class Spree::PromotionRuleRole::ActiveRecord_Relation
end

module Spree::PromotionRuleRole::GeneratedAssociationMethods
  def build_promotion_rule(*args, &block); end

  def build_role(*args, &block); end

  def create_promotion_rule(*args, &block); end

  def create_promotion_rule!(*args, &block); end

  def create_role(*args, &block); end

  def create_role!(*args, &block); end

  def promotion_rule(); end

  def promotion_rule=(value); end

  def reload_promotion_rule(); end

  def reload_role(); end

  def role(); end

  def role=(value); end
end

module Spree::PromotionRuleRole::GeneratedAssociationMethods
end

module Spree::PromotionRuleRole::GeneratedAttributeMethods
end

module Spree::PromotionRuleRole::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionRuleRole::GeneratedRelationMethods
end

module Spree::PromotionRuleRole::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PromotionRuleStore
  include ::Spree::PromotionRuleStore::GeneratedAttributeMethods
  include ::Spree::PromotionRuleStore::GeneratedAssociationMethods
  def autosave_associated_records_for_promotion_rule(*args); end

  def autosave_associated_records_for_store(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionRuleStore::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleStore::GeneratedRelationMethods
end

class Spree::PromotionRuleStore::ActiveRecord_AssociationRelation
end

class Spree::PromotionRuleStore::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleStore::GeneratedRelationMethods
end

class Spree::PromotionRuleStore::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionRuleStore::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleStore::GeneratedRelationMethods
end

class Spree::PromotionRuleStore::ActiveRecord_Relation
end

module Spree::PromotionRuleStore::GeneratedAssociationMethods
  def build_promotion_rule(*args, &block); end

  def build_store(*args, &block); end

  def create_promotion_rule(*args, &block); end

  def create_promotion_rule!(*args, &block); end

  def create_store(*args, &block); end

  def create_store!(*args, &block); end

  def promotion_rule(); end

  def promotion_rule=(value); end

  def reload_promotion_rule(); end

  def reload_store(); end

  def store(); end

  def store=(value); end
end

module Spree::PromotionRuleStore::GeneratedAssociationMethods
end

module Spree::PromotionRuleStore::GeneratedAttributeMethods
end

module Spree::PromotionRuleStore::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionRuleStore::GeneratedRelationMethods
end

module Spree::PromotionRuleStore::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PromotionRuleTaxon
  include ::Spree::PromotionRuleTaxon::GeneratedAttributeMethods
  include ::Spree::PromotionRuleTaxon::GeneratedAssociationMethods
  def autosave_associated_records_for_promotion_rule(*args); end

  def autosave_associated_records_for_taxon(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionRuleTaxon::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleTaxon::GeneratedRelationMethods
end

class Spree::PromotionRuleTaxon::ActiveRecord_AssociationRelation
end

class Spree::PromotionRuleTaxon::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleTaxon::GeneratedRelationMethods
end

class Spree::PromotionRuleTaxon::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionRuleTaxon::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleTaxon::GeneratedRelationMethods
end

class Spree::PromotionRuleTaxon::ActiveRecord_Relation
end

module Spree::PromotionRuleTaxon::GeneratedAssociationMethods
  def build_promotion_rule(*args, &block); end

  def build_taxon(*args, &block); end

  def create_promotion_rule(*args, &block); end

  def create_promotion_rule!(*args, &block); end

  def create_taxon(*args, &block); end

  def create_taxon!(*args, &block); end

  def promotion_rule(); end

  def promotion_rule=(value); end

  def reload_promotion_rule(); end

  def reload_taxon(); end

  def taxon(); end

  def taxon=(value); end
end

module Spree::PromotionRuleTaxon::GeneratedAssociationMethods
end

module Spree::PromotionRuleTaxon::GeneratedAttributeMethods
end

module Spree::PromotionRuleTaxon::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionRuleTaxon::GeneratedRelationMethods
end

module Spree::PromotionRuleTaxon::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::PromotionRuleUser
  include ::Spree::PromotionRuleUser::GeneratedAttributeMethods
  include ::Spree::PromotionRuleUser::GeneratedAssociationMethods
  def autosave_associated_records_for_promotion_rule(*args); end

  def autosave_associated_records_for_user(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::PromotionRuleUser::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleUser::GeneratedRelationMethods
end

class Spree::PromotionRuleUser::ActiveRecord_AssociationRelation
end

class Spree::PromotionRuleUser::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleUser::GeneratedRelationMethods
end

class Spree::PromotionRuleUser::ActiveRecord_Associations_CollectionProxy
end

class Spree::PromotionRuleUser::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::PromotionRuleUser::GeneratedRelationMethods
end

class Spree::PromotionRuleUser::ActiveRecord_Relation
end

module Spree::PromotionRuleUser::GeneratedAssociationMethods
  def build_promotion_rule(*args, &block); end

  def build_user(*args, &block); end

  def create_promotion_rule(*args, &block); end

  def create_promotion_rule!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def promotion_rule(); end

  def promotion_rule=(value); end

  def reload_promotion_rule(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Spree::PromotionRuleUser::GeneratedAssociationMethods
end

module Spree::PromotionRuleUser::GeneratedAttributeMethods
end

module Spree::PromotionRuleUser::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::PromotionRuleUser::GeneratedRelationMethods
end

module Spree::PromotionRuleUser::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Property
  include ::Spree::Property::GeneratedAttributeMethods
  include ::Spree::Property::GeneratedAssociationMethods
  def after_add_for_product_properties(); end

  def after_add_for_product_properties=(val); end

  def after_add_for_product_properties?(); end

  def after_add_for_products(); end

  def after_add_for_products=(val); end

  def after_add_for_products?(); end

  def after_remove_for_product_properties(); end

  def after_remove_for_product_properties=(val); end

  def after_remove_for_product_properties?(); end

  def after_remove_for_products(); end

  def after_remove_for_products=(val); end

  def after_remove_for_products?(); end

  def autosave_associated_records_for_product_properties(*args); end

  def autosave_associated_records_for_products(*args); end

  def before_add_for_product_properties(); end

  def before_add_for_product_properties=(val); end

  def before_add_for_product_properties?(); end

  def before_add_for_products(); end

  def before_add_for_products=(val); end

  def before_add_for_products?(); end

  def before_remove_for_product_properties(); end

  def before_remove_for_product_properties=(val); end

  def before_remove_for_product_properties?(); end

  def before_remove_for_products(); end

  def before_remove_for_products=(val); end

  def before_remove_for_products?(); end

  def validate_associated_records_for_product_properties(*args); end

  def validate_associated_records_for_products(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Property::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Property::GeneratedRelationMethods
end

class Spree::Property::ActiveRecord_AssociationRelation
end

class Spree::Property::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Property::GeneratedRelationMethods
end

class Spree::Property::ActiveRecord_Associations_CollectionProxy
end

class Spree::Property::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Property::GeneratedRelationMethods
end

class Spree::Property::ActiveRecord_Relation
end

module Spree::Property::GeneratedAssociationMethods
  def product_ids(); end

  def product_ids=(ids); end

  def product_properties(); end

  def product_properties=(value); end

  def product_property_ids(); end

  def product_property_ids=(ids); end

  def products(); end

  def products=(value); end
end

module Spree::Property::GeneratedAssociationMethods
end

module Spree::Property::GeneratedAttributeMethods
end

module Spree::Property::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Property::GeneratedRelationMethods
  def sorted(*args, &block); end
end

module Spree::Property::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Property
  def self.after_add_for_product_properties(); end

  def self.after_add_for_product_properties=(val); end

  def self.after_add_for_product_properties?(); end

  def self.after_add_for_products(); end

  def self.after_add_for_products=(val); end

  def self.after_add_for_products?(); end

  def self.after_remove_for_product_properties(); end

  def self.after_remove_for_product_properties=(val); end

  def self.after_remove_for_product_properties?(); end

  def self.after_remove_for_products(); end

  def self.after_remove_for_products=(val); end

  def self.after_remove_for_products?(); end

  def self.before_add_for_product_properties(); end

  def self.before_add_for_product_properties=(val); end

  def self.before_add_for_product_properties?(); end

  def self.before_add_for_products(); end

  def self.before_add_for_products=(val); end

  def self.before_add_for_products?(); end

  def self.before_remove_for_product_properties(); end

  def self.before_remove_for_product_properties=(val); end

  def self.before_remove_for_product_properties?(); end

  def self.before_remove_for_products(); end

  def self.before_remove_for_products=(val); end

  def self.before_remove_for_products?(); end

  def self.sorted(*args); end
end

class Spree::Refund
  include ::Spree::Refund::GeneratedAttributeMethods
  include ::Spree::Refund::GeneratedAssociationMethods
  def after_add_for_log_entries(); end

  def after_add_for_log_entries=(val); end

  def after_add_for_log_entries?(); end

  def after_remove_for_log_entries(); end

  def after_remove_for_log_entries=(val); end

  def after_remove_for_log_entries?(); end

  def autosave_associated_records_for_log_entries(*args); end

  def autosave_associated_records_for_payment(*args); end

  def autosave_associated_records_for_reason(*args); end

  def autosave_associated_records_for_reimbursement(*args); end

  def before_add_for_log_entries(); end

  def before_add_for_log_entries=(val); end

  def before_add_for_log_entries?(); end

  def before_remove_for_log_entries(); end

  def before_remove_for_log_entries=(val); end

  def before_remove_for_log_entries?(); end

  def validate_associated_records_for_log_entries(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Refund::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Refund::GeneratedRelationMethods
end

class Spree::Refund::ActiveRecord_AssociationRelation
end

class Spree::Refund::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Refund::GeneratedRelationMethods
end

class Spree::Refund::ActiveRecord_Associations_CollectionProxy
end

class Spree::Refund::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Refund::GeneratedRelationMethods
end

class Spree::Refund::ActiveRecord_Relation
end

module Spree::Refund::GeneratedAssociationMethods
  def build_payment(*args, &block); end

  def build_reason(*args, &block); end

  def build_reimbursement(*args, &block); end

  def create_payment(*args, &block); end

  def create_payment!(*args, &block); end

  def create_reason(*args, &block); end

  def create_reason!(*args, &block); end

  def create_reimbursement(*args, &block); end

  def create_reimbursement!(*args, &block); end

  def log_entries(); end

  def log_entries=(value); end

  def log_entry_ids(); end

  def log_entry_ids=(ids); end

  def payment(); end

  def payment=(value); end

  def reason(); end

  def reason=(value); end

  def reimbursement(); end

  def reimbursement=(value); end

  def reload_payment(); end

  def reload_reason(); end

  def reload_reimbursement(); end
end

module Spree::Refund::GeneratedAssociationMethods
end

module Spree::Refund::GeneratedAttributeMethods
end

module Spree::Refund::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Refund::GeneratedRelationMethods
  def non_reimbursement(*args, &block); end
end

module Spree::Refund::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Refund
  def self.after_add_for_log_entries(); end

  def self.after_add_for_log_entries=(val); end

  def self.after_add_for_log_entries?(); end

  def self.after_remove_for_log_entries(); end

  def self.after_remove_for_log_entries=(val); end

  def self.after_remove_for_log_entries?(); end

  def self.before_add_for_log_entries(); end

  def self.before_add_for_log_entries=(val); end

  def self.before_add_for_log_entries?(); end

  def self.before_remove_for_log_entries(); end

  def self.before_remove_for_log_entries=(val); end

  def self.before_remove_for_log_entries?(); end

  def self.non_reimbursement(*args); end
end

class Spree::RefundReason
  include ::Spree::RefundReason::GeneratedAttributeMethods
  include ::Spree::RefundReason::GeneratedAssociationMethods
  include ::Spree::NamedType
  def after_add_for_refunds(); end

  def after_add_for_refunds=(val); end

  def after_add_for_refunds?(); end

  def after_remove_for_refunds(); end

  def after_remove_for_refunds=(val); end

  def after_remove_for_refunds?(); end

  def autosave_associated_records_for_refunds(*args); end

  def before_add_for_refunds(); end

  def before_add_for_refunds=(val); end

  def before_add_for_refunds?(); end

  def before_remove_for_refunds(); end

  def before_remove_for_refunds=(val); end

  def before_remove_for_refunds?(); end

  def validate_associated_records_for_refunds(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::RefundReason::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::RefundReason::GeneratedRelationMethods
end

class Spree::RefundReason::ActiveRecord_AssociationRelation
end

class Spree::RefundReason::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::RefundReason::GeneratedRelationMethods
end

class Spree::RefundReason::ActiveRecord_Associations_CollectionProxy
end

class Spree::RefundReason::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::RefundReason::GeneratedRelationMethods
end

class Spree::RefundReason::ActiveRecord_Relation
end

module Spree::RefundReason::GeneratedAssociationMethods
  def refund_ids(); end

  def refund_ids=(ids); end

  def refunds(); end

  def refunds=(value); end
end

module Spree::RefundReason::GeneratedAssociationMethods
end

module Spree::RefundReason::GeneratedAttributeMethods
end

module Spree::RefundReason::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::RefundReason::GeneratedRelationMethods
  def active(*args, &block); end

  def arel_table(*args, &block); end
end

module Spree::RefundReason::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::RefundReason
  def self.active(*args); end

  def self.after_add_for_refunds(); end

  def self.after_add_for_refunds=(val); end

  def self.after_add_for_refunds?(); end

  def self.after_remove_for_refunds(); end

  def self.after_remove_for_refunds=(val); end

  def self.after_remove_for_refunds?(); end

  def self.before_add_for_refunds(); end

  def self.before_add_for_refunds=(val); end

  def self.before_add_for_refunds?(); end

  def self.before_remove_for_refunds(); end

  def self.before_remove_for_refunds=(val); end

  def self.before_remove_for_refunds?(); end
end

class Spree::Reimbursement
  include ::Spree::Reimbursement::GeneratedAttributeMethods
  include ::Spree::Reimbursement::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Reimbursement::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Reimbursement::GeneratedRelationMethods
end

class Spree::Reimbursement::ActiveRecord_AssociationRelation
end

class Spree::Reimbursement::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Reimbursement::GeneratedRelationMethods
end

class Spree::Reimbursement::ActiveRecord_Associations_CollectionProxy
end

class Spree::Reimbursement::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Reimbursement::GeneratedRelationMethods
end

class Spree::Reimbursement::ActiveRecord_Relation
end

class Spree::Reimbursement::Credit
  include ::Spree::Reimbursement::Credit::GeneratedAttributeMethods
  include ::Spree::Reimbursement::Credit::GeneratedAssociationMethods
  def autosave_associated_records_for_creditable(*args); end

  def autosave_associated_records_for_reimbursement(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Reimbursement::Credit::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Reimbursement::Credit::GeneratedRelationMethods
end

class Spree::Reimbursement::Credit::ActiveRecord_AssociationRelation
end

class Spree::Reimbursement::Credit::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Reimbursement::Credit::GeneratedRelationMethods
end

class Spree::Reimbursement::Credit::ActiveRecord_Associations_CollectionProxy
end

class Spree::Reimbursement::Credit::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Reimbursement::Credit::GeneratedRelationMethods
end

class Spree::Reimbursement::Credit::ActiveRecord_Relation
end

module Spree::Reimbursement::Credit::GeneratedAssociationMethods
  def build_reimbursement(*args, &block); end

  def create_reimbursement(*args, &block); end

  def create_reimbursement!(*args, &block); end

  def creditable(); end

  def creditable=(value); end

  def reimbursement(); end

  def reimbursement=(value); end

  def reload_creditable(); end

  def reload_reimbursement(); end
end

module Spree::Reimbursement::Credit::GeneratedAssociationMethods
end

module Spree::Reimbursement::Credit::GeneratedAttributeMethods
end

module Spree::Reimbursement::Credit::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Reimbursement::Credit::GeneratedRelationMethods
end

module Spree::Reimbursement::Credit::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree::Reimbursement::GeneratedAssociationMethods
end

module Spree::Reimbursement::GeneratedAssociationMethods
end

module Spree::Reimbursement::GeneratedAttributeMethods
end

module Spree::Reimbursement::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Reimbursement::GeneratedRelationMethods
end

module Spree::Reimbursement::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Reimbursement::ReimbursementTypeEngine
  include ::Spree::Reimbursement::ReimbursementTypeValidator
end

class Spree::ReimbursementType
  include ::Spree::ReimbursementType::GeneratedAttributeMethods
  include ::Spree::ReimbursementType::GeneratedAssociationMethods
  include ::Spree::NamedType
  def after_add_for_return_items(); end

  def after_add_for_return_items=(val); end

  def after_add_for_return_items?(); end

  def after_remove_for_return_items(); end

  def after_remove_for_return_items=(val); end

  def after_remove_for_return_items?(); end

  def autosave_associated_records_for_return_items(*args); end

  def before_add_for_return_items(); end

  def before_add_for_return_items=(val); end

  def before_add_for_return_items?(); end

  def before_remove_for_return_items(); end

  def before_remove_for_return_items=(val); end

  def before_remove_for_return_items?(); end

  def validate_associated_records_for_return_items(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ReimbursementType::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
end

class Spree::ReimbursementType::ActiveRecord_AssociationRelation
end

class Spree::ReimbursementType::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
end

class Spree::ReimbursementType::ActiveRecord_Associations_CollectionProxy
end

class Spree::ReimbursementType::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
end

class Spree::ReimbursementType::ActiveRecord_Relation
end

class Spree::ReimbursementType::Credit
  include ::Spree::ReimbursementType::Credit::GeneratedAttributeMethods
  include ::Spree::ReimbursementType::Credit::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ReimbursementType::Credit::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::Credit::GeneratedRelationMethods
end

class Spree::ReimbursementType::Credit::ActiveRecord_AssociationRelation
end

class Spree::ReimbursementType::Credit::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::Credit::GeneratedRelationMethods
end

class Spree::ReimbursementType::Credit::ActiveRecord_Associations_CollectionProxy
end

class Spree::ReimbursementType::Credit::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::Credit::GeneratedRelationMethods
end

class Spree::ReimbursementType::Credit::ActiveRecord_Relation
end

module Spree::ReimbursementType::Credit::GeneratedAssociationMethods
end

module Spree::ReimbursementType::Credit::GeneratedAssociationMethods
end

module Spree::ReimbursementType::Credit::GeneratedAttributeMethods
end

module Spree::ReimbursementType::Credit::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ReimbursementType::Credit::GeneratedRelationMethods
end

module Spree::ReimbursementType::Credit::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ReimbursementType::Credit
  extend ::Spree::ReimbursementType::ReimbursementHelpers
end

class Spree::ReimbursementType::Exchange
  include ::Spree::ReimbursementType::Exchange::GeneratedAttributeMethods
  include ::Spree::ReimbursementType::Exchange::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ReimbursementType::Exchange::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::Exchange::GeneratedRelationMethods
end

class Spree::ReimbursementType::Exchange::ActiveRecord_AssociationRelation
end

class Spree::ReimbursementType::Exchange::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::Exchange::GeneratedRelationMethods
end

class Spree::ReimbursementType::Exchange::ActiveRecord_Associations_CollectionProxy
end

class Spree::ReimbursementType::Exchange::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::Exchange::GeneratedRelationMethods
end

class Spree::ReimbursementType::Exchange::ActiveRecord_Relation
end

module Spree::ReimbursementType::Exchange::GeneratedAssociationMethods
end

module Spree::ReimbursementType::Exchange::GeneratedAssociationMethods
end

module Spree::ReimbursementType::Exchange::GeneratedAttributeMethods
end

module Spree::ReimbursementType::Exchange::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ReimbursementType::Exchange::GeneratedRelationMethods
end

module Spree::ReimbursementType::Exchange::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree::ReimbursementType::GeneratedAssociationMethods
  def return_item_ids(); end

  def return_item_ids=(ids); end

  def return_items(); end

  def return_items=(value); end
end

module Spree::ReimbursementType::GeneratedAssociationMethods
end

module Spree::ReimbursementType::GeneratedAttributeMethods
end

module Spree::ReimbursementType::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ReimbursementType::GeneratedRelationMethods
  def active(*args, &block); end
end

module Spree::ReimbursementType::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ReimbursementType::OriginalPayment
  include ::Spree::ReimbursementType::OriginalPayment::GeneratedAttributeMethods
  include ::Spree::ReimbursementType::OriginalPayment::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ReimbursementType::OriginalPayment::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::OriginalPayment::GeneratedRelationMethods
end

class Spree::ReimbursementType::OriginalPayment::ActiveRecord_AssociationRelation
end

class Spree::ReimbursementType::OriginalPayment::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::OriginalPayment::GeneratedRelationMethods
end

class Spree::ReimbursementType::OriginalPayment::ActiveRecord_Associations_CollectionProxy
end

class Spree::ReimbursementType::OriginalPayment::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::OriginalPayment::GeneratedRelationMethods
end

class Spree::ReimbursementType::OriginalPayment::ActiveRecord_Relation
end

module Spree::ReimbursementType::OriginalPayment::GeneratedAssociationMethods
end

module Spree::ReimbursementType::OriginalPayment::GeneratedAssociationMethods
end

module Spree::ReimbursementType::OriginalPayment::GeneratedAttributeMethods
end

module Spree::ReimbursementType::OriginalPayment::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ReimbursementType::OriginalPayment::GeneratedRelationMethods
end

module Spree::ReimbursementType::OriginalPayment::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ReimbursementType::StoreCredit
  include ::Spree::ReimbursementType::StoreCredit::GeneratedAttributeMethods
  include ::Spree::ReimbursementType::StoreCredit::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ReimbursementType::StoreCredit::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::StoreCredit::GeneratedRelationMethods
end

class Spree::ReimbursementType::StoreCredit::ActiveRecord_AssociationRelation
end

class Spree::ReimbursementType::StoreCredit::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::StoreCredit::GeneratedRelationMethods
end

class Spree::ReimbursementType::StoreCredit::ActiveRecord_Associations_CollectionProxy
end

class Spree::ReimbursementType::StoreCredit::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReimbursementType::GeneratedRelationMethods
  include ::Spree::ReimbursementType::StoreCredit::GeneratedRelationMethods
end

class Spree::ReimbursementType::StoreCredit::ActiveRecord_Relation
end

module Spree::ReimbursementType::StoreCredit::GeneratedAssociationMethods
end

module Spree::ReimbursementType::StoreCredit::GeneratedAssociationMethods
end

module Spree::ReimbursementType::StoreCredit::GeneratedAttributeMethods
end

module Spree::ReimbursementType::StoreCredit::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ReimbursementType::StoreCredit::GeneratedRelationMethods
end

module Spree::ReimbursementType::StoreCredit::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ReimbursementType
  def self.active(*args); end

  def self.after_add_for_return_items(); end

  def self.after_add_for_return_items=(val); end

  def self.after_add_for_return_items?(); end

  def self.after_remove_for_return_items(); end

  def self.after_remove_for_return_items=(val); end

  def self.after_remove_for_return_items?(); end

  def self.before_add_for_return_items(); end

  def self.before_add_for_return_items=(val); end

  def self.before_add_for_return_items?(); end

  def self.before_remove_for_return_items(); end

  def self.before_remove_for_return_items=(val); end

  def self.before_remove_for_return_items?(); end
end

class Spree::ReturnItem
  include ::Spree::ReturnItem::GeneratedAttributeMethods
  include ::Spree::ReturnItem::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ReturnItem::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReturnItem::GeneratedRelationMethods
end

class Spree::ReturnItem::ActiveRecord_AssociationRelation
end

class Spree::ReturnItem::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReturnItem::GeneratedRelationMethods
end

class Spree::ReturnItem::ActiveRecord_Associations_CollectionProxy
end

class Spree::ReturnItem::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReturnItem::GeneratedRelationMethods
end

class Spree::ReturnItem::ActiveRecord_Relation
end

module Spree::ReturnItem::GeneratedAssociationMethods
end

module Spree::ReturnItem::GeneratedAssociationMethods
end

module Spree::ReturnItem::GeneratedAttributeMethods
end

module Spree::ReturnItem::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ReturnItem::GeneratedRelationMethods
end

module Spree::ReturnItem::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ReturnReason
  include ::Spree::ReturnReason::GeneratedAttributeMethods
  include ::Spree::ReturnReason::GeneratedAssociationMethods
  include ::Spree::NamedType
  def after_add_for_return_authorizations(); end

  def after_add_for_return_authorizations=(val); end

  def after_add_for_return_authorizations?(); end

  def after_remove_for_return_authorizations(); end

  def after_remove_for_return_authorizations=(val); end

  def after_remove_for_return_authorizations?(); end

  def autosave_associated_records_for_return_authorizations(*args); end

  def before_add_for_return_authorizations(); end

  def before_add_for_return_authorizations=(val); end

  def before_add_for_return_authorizations?(); end

  def before_remove_for_return_authorizations(); end

  def before_remove_for_return_authorizations=(val); end

  def before_remove_for_return_authorizations?(); end

  def validate_associated_records_for_return_authorizations(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ReturnReason::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReturnReason::GeneratedRelationMethods
end

class Spree::ReturnReason::ActiveRecord_AssociationRelation
end

class Spree::ReturnReason::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReturnReason::GeneratedRelationMethods
end

class Spree::ReturnReason::ActiveRecord_Associations_CollectionProxy
end

class Spree::ReturnReason::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ReturnReason::GeneratedRelationMethods
end

class Spree::ReturnReason::ActiveRecord_Relation
end

module Spree::ReturnReason::GeneratedAssociationMethods
  def return_authorization_ids(); end

  def return_authorization_ids=(ids); end

  def return_authorizations(); end

  def return_authorizations=(value); end
end

module Spree::ReturnReason::GeneratedAssociationMethods
end

module Spree::ReturnReason::GeneratedAttributeMethods
end

module Spree::ReturnReason::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ReturnReason::GeneratedRelationMethods
  def active(*args, &block); end

  def arel_table(*args, &block); end
end

module Spree::ReturnReason::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ReturnReason
  def self.active(*args); end

  def self.after_add_for_return_authorizations(); end

  def self.after_add_for_return_authorizations=(val); end

  def self.after_add_for_return_authorizations?(); end

  def self.after_remove_for_return_authorizations(); end

  def self.after_remove_for_return_authorizations=(val); end

  def self.after_remove_for_return_authorizations?(); end

  def self.before_add_for_return_authorizations(); end

  def self.before_add_for_return_authorizations=(val); end

  def self.before_add_for_return_authorizations?(); end

  def self.before_remove_for_return_authorizations(); end

  def self.before_remove_for_return_authorizations=(val); end

  def self.before_remove_for_return_authorizations?(); end
end

class Spree::ReturnsCalculator
  include ::Spree::ReturnsCalculator::GeneratedAttributeMethods
  include ::Spree::ReturnsCalculator::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ReturnsCalculator::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ReturnsCalculator::GeneratedRelationMethods
end

class Spree::ReturnsCalculator::ActiveRecord_AssociationRelation
end

class Spree::ReturnsCalculator::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ReturnsCalculator::GeneratedRelationMethods
end

class Spree::ReturnsCalculator::ActiveRecord_Associations_CollectionProxy
end

class Spree::ReturnsCalculator::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ReturnsCalculator::GeneratedRelationMethods
end

class Spree::ReturnsCalculator::ActiveRecord_Relation
end

module Spree::ReturnsCalculator::GeneratedAssociationMethods
end

module Spree::ReturnsCalculator::GeneratedAssociationMethods
end

module Spree::ReturnsCalculator::GeneratedAttributeMethods
end

module Spree::ReturnsCalculator::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ReturnsCalculator::GeneratedRelationMethods
end

module Spree::ReturnsCalculator::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Role
  include ::Spree::Role::GeneratedAttributeMethods
  include ::Spree::Role::GeneratedAssociationMethods
  def after_add_for_role_users(); end

  def after_add_for_role_users=(val); end

  def after_add_for_role_users?(); end

  def after_add_for_users(); end

  def after_add_for_users=(val); end

  def after_add_for_users?(); end

  def after_remove_for_role_users(); end

  def after_remove_for_role_users=(val); end

  def after_remove_for_role_users?(); end

  def after_remove_for_users(); end

  def after_remove_for_users=(val); end

  def after_remove_for_users?(); end

  def autosave_associated_records_for_role_users(*args); end

  def autosave_associated_records_for_users(*args); end

  def before_add_for_role_users(); end

  def before_add_for_role_users=(val); end

  def before_add_for_role_users?(); end

  def before_add_for_users(); end

  def before_add_for_users=(val); end

  def before_add_for_users?(); end

  def before_remove_for_role_users(); end

  def before_remove_for_role_users=(val); end

  def before_remove_for_role_users?(); end

  def before_remove_for_users(); end

  def before_remove_for_users=(val); end

  def before_remove_for_users?(); end

  def validate_associated_records_for_role_users(*args); end

  def validate_associated_records_for_users(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Role::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Role::GeneratedRelationMethods
end

class Spree::Role::ActiveRecord_AssociationRelation
end

class Spree::Role::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Role::GeneratedRelationMethods
end

class Spree::Role::ActiveRecord_Associations_CollectionProxy
end

class Spree::Role::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Role::GeneratedRelationMethods
end

class Spree::Role::ActiveRecord_Relation
end

module Spree::Role::GeneratedAssociationMethods
  def role_user_ids(); end

  def role_user_ids=(ids); end

  def role_users(); end

  def role_users=(value); end

  def user_ids(); end

  def user_ids=(ids); end

  def users(); end

  def users=(value); end
end

module Spree::Role::GeneratedAssociationMethods
end

module Spree::Role::GeneratedAttributeMethods
end

module Spree::Role::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Role::GeneratedRelationMethods
end

module Spree::Role::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Role
  def self.after_add_for_role_users(); end

  def self.after_add_for_role_users=(val); end

  def self.after_add_for_role_users?(); end

  def self.after_add_for_users(); end

  def self.after_add_for_users=(val); end

  def self.after_add_for_users?(); end

  def self.after_remove_for_role_users(); end

  def self.after_remove_for_role_users=(val); end

  def self.after_remove_for_role_users?(); end

  def self.after_remove_for_users(); end

  def self.after_remove_for_users=(val); end

  def self.after_remove_for_users?(); end

  def self.before_add_for_role_users(); end

  def self.before_add_for_role_users=(val); end

  def self.before_add_for_role_users?(); end

  def self.before_add_for_users(); end

  def self.before_add_for_users=(val); end

  def self.before_add_for_users?(); end

  def self.before_remove_for_role_users(); end

  def self.before_remove_for_role_users=(val); end

  def self.before_remove_for_role_users?(); end

  def self.before_remove_for_users(); end

  def self.before_remove_for_users=(val); end

  def self.before_remove_for_users?(); end
end

class Spree::RoleUser
  include ::Spree::RoleUser::GeneratedAttributeMethods
  include ::Spree::RoleUser::GeneratedAssociationMethods
  def autosave_associated_records_for_role(*args); end

  def autosave_associated_records_for_user(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::RoleUser::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::RoleUser::GeneratedRelationMethods
end

class Spree::RoleUser::ActiveRecord_AssociationRelation
end

class Spree::RoleUser::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::RoleUser::GeneratedRelationMethods
end

class Spree::RoleUser::ActiveRecord_Associations_CollectionProxy
end

class Spree::RoleUser::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::RoleUser::GeneratedRelationMethods
end

class Spree::RoleUser::ActiveRecord_Relation
end

module Spree::RoleUser::GeneratedAssociationMethods
  def build_role(*args, &block); end

  def build_user(*args, &block); end

  def create_role(*args, &block); end

  def create_role!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_role(); end

  def reload_user(); end

  def role(); end

  def role=(value); end

  def user(); end

  def user=(value); end
end

module Spree::RoleUser::GeneratedAssociationMethods
end

module Spree::RoleUser::GeneratedAttributeMethods
end

module Spree::RoleUser::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::RoleUser::GeneratedRelationMethods
end

module Spree::RoleUser::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ShippingCalculator
  include ::Spree::ShippingCalculator::GeneratedAttributeMethods
  include ::Spree::ShippingCalculator::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ShippingCalculator::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
end

class Spree::ShippingCalculator::ActiveRecord_AssociationRelation
end

class Spree::ShippingCalculator::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
end

class Spree::ShippingCalculator::ActiveRecord_Associations_CollectionProxy
end

class Spree::ShippingCalculator::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Calculator::GeneratedRelationMethods
  include ::Spree::ShippingCalculator::GeneratedRelationMethods
end

class Spree::ShippingCalculator::ActiveRecord_Relation
end

module Spree::ShippingCalculator::GeneratedAssociationMethods
end

module Spree::ShippingCalculator::GeneratedAssociationMethods
end

module Spree::ShippingCalculator::GeneratedAttributeMethods
end

module Spree::ShippingCalculator::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ShippingCalculator::GeneratedRelationMethods
end

module Spree::ShippingCalculator::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ShippingCategory
  include ::Spree::ShippingCategory::GeneratedAttributeMethods
  include ::Spree::ShippingCategory::GeneratedAssociationMethods
  def after_add_for_products(); end

  def after_add_for_products=(val); end

  def after_add_for_products?(); end

  def after_add_for_shipping_method_categories(); end

  def after_add_for_shipping_method_categories=(val); end

  def after_add_for_shipping_method_categories?(); end

  def after_add_for_shipping_methods(); end

  def after_add_for_shipping_methods=(val); end

  def after_add_for_shipping_methods?(); end

  def after_remove_for_products(); end

  def after_remove_for_products=(val); end

  def after_remove_for_products?(); end

  def after_remove_for_shipping_method_categories(); end

  def after_remove_for_shipping_method_categories=(val); end

  def after_remove_for_shipping_method_categories?(); end

  def after_remove_for_shipping_methods(); end

  def after_remove_for_shipping_methods=(val); end

  def after_remove_for_shipping_methods?(); end

  def autosave_associated_records_for_products(*args); end

  def autosave_associated_records_for_shipping_method_categories(*args); end

  def autosave_associated_records_for_shipping_methods(*args); end

  def before_add_for_products(); end

  def before_add_for_products=(val); end

  def before_add_for_products?(); end

  def before_add_for_shipping_method_categories(); end

  def before_add_for_shipping_method_categories=(val); end

  def before_add_for_shipping_method_categories?(); end

  def before_add_for_shipping_methods(); end

  def before_add_for_shipping_methods=(val); end

  def before_add_for_shipping_methods?(); end

  def before_remove_for_products(); end

  def before_remove_for_products=(val); end

  def before_remove_for_products?(); end

  def before_remove_for_shipping_method_categories(); end

  def before_remove_for_shipping_method_categories=(val); end

  def before_remove_for_shipping_method_categories?(); end

  def before_remove_for_shipping_methods(); end

  def before_remove_for_shipping_methods=(val); end

  def before_remove_for_shipping_methods?(); end

  def validate_associated_records_for_products(*args); end

  def validate_associated_records_for_shipping_method_categories(*args); end

  def validate_associated_records_for_shipping_methods(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ShippingCategory::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingCategory::GeneratedRelationMethods
end

class Spree::ShippingCategory::ActiveRecord_AssociationRelation
end

class Spree::ShippingCategory::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingCategory::GeneratedRelationMethods
end

class Spree::ShippingCategory::ActiveRecord_Associations_CollectionProxy
end

class Spree::ShippingCategory::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingCategory::GeneratedRelationMethods
end

class Spree::ShippingCategory::ActiveRecord_Relation
end

module Spree::ShippingCategory::GeneratedAssociationMethods
  def product_ids(); end

  def product_ids=(ids); end

  def products(); end

  def products=(value); end

  def shipping_method_categories(); end

  def shipping_method_categories=(value); end

  def shipping_method_category_ids(); end

  def shipping_method_category_ids=(ids); end

  def shipping_method_ids(); end

  def shipping_method_ids=(ids); end

  def shipping_methods(); end

  def shipping_methods=(value); end
end

module Spree::ShippingCategory::GeneratedAssociationMethods
end

module Spree::ShippingCategory::GeneratedAttributeMethods
end

module Spree::ShippingCategory::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ShippingCategory::GeneratedRelationMethods
end

module Spree::ShippingCategory::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ShippingCategory
  def self.after_add_for_products(); end

  def self.after_add_for_products=(val); end

  def self.after_add_for_products?(); end

  def self.after_add_for_shipping_method_categories(); end

  def self.after_add_for_shipping_method_categories=(val); end

  def self.after_add_for_shipping_method_categories?(); end

  def self.after_add_for_shipping_methods(); end

  def self.after_add_for_shipping_methods=(val); end

  def self.after_add_for_shipping_methods?(); end

  def self.after_remove_for_products(); end

  def self.after_remove_for_products=(val); end

  def self.after_remove_for_products?(); end

  def self.after_remove_for_shipping_method_categories(); end

  def self.after_remove_for_shipping_method_categories=(val); end

  def self.after_remove_for_shipping_method_categories?(); end

  def self.after_remove_for_shipping_methods(); end

  def self.after_remove_for_shipping_methods=(val); end

  def self.after_remove_for_shipping_methods?(); end

  def self.before_add_for_products(); end

  def self.before_add_for_products=(val); end

  def self.before_add_for_products?(); end

  def self.before_add_for_shipping_method_categories(); end

  def self.before_add_for_shipping_method_categories=(val); end

  def self.before_add_for_shipping_method_categories?(); end

  def self.before_add_for_shipping_methods(); end

  def self.before_add_for_shipping_methods=(val); end

  def self.before_add_for_shipping_methods?(); end

  def self.before_remove_for_products(); end

  def self.before_remove_for_products=(val); end

  def self.before_remove_for_products?(); end

  def self.before_remove_for_shipping_method_categories(); end

  def self.before_remove_for_shipping_method_categories=(val); end

  def self.before_remove_for_shipping_method_categories?(); end

  def self.before_remove_for_shipping_methods(); end

  def self.before_remove_for_shipping_methods=(val); end

  def self.before_remove_for_shipping_methods?(); end
end

class Spree::ShippingManifest::ManifestItem
  def self.[](*_); end

  def self.members(); end
end

class Spree::ShippingMethod
  include ::Spree::ShippingMethod::GeneratedAttributeMethods
  include ::Spree::ShippingMethod::GeneratedAssociationMethods
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  include ::Spree::CalculatedAdjustments
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def after_add_for_cartons(); end

  def after_add_for_cartons=(val); end

  def after_add_for_cartons?(); end

  def after_add_for_shipments(); end

  def after_add_for_shipments=(val); end

  def after_add_for_shipments?(); end

  def after_add_for_shipping_categories(); end

  def after_add_for_shipping_categories=(val); end

  def after_add_for_shipping_categories?(); end

  def after_add_for_shipping_method_categories(); end

  def after_add_for_shipping_method_categories=(val); end

  def after_add_for_shipping_method_categories?(); end

  def after_add_for_shipping_method_stock_locations(); end

  def after_add_for_shipping_method_stock_locations=(val); end

  def after_add_for_shipping_method_stock_locations?(); end

  def after_add_for_shipping_method_zones(); end

  def after_add_for_shipping_method_zones=(val); end

  def after_add_for_shipping_method_zones?(); end

  def after_add_for_shipping_rates(); end

  def after_add_for_shipping_rates=(val); end

  def after_add_for_shipping_rates?(); end

  def after_add_for_stock_locations(); end

  def after_add_for_stock_locations=(val); end

  def after_add_for_stock_locations?(); end

  def after_add_for_store_shipping_methods(); end

  def after_add_for_store_shipping_methods=(val); end

  def after_add_for_store_shipping_methods?(); end

  def after_add_for_stores(); end

  def after_add_for_stores=(val); end

  def after_add_for_stores?(); end

  def after_add_for_zones(); end

  def after_add_for_zones=(val); end

  def after_add_for_zones?(); end

  def after_remove_for_cartons(); end

  def after_remove_for_cartons=(val); end

  def after_remove_for_cartons?(); end

  def after_remove_for_shipments(); end

  def after_remove_for_shipments=(val); end

  def after_remove_for_shipments?(); end

  def after_remove_for_shipping_categories(); end

  def after_remove_for_shipping_categories=(val); end

  def after_remove_for_shipping_categories?(); end

  def after_remove_for_shipping_method_categories(); end

  def after_remove_for_shipping_method_categories=(val); end

  def after_remove_for_shipping_method_categories?(); end

  def after_remove_for_shipping_method_stock_locations(); end

  def after_remove_for_shipping_method_stock_locations=(val); end

  def after_remove_for_shipping_method_stock_locations?(); end

  def after_remove_for_shipping_method_zones(); end

  def after_remove_for_shipping_method_zones=(val); end

  def after_remove_for_shipping_method_zones?(); end

  def after_remove_for_shipping_rates(); end

  def after_remove_for_shipping_rates=(val); end

  def after_remove_for_shipping_rates?(); end

  def after_remove_for_stock_locations(); end

  def after_remove_for_stock_locations=(val); end

  def after_remove_for_stock_locations?(); end

  def after_remove_for_store_shipping_methods(); end

  def after_remove_for_store_shipping_methods=(val); end

  def after_remove_for_store_shipping_methods?(); end

  def after_remove_for_stores(); end

  def after_remove_for_stores=(val); end

  def after_remove_for_stores?(); end

  def after_remove_for_zones(); end

  def after_remove_for_zones=(val); end

  def after_remove_for_zones?(); end

  def autosave_associated_records_for_calculator(); end

  def autosave_associated_records_for_cartons(*args); end

  def autosave_associated_records_for_shipments(*args); end

  def autosave_associated_records_for_shipping_categories(*args); end

  def autosave_associated_records_for_shipping_method_categories(*args); end

  def autosave_associated_records_for_shipping_method_stock_locations(*args); end

  def autosave_associated_records_for_shipping_method_zones(*args); end

  def autosave_associated_records_for_shipping_rates(*args); end

  def autosave_associated_records_for_stock_locations(*args); end

  def autosave_associated_records_for_store_shipping_methods(*args); end

  def autosave_associated_records_for_stores(*args); end

  def autosave_associated_records_for_tax_category(*args); end

  def autosave_associated_records_for_zones(*args); end

  def before_add_for_cartons(); end

  def before_add_for_cartons=(val); end

  def before_add_for_cartons?(); end

  def before_add_for_shipments(); end

  def before_add_for_shipments=(val); end

  def before_add_for_shipments?(); end

  def before_add_for_shipping_categories(); end

  def before_add_for_shipping_categories=(val); end

  def before_add_for_shipping_categories?(); end

  def before_add_for_shipping_method_categories(); end

  def before_add_for_shipping_method_categories=(val); end

  def before_add_for_shipping_method_categories?(); end

  def before_add_for_shipping_method_stock_locations(); end

  def before_add_for_shipping_method_stock_locations=(val); end

  def before_add_for_shipping_method_stock_locations?(); end

  def before_add_for_shipping_method_zones(); end

  def before_add_for_shipping_method_zones=(val); end

  def before_add_for_shipping_method_zones?(); end

  def before_add_for_shipping_rates(); end

  def before_add_for_shipping_rates=(val); end

  def before_add_for_shipping_rates?(); end

  def before_add_for_stock_locations(); end

  def before_add_for_stock_locations=(val); end

  def before_add_for_stock_locations?(); end

  def before_add_for_store_shipping_methods(); end

  def before_add_for_store_shipping_methods=(val); end

  def before_add_for_store_shipping_methods?(); end

  def before_add_for_stores(); end

  def before_add_for_stores=(val); end

  def before_add_for_stores?(); end

  def before_add_for_zones(); end

  def before_add_for_zones=(val); end

  def before_add_for_zones?(); end

  def before_remove_for_cartons(); end

  def before_remove_for_cartons=(val); end

  def before_remove_for_cartons?(); end

  def before_remove_for_shipments(); end

  def before_remove_for_shipments=(val); end

  def before_remove_for_shipments?(); end

  def before_remove_for_shipping_categories(); end

  def before_remove_for_shipping_categories=(val); end

  def before_remove_for_shipping_categories?(); end

  def before_remove_for_shipping_method_categories(); end

  def before_remove_for_shipping_method_categories=(val); end

  def before_remove_for_shipping_method_categories?(); end

  def before_remove_for_shipping_method_stock_locations(); end

  def before_remove_for_shipping_method_stock_locations=(val); end

  def before_remove_for_shipping_method_stock_locations?(); end

  def before_remove_for_shipping_method_zones(); end

  def before_remove_for_shipping_method_zones=(val); end

  def before_remove_for_shipping_method_zones?(); end

  def before_remove_for_shipping_rates(); end

  def before_remove_for_shipping_rates=(val); end

  def before_remove_for_shipping_rates?(); end

  def before_remove_for_stock_locations(); end

  def before_remove_for_stock_locations=(val); end

  def before_remove_for_stock_locations?(); end

  def before_remove_for_store_shipping_methods(); end

  def before_remove_for_store_shipping_methods=(val); end

  def before_remove_for_store_shipping_methods?(); end

  def before_remove_for_stores(); end

  def before_remove_for_stores=(val); end

  def before_remove_for_stores?(); end

  def before_remove_for_zones(); end

  def before_remove_for_zones=(val); end

  def before_remove_for_zones?(); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end

  def validate_associated_records_for_calculator(*args); end

  def validate_associated_records_for_cartons(*args); end

  def validate_associated_records_for_shipments(*args); end

  def validate_associated_records_for_shipping_categories(*args); end

  def validate_associated_records_for_shipping_method_categories(*args); end

  def validate_associated_records_for_shipping_method_stock_locations(*args); end

  def validate_associated_records_for_shipping_method_zones(*args); end

  def validate_associated_records_for_shipping_rates(*args); end

  def validate_associated_records_for_stock_locations(*args); end

  def validate_associated_records_for_store_shipping_methods(*args); end

  def validate_associated_records_for_stores(*args); end

  def validate_associated_records_for_zones(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ShippingMethod::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethod::GeneratedRelationMethods
end

class Spree::ShippingMethod::ActiveRecord_AssociationRelation
end

class Spree::ShippingMethod::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethod::GeneratedRelationMethods
end

class Spree::ShippingMethod::ActiveRecord_Associations_CollectionProxy
end

class Spree::ShippingMethod::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethod::GeneratedRelationMethods
end

class Spree::ShippingMethod::ActiveRecord_Relation
end

module Spree::ShippingMethod::GeneratedAssociationMethods
  def build_calculator(*args, &block); end

  def build_tax_category(*args, &block); end

  def calculator(); end

  def calculator=(value); end

  def calculator_attributes=(attributes); end

  def carton_ids(); end

  def carton_ids=(ids); end

  def cartons(); end

  def cartons=(value); end

  def create_calculator(*args, &block); end

  def create_calculator!(*args, &block); end

  def create_tax_category(*args, &block); end

  def create_tax_category!(*args, &block); end

  def reload_calculator(); end

  def reload_tax_category(); end

  def shipment_ids(); end

  def shipment_ids=(ids); end

  def shipments(); end

  def shipments=(value); end

  def shipping_categories(); end

  def shipping_categories=(value); end

  def shipping_category_ids(); end

  def shipping_category_ids=(ids); end

  def shipping_method_categories(); end

  def shipping_method_categories=(value); end

  def shipping_method_category_ids(); end

  def shipping_method_category_ids=(ids); end

  def shipping_method_stock_location_ids(); end

  def shipping_method_stock_location_ids=(ids); end

  def shipping_method_stock_locations(); end

  def shipping_method_stock_locations=(value); end

  def shipping_method_zone_ids(); end

  def shipping_method_zone_ids=(ids); end

  def shipping_method_zones(); end

  def shipping_method_zones=(value); end

  def shipping_rate_ids(); end

  def shipping_rate_ids=(ids); end

  def shipping_rates(); end

  def shipping_rates=(value); end

  def stock_location_ids(); end

  def stock_location_ids=(ids); end

  def stock_locations(); end

  def stock_locations=(value); end

  def store_ids(); end

  def store_ids=(ids); end

  def store_shipping_method_ids(); end

  def store_shipping_method_ids=(ids); end

  def store_shipping_methods(); end

  def store_shipping_methods=(value); end

  def stores(); end

  def stores=(value); end

  def tax_category(); end

  def tax_category=(value); end

  def zone_ids(); end

  def zone_ids=(ids); end

  def zones(); end

  def zones=(value); end
end

module Spree::ShippingMethod::GeneratedAssociationMethods
end

module Spree::ShippingMethod::GeneratedAttributeMethods
end

module Spree::ShippingMethod::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ShippingMethod::GeneratedRelationMethods
  def available_to_store(*args, &block); end

  def discarded(*args, &block); end

  def kept(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::ShippingMethod::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ShippingMethod
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  extend ::Spree::CalculatedAdjustments::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.after_add_for_cartons(); end

  def self.after_add_for_cartons=(val); end

  def self.after_add_for_cartons?(); end

  def self.after_add_for_shipments(); end

  def self.after_add_for_shipments=(val); end

  def self.after_add_for_shipments?(); end

  def self.after_add_for_shipping_categories(); end

  def self.after_add_for_shipping_categories=(val); end

  def self.after_add_for_shipping_categories?(); end

  def self.after_add_for_shipping_method_categories(); end

  def self.after_add_for_shipping_method_categories=(val); end

  def self.after_add_for_shipping_method_categories?(); end

  def self.after_add_for_shipping_method_stock_locations(); end

  def self.after_add_for_shipping_method_stock_locations=(val); end

  def self.after_add_for_shipping_method_stock_locations?(); end

  def self.after_add_for_shipping_method_zones(); end

  def self.after_add_for_shipping_method_zones=(val); end

  def self.after_add_for_shipping_method_zones?(); end

  def self.after_add_for_shipping_rates(); end

  def self.after_add_for_shipping_rates=(val); end

  def self.after_add_for_shipping_rates?(); end

  def self.after_add_for_stock_locations(); end

  def self.after_add_for_stock_locations=(val); end

  def self.after_add_for_stock_locations?(); end

  def self.after_add_for_store_shipping_methods(); end

  def self.after_add_for_store_shipping_methods=(val); end

  def self.after_add_for_store_shipping_methods?(); end

  def self.after_add_for_stores(); end

  def self.after_add_for_stores=(val); end

  def self.after_add_for_stores?(); end

  def self.after_add_for_zones(); end

  def self.after_add_for_zones=(val); end

  def self.after_add_for_zones?(); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_remove_for_cartons(); end

  def self.after_remove_for_cartons=(val); end

  def self.after_remove_for_cartons?(); end

  def self.after_remove_for_shipments(); end

  def self.after_remove_for_shipments=(val); end

  def self.after_remove_for_shipments?(); end

  def self.after_remove_for_shipping_categories(); end

  def self.after_remove_for_shipping_categories=(val); end

  def self.after_remove_for_shipping_categories?(); end

  def self.after_remove_for_shipping_method_categories(); end

  def self.after_remove_for_shipping_method_categories=(val); end

  def self.after_remove_for_shipping_method_categories?(); end

  def self.after_remove_for_shipping_method_stock_locations(); end

  def self.after_remove_for_shipping_method_stock_locations=(val); end

  def self.after_remove_for_shipping_method_stock_locations?(); end

  def self.after_remove_for_shipping_method_zones(); end

  def self.after_remove_for_shipping_method_zones=(val); end

  def self.after_remove_for_shipping_method_zones?(); end

  def self.after_remove_for_shipping_rates(); end

  def self.after_remove_for_shipping_rates=(val); end

  def self.after_remove_for_shipping_rates?(); end

  def self.after_remove_for_stock_locations(); end

  def self.after_remove_for_stock_locations=(val); end

  def self.after_remove_for_stock_locations?(); end

  def self.after_remove_for_store_shipping_methods(); end

  def self.after_remove_for_store_shipping_methods=(val); end

  def self.after_remove_for_store_shipping_methods?(); end

  def self.after_remove_for_stores(); end

  def self.after_remove_for_stores=(val); end

  def self.after_remove_for_stores?(); end

  def self.after_remove_for_zones(); end

  def self.after_remove_for_zones=(val); end

  def self.after_remove_for_zones?(); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.available_to_store(*args); end

  def self.before_add_for_cartons(); end

  def self.before_add_for_cartons=(val); end

  def self.before_add_for_cartons?(); end

  def self.before_add_for_shipments(); end

  def self.before_add_for_shipments=(val); end

  def self.before_add_for_shipments?(); end

  def self.before_add_for_shipping_categories(); end

  def self.before_add_for_shipping_categories=(val); end

  def self.before_add_for_shipping_categories?(); end

  def self.before_add_for_shipping_method_categories(); end

  def self.before_add_for_shipping_method_categories=(val); end

  def self.before_add_for_shipping_method_categories?(); end

  def self.before_add_for_shipping_method_stock_locations(); end

  def self.before_add_for_shipping_method_stock_locations=(val); end

  def self.before_add_for_shipping_method_stock_locations?(); end

  def self.before_add_for_shipping_method_zones(); end

  def self.before_add_for_shipping_method_zones=(val); end

  def self.before_add_for_shipping_method_zones?(); end

  def self.before_add_for_shipping_rates(); end

  def self.before_add_for_shipping_rates=(val); end

  def self.before_add_for_shipping_rates?(); end

  def self.before_add_for_stock_locations(); end

  def self.before_add_for_stock_locations=(val); end

  def self.before_add_for_stock_locations?(); end

  def self.before_add_for_store_shipping_methods(); end

  def self.before_add_for_store_shipping_methods=(val); end

  def self.before_add_for_store_shipping_methods?(); end

  def self.before_add_for_stores(); end

  def self.before_add_for_stores=(val); end

  def self.before_add_for_stores?(); end

  def self.before_add_for_zones(); end

  def self.before_add_for_zones=(val); end

  def self.before_add_for_zones?(); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_remove_for_cartons(); end

  def self.before_remove_for_cartons=(val); end

  def self.before_remove_for_cartons?(); end

  def self.before_remove_for_shipments(); end

  def self.before_remove_for_shipments=(val); end

  def self.before_remove_for_shipments?(); end

  def self.before_remove_for_shipping_categories(); end

  def self.before_remove_for_shipping_categories=(val); end

  def self.before_remove_for_shipping_categories?(); end

  def self.before_remove_for_shipping_method_categories(); end

  def self.before_remove_for_shipping_method_categories=(val); end

  def self.before_remove_for_shipping_method_categories?(); end

  def self.before_remove_for_shipping_method_stock_locations(); end

  def self.before_remove_for_shipping_method_stock_locations=(val); end

  def self.before_remove_for_shipping_method_stock_locations?(); end

  def self.before_remove_for_shipping_method_zones(); end

  def self.before_remove_for_shipping_method_zones=(val); end

  def self.before_remove_for_shipping_method_zones?(); end

  def self.before_remove_for_shipping_rates(); end

  def self.before_remove_for_shipping_rates=(val); end

  def self.before_remove_for_shipping_rates?(); end

  def self.before_remove_for_stock_locations(); end

  def self.before_remove_for_stock_locations=(val); end

  def self.before_remove_for_stock_locations?(); end

  def self.before_remove_for_store_shipping_methods(); end

  def self.before_remove_for_store_shipping_methods=(val); end

  def self.before_remove_for_store_shipping_methods?(); end

  def self.before_remove_for_stores(); end

  def self.before_remove_for_stores=(val); end

  def self.before_remove_for_stores?(); end

  def self.before_remove_for_zones(); end

  def self.before_remove_for_zones=(val); end

  def self.before_remove_for_zones?(); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.kept(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.undiscarded(*args); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::ShippingMethodCategory
  include ::Spree::ShippingMethodCategory::GeneratedAttributeMethods
  include ::Spree::ShippingMethodCategory::GeneratedAssociationMethods
  def autosave_associated_records_for_shipping_category(*args); end

  def autosave_associated_records_for_shipping_method(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ShippingMethodCategory::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodCategory::GeneratedRelationMethods
end

class Spree::ShippingMethodCategory::ActiveRecord_AssociationRelation
end

class Spree::ShippingMethodCategory::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodCategory::GeneratedRelationMethods
end

class Spree::ShippingMethodCategory::ActiveRecord_Associations_CollectionProxy
end

class Spree::ShippingMethodCategory::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodCategory::GeneratedRelationMethods
end

class Spree::ShippingMethodCategory::ActiveRecord_Relation
end

module Spree::ShippingMethodCategory::GeneratedAssociationMethods
  def build_shipping_category(*args, &block); end

  def build_shipping_method(*args, &block); end

  def create_shipping_category(*args, &block); end

  def create_shipping_category!(*args, &block); end

  def create_shipping_method(*args, &block); end

  def create_shipping_method!(*args, &block); end

  def reload_shipping_category(); end

  def reload_shipping_method(); end

  def shipping_category(); end

  def shipping_category=(value); end

  def shipping_method(); end

  def shipping_method=(value); end
end

module Spree::ShippingMethodCategory::GeneratedAssociationMethods
end

module Spree::ShippingMethodCategory::GeneratedAttributeMethods
end

module Spree::ShippingMethodCategory::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ShippingMethodCategory::GeneratedRelationMethods
end

module Spree::ShippingMethodCategory::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ShippingMethodStockLocation
  include ::Spree::ShippingMethodStockLocation::GeneratedAttributeMethods
  include ::Spree::ShippingMethodStockLocation::GeneratedAssociationMethods
  def autosave_associated_records_for_shipping_method(*args); end

  def autosave_associated_records_for_stock_location(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ShippingMethodStockLocation::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodStockLocation::GeneratedRelationMethods
end

class Spree::ShippingMethodStockLocation::ActiveRecord_AssociationRelation
end

class Spree::ShippingMethodStockLocation::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodStockLocation::GeneratedRelationMethods
end

class Spree::ShippingMethodStockLocation::ActiveRecord_Associations_CollectionProxy
end

class Spree::ShippingMethodStockLocation::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodStockLocation::GeneratedRelationMethods
end

class Spree::ShippingMethodStockLocation::ActiveRecord_Relation
end

module Spree::ShippingMethodStockLocation::GeneratedAssociationMethods
  def build_shipping_method(*args, &block); end

  def build_stock_location(*args, &block); end

  def create_shipping_method(*args, &block); end

  def create_shipping_method!(*args, &block); end

  def create_stock_location(*args, &block); end

  def create_stock_location!(*args, &block); end

  def reload_shipping_method(); end

  def reload_stock_location(); end

  def shipping_method(); end

  def shipping_method=(value); end

  def stock_location(); end

  def stock_location=(value); end
end

module Spree::ShippingMethodStockLocation::GeneratedAssociationMethods
end

module Spree::ShippingMethodStockLocation::GeneratedAttributeMethods
end

module Spree::ShippingMethodStockLocation::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ShippingMethodStockLocation::GeneratedRelationMethods
end

module Spree::ShippingMethodStockLocation::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ShippingMethodZone
  include ::Spree::ShippingMethodZone::GeneratedAttributeMethods
  include ::Spree::ShippingMethodZone::GeneratedAssociationMethods
  def autosave_associated_records_for_shipping_method(*args); end

  def autosave_associated_records_for_zone(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ShippingMethodZone::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodZone::GeneratedRelationMethods
end

class Spree::ShippingMethodZone::ActiveRecord_AssociationRelation
end

class Spree::ShippingMethodZone::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodZone::GeneratedRelationMethods
end

class Spree::ShippingMethodZone::ActiveRecord_Associations_CollectionProxy
end

class Spree::ShippingMethodZone::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingMethodZone::GeneratedRelationMethods
end

class Spree::ShippingMethodZone::ActiveRecord_Relation
end

module Spree::ShippingMethodZone::GeneratedAssociationMethods
  def build_shipping_method(*args, &block); end

  def build_zone(*args, &block); end

  def create_shipping_method(*args, &block); end

  def create_shipping_method!(*args, &block); end

  def create_zone(*args, &block); end

  def create_zone!(*args, &block); end

  def reload_shipping_method(); end

  def reload_zone(); end

  def shipping_method(); end

  def shipping_method=(value); end

  def zone(); end

  def zone=(value); end
end

module Spree::ShippingMethodZone::GeneratedAssociationMethods
end

module Spree::ShippingMethodZone::GeneratedAttributeMethods
end

module Spree::ShippingMethodZone::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ShippingMethodZone::GeneratedRelationMethods
end

module Spree::ShippingMethodZone::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ShippingRate
  include ::Spree::ShippingRate::GeneratedAttributeMethods
  include ::Spree::ShippingRate::GeneratedAssociationMethods
  def after_add_for_taxes(); end

  def after_add_for_taxes=(val); end

  def after_add_for_taxes?(); end

  def after_remove_for_taxes(); end

  def after_remove_for_taxes=(val); end

  def after_remove_for_taxes?(); end

  def amount(*args); end

  def amount=(*args); end

  def amount?(*args); end

  def amount_before_last_save(*args); end

  def amount_before_type_cast(*args); end

  def amount_came_from_user?(*args); end

  def amount_change(*args); end

  def amount_change_to_be_saved(*args); end

  def amount_changed?(*args); end

  def amount_in_database(*args); end

  def amount_previous_change(*args); end

  def amount_previously_changed?(*args); end

  def amount_was(*args); end

  def amount_will_change!(*args); end

  def autosave_associated_records_for_shipment(*args); end

  def autosave_associated_records_for_shipping_method(*args); end

  def autosave_associated_records_for_taxes(*args); end

  def before_add_for_taxes(); end

  def before_add_for_taxes=(val); end

  def before_add_for_taxes?(); end

  def before_remove_for_taxes(); end

  def before_remove_for_taxes=(val); end

  def before_remove_for_taxes?(); end

  def display_amount(); end

  def restore_amount!(*args); end

  def saved_change_to_amount(*args); end

  def saved_change_to_amount?(*args); end

  def validate_associated_records_for_taxes(*args); end

  def will_save_change_to_amount?(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ShippingRate::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingRate::GeneratedRelationMethods
end

class Spree::ShippingRate::ActiveRecord_AssociationRelation
end

class Spree::ShippingRate::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingRate::GeneratedRelationMethods
end

class Spree::ShippingRate::ActiveRecord_Associations_CollectionProxy
end

class Spree::ShippingRate::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingRate::GeneratedRelationMethods
end

class Spree::ShippingRate::ActiveRecord_Relation
end

module Spree::ShippingRate::GeneratedAssociationMethods
  def build_shipment(*args, &block); end

  def build_shipping_method(*args, &block); end

  def create_shipment(*args, &block); end

  def create_shipment!(*args, &block); end

  def create_shipping_method(*args, &block); end

  def create_shipping_method!(*args, &block); end

  def reload_shipment(); end

  def reload_shipping_method(); end

  def shipment(); end

  def shipment=(value); end

  def shipping_method(); end

  def shipping_method=(value); end

  def tax_ids(); end

  def tax_ids=(ids); end

  def taxes(); end

  def taxes=(value); end
end

module Spree::ShippingRate::GeneratedAssociationMethods
end

module Spree::ShippingRate::GeneratedAttributeMethods
end

module Spree::ShippingRate::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ShippingRate::GeneratedRelationMethods
end

module Spree::ShippingRate::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::ShippingRate
  def self.after_add_for_taxes(); end

  def self.after_add_for_taxes=(val); end

  def self.after_add_for_taxes?(); end

  def self.after_remove_for_taxes(); end

  def self.after_remove_for_taxes=(val); end

  def self.after_remove_for_taxes?(); end

  def self.before_add_for_taxes(); end

  def self.before_add_for_taxes=(val); end

  def self.before_add_for_taxes?(); end

  def self.before_remove_for_taxes(); end

  def self.before_remove_for_taxes=(val); end

  def self.before_remove_for_taxes?(); end
end

class Spree::ShippingRateTax
  include ::Spree::ShippingRateTax::GeneratedAttributeMethods
  include ::Spree::ShippingRateTax::GeneratedAssociationMethods
  def autosave_associated_records_for_shipping_rate(*args); end

  def autosave_associated_records_for_tax_rate(*args); end

  def display_absolute_amount(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ShippingRateTax::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingRateTax::GeneratedRelationMethods
end

class Spree::ShippingRateTax::ActiveRecord_AssociationRelation
end

class Spree::ShippingRateTax::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingRateTax::GeneratedRelationMethods
end

class Spree::ShippingRateTax::ActiveRecord_Associations_CollectionProxy
end

class Spree::ShippingRateTax::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ShippingRateTax::GeneratedRelationMethods
end

class Spree::ShippingRateTax::ActiveRecord_Relation
end

module Spree::ShippingRateTax::GeneratedAssociationMethods
  def build_shipping_rate(*args, &block); end

  def build_tax_rate(*args, &block); end

  def create_shipping_rate(*args, &block); end

  def create_shipping_rate!(*args, &block); end

  def create_tax_rate(*args, &block); end

  def create_tax_rate!(*args, &block); end

  def reload_shipping_rate(); end

  def reload_tax_rate(); end

  def shipping_rate(); end

  def shipping_rate=(value); end

  def tax_rate(); end

  def tax_rate=(value); end
end

module Spree::ShippingRateTax::GeneratedAssociationMethods
end

module Spree::ShippingRateTax::GeneratedAttributeMethods
end

module Spree::ShippingRateTax::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ShippingRateTax::GeneratedRelationMethods
end

module Spree::ShippingRateTax::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::State
  include ::Spree::State::GeneratedAttributeMethods
  include ::Spree::State::GeneratedAssociationMethods
  def after_add_for_addresses(); end

  def after_add_for_addresses=(val); end

  def after_add_for_addresses?(); end

  def after_remove_for_addresses(); end

  def after_remove_for_addresses=(val); end

  def after_remove_for_addresses?(); end

  def autosave_associated_records_for_addresses(*args); end

  def autosave_associated_records_for_country(*args); end

  def before_add_for_addresses(); end

  def before_add_for_addresses=(val); end

  def before_add_for_addresses?(); end

  def before_remove_for_addresses(); end

  def before_remove_for_addresses=(val); end

  def before_remove_for_addresses?(); end

  def validate_associated_records_for_addresses(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::State::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::State::GeneratedRelationMethods
end

class Spree::State::ActiveRecord_AssociationRelation
end

class Spree::State::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::State::GeneratedRelationMethods
end

class Spree::State::ActiveRecord_Associations_CollectionProxy
end

class Spree::State::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::State::GeneratedRelationMethods
end

class Spree::State::ActiveRecord_Relation
end

module Spree::State::GeneratedAssociationMethods
  def address_ids(); end

  def address_ids=(ids); end

  def addresses(); end

  def addresses=(value); end

  def build_country(*args, &block); end

  def country(); end

  def country=(value); end

  def create_country(*args, &block); end

  def create_country!(*args, &block); end

  def reload_country(); end
end

module Spree::State::GeneratedAssociationMethods
end

module Spree::State::GeneratedAttributeMethods
end

module Spree::State::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::State::GeneratedRelationMethods
  def with_name_or_abbr(*args, &block); end
end

module Spree::State::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::State
  def self.after_add_for_addresses(); end

  def self.after_add_for_addresses=(val); end

  def self.after_add_for_addresses?(); end

  def self.after_remove_for_addresses(); end

  def self.after_remove_for_addresses=(val); end

  def self.after_remove_for_addresses?(); end

  def self.before_add_for_addresses(); end

  def self.before_add_for_addresses=(val); end

  def self.before_add_for_addresses?(); end

  def self.before_remove_for_addresses(); end

  def self.before_remove_for_addresses=(val); end

  def self.before_remove_for_addresses?(); end

  def self.with_name_or_abbr(*args); end
end

class Spree::StateChange
  include ::Spree::StateChange::GeneratedAttributeMethods
  include ::Spree::StateChange::GeneratedAssociationMethods
  def autosave_associated_records_for_stateful(*args); end

  def autosave_associated_records_for_user(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StateChange::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StateChange::GeneratedRelationMethods
end

class Spree::StateChange::ActiveRecord_AssociationRelation
end

class Spree::StateChange::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StateChange::GeneratedRelationMethods
end

class Spree::StateChange::ActiveRecord_Associations_CollectionProxy
end

class Spree::StateChange::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StateChange::GeneratedRelationMethods
end

class Spree::StateChange::ActiveRecord_Relation
end

module Spree::StateChange::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_stateful(); end

  def reload_user(); end

  def stateful(); end

  def stateful=(value); end

  def user(); end

  def user=(value); end
end

module Spree::StateChange::GeneratedAssociationMethods
end

module Spree::StateChange::GeneratedAttributeMethods
end

module Spree::StateChange::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StateChange::GeneratedRelationMethods
end

module Spree::StateChange::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StockItem
  include ::Spree::StockItem::GeneratedAttributeMethods
  include ::Spree::StockItem::GeneratedAssociationMethods
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def after_add_for_stock_movements(); end

  def after_add_for_stock_movements=(val); end

  def after_add_for_stock_movements?(); end

  def after_remove_for_stock_movements(); end

  def after_remove_for_stock_movements=(val); end

  def after_remove_for_stock_movements?(); end

  def autosave_associated_records_for_stock_location(*args); end

  def autosave_associated_records_for_stock_movements(*args); end

  def autosave_associated_records_for_variant(*args); end

  def before_add_for_stock_movements(); end

  def before_add_for_stock_movements=(val); end

  def before_add_for_stock_movements?(); end

  def before_remove_for_stock_movements(); end

  def before_remove_for_stock_movements=(val); end

  def before_remove_for_stock_movements?(); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end

  def validate_associated_records_for_stock_movements(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StockItem::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockItem::GeneratedRelationMethods
end

class Spree::StockItem::ActiveRecord_AssociationRelation
end

class Spree::StockItem::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockItem::GeneratedRelationMethods
end

class Spree::StockItem::ActiveRecord_Associations_CollectionProxy
end

class Spree::StockItem::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockItem::GeneratedRelationMethods
end

class Spree::StockItem::ActiveRecord_Relation
end

module Spree::StockItem::GeneratedAssociationMethods
  def build_stock_location(*args, &block); end

  def build_variant(*args, &block); end

  def create_stock_location(*args, &block); end

  def create_stock_location!(*args, &block); end

  def create_variant(*args, &block); end

  def create_variant!(*args, &block); end

  def reload_stock_location(); end

  def reload_variant(); end

  def stock_location(); end

  def stock_location=(value); end

  def stock_movement_ids(); end

  def stock_movement_ids=(ids); end

  def stock_movements(); end

  def stock_movements=(value); end

  def variant(); end

  def variant=(value); end
end

module Spree::StockItem::GeneratedAssociationMethods
end

module Spree::StockItem::GeneratedAttributeMethods
end

module Spree::StockItem::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StockItem::GeneratedRelationMethods
  def discarded(*args, &block); end

  def kept(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::StockItem::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StockItem
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.after_add_for_stock_movements(); end

  def self.after_add_for_stock_movements=(val); end

  def self.after_add_for_stock_movements?(); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_remove_for_stock_movements(); end

  def self.after_remove_for_stock_movements=(val); end

  def self.after_remove_for_stock_movements?(); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.before_add_for_stock_movements(); end

  def self.before_add_for_stock_movements=(val); end

  def self.before_add_for_stock_movements?(); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_remove_for_stock_movements(); end

  def self.before_remove_for_stock_movements=(val); end

  def self.before_remove_for_stock_movements?(); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.kept(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.undiscarded(*args); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::StockLocation
  include ::Spree::StockLocation::GeneratedAttributeMethods
  include ::Spree::StockLocation::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def after_add_for_cartons(); end

  def after_add_for_cartons=(val); end

  def after_add_for_cartons?(); end

  def after_add_for_shipments(); end

  def after_add_for_shipments=(val); end

  def after_add_for_shipments?(); end

  def after_add_for_shipping_method_stock_locations(); end

  def after_add_for_shipping_method_stock_locations=(val); end

  def after_add_for_shipping_method_stock_locations?(); end

  def after_add_for_shipping_methods(); end

  def after_add_for_shipping_methods=(val); end

  def after_add_for_shipping_methods?(); end

  def after_add_for_stock_items(); end

  def after_add_for_stock_items=(val); end

  def after_add_for_stock_items?(); end

  def after_add_for_stock_movements(); end

  def after_add_for_stock_movements=(val); end

  def after_add_for_stock_movements?(); end

  def after_add_for_user_stock_locations(); end

  def after_add_for_user_stock_locations=(val); end

  def after_add_for_user_stock_locations?(); end

  def after_add_for_users(); end

  def after_add_for_users=(val); end

  def after_add_for_users?(); end

  def after_remove_for_cartons(); end

  def after_remove_for_cartons=(val); end

  def after_remove_for_cartons?(); end

  def after_remove_for_shipments(); end

  def after_remove_for_shipments=(val); end

  def after_remove_for_shipments?(); end

  def after_remove_for_shipping_method_stock_locations(); end

  def after_remove_for_shipping_method_stock_locations=(val); end

  def after_remove_for_shipping_method_stock_locations?(); end

  def after_remove_for_shipping_methods(); end

  def after_remove_for_shipping_methods=(val); end

  def after_remove_for_shipping_methods?(); end

  def after_remove_for_stock_items(); end

  def after_remove_for_stock_items=(val); end

  def after_remove_for_stock_items?(); end

  def after_remove_for_stock_movements(); end

  def after_remove_for_stock_movements=(val); end

  def after_remove_for_stock_movements?(); end

  def after_remove_for_user_stock_locations(); end

  def after_remove_for_user_stock_locations=(val); end

  def after_remove_for_user_stock_locations?(); end

  def after_remove_for_users(); end

  def after_remove_for_users=(val); end

  def after_remove_for_users?(); end

  def autosave_associated_records_for_cartons(*args); end

  def autosave_associated_records_for_country(*args); end

  def autosave_associated_records_for_shipments(*args); end

  def autosave_associated_records_for_shipping_method_stock_locations(*args); end

  def autosave_associated_records_for_shipping_methods(*args); end

  def autosave_associated_records_for_state(*args); end

  def autosave_associated_records_for_stock_items(*args); end

  def autosave_associated_records_for_stock_movements(*args); end

  def autosave_associated_records_for_user_stock_locations(*args); end

  def autosave_associated_records_for_users(*args); end

  def before_add_for_cartons(); end

  def before_add_for_cartons=(val); end

  def before_add_for_cartons?(); end

  def before_add_for_shipments(); end

  def before_add_for_shipments=(val); end

  def before_add_for_shipments?(); end

  def before_add_for_shipping_method_stock_locations(); end

  def before_add_for_shipping_method_stock_locations=(val); end

  def before_add_for_shipping_method_stock_locations?(); end

  def before_add_for_shipping_methods(); end

  def before_add_for_shipping_methods=(val); end

  def before_add_for_shipping_methods?(); end

  def before_add_for_stock_items(); end

  def before_add_for_stock_items=(val); end

  def before_add_for_stock_items?(); end

  def before_add_for_stock_movements(); end

  def before_add_for_stock_movements=(val); end

  def before_add_for_stock_movements?(); end

  def before_add_for_user_stock_locations(); end

  def before_add_for_user_stock_locations=(val); end

  def before_add_for_user_stock_locations?(); end

  def before_add_for_users(); end

  def before_add_for_users=(val); end

  def before_add_for_users?(); end

  def before_remove_for_cartons(); end

  def before_remove_for_cartons=(val); end

  def before_remove_for_cartons?(); end

  def before_remove_for_shipments(); end

  def before_remove_for_shipments=(val); end

  def before_remove_for_shipments?(); end

  def before_remove_for_shipping_method_stock_locations(); end

  def before_remove_for_shipping_method_stock_locations=(val); end

  def before_remove_for_shipping_method_stock_locations?(); end

  def before_remove_for_shipping_methods(); end

  def before_remove_for_shipping_methods=(val); end

  def before_remove_for_shipping_methods?(); end

  def before_remove_for_stock_items(); end

  def before_remove_for_stock_items=(val); end

  def before_remove_for_stock_items?(); end

  def before_remove_for_stock_movements(); end

  def before_remove_for_stock_movements=(val); end

  def before_remove_for_stock_movements?(); end

  def before_remove_for_user_stock_locations(); end

  def before_remove_for_user_stock_locations=(val); end

  def before_remove_for_user_stock_locations?(); end

  def before_remove_for_users(); end

  def before_remove_for_users=(val); end

  def before_remove_for_users?(); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end

  def validate_associated_records_for_cartons(*args); end

  def validate_associated_records_for_shipments(*args); end

  def validate_associated_records_for_shipping_method_stock_locations(*args); end

  def validate_associated_records_for_shipping_methods(*args); end

  def validate_associated_records_for_stock_items(*args); end

  def validate_associated_records_for_stock_movements(*args); end

  def validate_associated_records_for_user_stock_locations(*args); end

  def validate_associated_records_for_users(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StockLocation::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockLocation::GeneratedRelationMethods
end

class Spree::StockLocation::ActiveRecord_AssociationRelation
end

class Spree::StockLocation::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockLocation::GeneratedRelationMethods
end

class Spree::StockLocation::ActiveRecord_Associations_CollectionProxy
end

class Spree::StockLocation::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockLocation::GeneratedRelationMethods
end

class Spree::StockLocation::ActiveRecord_Relation
end

module Spree::StockLocation::GeneratedAssociationMethods
  def build_country(*args, &block); end

  def build_state(*args, &block); end

  def carton_ids(); end

  def carton_ids=(ids); end

  def cartons(); end

  def cartons=(value); end

  def country(); end

  def country=(value); end

  def create_country(*args, &block); end

  def create_country!(*args, &block); end

  def create_state(*args, &block); end

  def create_state!(*args, &block); end

  def reload_country(); end

  def reload_state(); end

  def shipment_ids(); end

  def shipment_ids=(ids); end

  def shipments(); end

  def shipments=(value); end

  def shipping_method_ids(); end

  def shipping_method_ids=(ids); end

  def shipping_method_stock_location_ids(); end

  def shipping_method_stock_location_ids=(ids); end

  def shipping_method_stock_locations(); end

  def shipping_method_stock_locations=(value); end

  def shipping_methods(); end

  def shipping_methods=(value); end

  def state(); end

  def state=(value); end

  def stock_item_ids(); end

  def stock_item_ids=(ids); end

  def stock_items(); end

  def stock_items=(value); end

  def stock_movement_ids(); end

  def stock_movement_ids=(ids); end

  def stock_movements(); end

  def stock_movements=(value); end

  def user_ids(); end

  def user_ids=(ids); end

  def user_stock_location_ids(); end

  def user_stock_location_ids=(ids); end

  def user_stock_locations(); end

  def user_stock_locations=(value); end

  def users(); end

  def users=(value); end
end

module Spree::StockLocation::GeneratedAssociationMethods
end

module Spree::StockLocation::GeneratedAttributeMethods
end

module Spree::StockLocation::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StockLocation::GeneratedRelationMethods
  def active(*args, &block); end

  def in_list(*args, &block); end

  def order_default(*args, &block); end
end

module Spree::StockLocation::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StockLocation
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.active(*args); end

  def self.acts_as_list_top(); end

  def self.after_add_for_cartons(); end

  def self.after_add_for_cartons=(val); end

  def self.after_add_for_cartons?(); end

  def self.after_add_for_shipments(); end

  def self.after_add_for_shipments=(val); end

  def self.after_add_for_shipments?(); end

  def self.after_add_for_shipping_method_stock_locations(); end

  def self.after_add_for_shipping_method_stock_locations=(val); end

  def self.after_add_for_shipping_method_stock_locations?(); end

  def self.after_add_for_shipping_methods(); end

  def self.after_add_for_shipping_methods=(val); end

  def self.after_add_for_shipping_methods?(); end

  def self.after_add_for_stock_items(); end

  def self.after_add_for_stock_items=(val); end

  def self.after_add_for_stock_items?(); end

  def self.after_add_for_stock_movements(); end

  def self.after_add_for_stock_movements=(val); end

  def self.after_add_for_stock_movements?(); end

  def self.after_add_for_user_stock_locations(); end

  def self.after_add_for_user_stock_locations=(val); end

  def self.after_add_for_user_stock_locations?(); end

  def self.after_add_for_users(); end

  def self.after_add_for_users=(val); end

  def self.after_add_for_users?(); end

  def self.after_remove_for_cartons(); end

  def self.after_remove_for_cartons=(val); end

  def self.after_remove_for_cartons?(); end

  def self.after_remove_for_shipments(); end

  def self.after_remove_for_shipments=(val); end

  def self.after_remove_for_shipments?(); end

  def self.after_remove_for_shipping_method_stock_locations(); end

  def self.after_remove_for_shipping_method_stock_locations=(val); end

  def self.after_remove_for_shipping_method_stock_locations?(); end

  def self.after_remove_for_shipping_methods(); end

  def self.after_remove_for_shipping_methods=(val); end

  def self.after_remove_for_shipping_methods?(); end

  def self.after_remove_for_stock_items(); end

  def self.after_remove_for_stock_items=(val); end

  def self.after_remove_for_stock_items?(); end

  def self.after_remove_for_stock_movements(); end

  def self.after_remove_for_stock_movements=(val); end

  def self.after_remove_for_stock_movements?(); end

  def self.after_remove_for_user_stock_locations(); end

  def self.after_remove_for_user_stock_locations=(val); end

  def self.after_remove_for_user_stock_locations?(); end

  def self.after_remove_for_users(); end

  def self.after_remove_for_users=(val); end

  def self.after_remove_for_users?(); end

  def self.before_add_for_cartons(); end

  def self.before_add_for_cartons=(val); end

  def self.before_add_for_cartons?(); end

  def self.before_add_for_shipments(); end

  def self.before_add_for_shipments=(val); end

  def self.before_add_for_shipments?(); end

  def self.before_add_for_shipping_method_stock_locations(); end

  def self.before_add_for_shipping_method_stock_locations=(val); end

  def self.before_add_for_shipping_method_stock_locations?(); end

  def self.before_add_for_shipping_methods(); end

  def self.before_add_for_shipping_methods=(val); end

  def self.before_add_for_shipping_methods?(); end

  def self.before_add_for_stock_items(); end

  def self.before_add_for_stock_items=(val); end

  def self.before_add_for_stock_items?(); end

  def self.before_add_for_stock_movements(); end

  def self.before_add_for_stock_movements=(val); end

  def self.before_add_for_stock_movements?(); end

  def self.before_add_for_user_stock_locations(); end

  def self.before_add_for_user_stock_locations=(val); end

  def self.before_add_for_user_stock_locations?(); end

  def self.before_add_for_users(); end

  def self.before_add_for_users=(val); end

  def self.before_add_for_users?(); end

  def self.before_remove_for_cartons(); end

  def self.before_remove_for_cartons=(val); end

  def self.before_remove_for_cartons?(); end

  def self.before_remove_for_shipments(); end

  def self.before_remove_for_shipments=(val); end

  def self.before_remove_for_shipments?(); end

  def self.before_remove_for_shipping_method_stock_locations(); end

  def self.before_remove_for_shipping_method_stock_locations=(val); end

  def self.before_remove_for_shipping_method_stock_locations?(); end

  def self.before_remove_for_shipping_methods(); end

  def self.before_remove_for_shipping_methods=(val); end

  def self.before_remove_for_shipping_methods?(); end

  def self.before_remove_for_stock_items(); end

  def self.before_remove_for_stock_items=(val); end

  def self.before_remove_for_stock_items?(); end

  def self.before_remove_for_stock_movements(); end

  def self.before_remove_for_stock_movements=(val); end

  def self.before_remove_for_stock_movements?(); end

  def self.before_remove_for_user_stock_locations(); end

  def self.before_remove_for_user_stock_locations=(val); end

  def self.before_remove_for_user_stock_locations?(); end

  def self.before_remove_for_users(); end

  def self.before_remove_for_users=(val); end

  def self.before_remove_for_users?(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.order_default(*args); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::StockMovement
  include ::Spree::StockMovement::GeneratedAttributeMethods
  include ::Spree::StockMovement::GeneratedAssociationMethods
  def autosave_associated_records_for_originator(*args); end

  def autosave_associated_records_for_stock_item(*args); end

  def autosave_associated_records_for_variant(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StockMovement::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockMovement::GeneratedRelationMethods
end

class Spree::StockMovement::ActiveRecord_AssociationRelation
end

class Spree::StockMovement::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockMovement::GeneratedRelationMethods
end

class Spree::StockMovement::ActiveRecord_Associations_CollectionProxy
end

class Spree::StockMovement::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StockMovement::GeneratedRelationMethods
end

class Spree::StockMovement::ActiveRecord_Relation
end

module Spree::StockMovement::GeneratedAssociationMethods
  def build_stock_item(*args, &block); end

  def create_stock_item(*args, &block); end

  def create_stock_item!(*args, &block); end

  def originator(); end

  def originator=(value); end

  def reload_originator(); end

  def reload_stock_item(); end

  def reload_variant(); end

  def stock_item(); end

  def stock_item=(value); end

  def variant(); end

  def variant=(value); end
end

module Spree::StockMovement::GeneratedAssociationMethods
end

module Spree::StockMovement::GeneratedAttributeMethods
end

module Spree::StockMovement::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StockMovement::GeneratedRelationMethods
  def recent(*args, &block); end
end

module Spree::StockMovement::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StockMovement
  def self.recent(*args); end
end

class Spree::Store
  include ::Spree::Store::GeneratedAttributeMethods
  include ::Spree::Store::GeneratedAssociationMethods
  def after_add_for_orders(); end

  def after_add_for_orders=(val); end

  def after_add_for_orders?(); end

  def after_add_for_payment_methods(); end

  def after_add_for_payment_methods=(val); end

  def after_add_for_payment_methods?(); end

  def after_add_for_shipping_methods(); end

  def after_add_for_shipping_methods=(val); end

  def after_add_for_shipping_methods?(); end

  def after_add_for_store_payment_methods(); end

  def after_add_for_store_payment_methods=(val); end

  def after_add_for_store_payment_methods?(); end

  def after_add_for_store_shipping_methods(); end

  def after_add_for_store_shipping_methods=(val); end

  def after_add_for_store_shipping_methods?(); end

  def after_remove_for_orders(); end

  def after_remove_for_orders=(val); end

  def after_remove_for_orders?(); end

  def after_remove_for_payment_methods(); end

  def after_remove_for_payment_methods=(val); end

  def after_remove_for_payment_methods?(); end

  def after_remove_for_shipping_methods(); end

  def after_remove_for_shipping_methods=(val); end

  def after_remove_for_shipping_methods?(); end

  def after_remove_for_store_payment_methods(); end

  def after_remove_for_store_payment_methods=(val); end

  def after_remove_for_store_payment_methods?(); end

  def after_remove_for_store_shipping_methods(); end

  def after_remove_for_store_shipping_methods=(val); end

  def after_remove_for_store_shipping_methods?(); end

  def autosave_associated_records_for_orders(*args); end

  def autosave_associated_records_for_payment_methods(*args); end

  def autosave_associated_records_for_shipping_methods(*args); end

  def autosave_associated_records_for_store_payment_methods(*args); end

  def autosave_associated_records_for_store_shipping_methods(*args); end

  def before_add_for_orders(); end

  def before_add_for_orders=(val); end

  def before_add_for_orders?(); end

  def before_add_for_payment_methods(); end

  def before_add_for_payment_methods=(val); end

  def before_add_for_payment_methods?(); end

  def before_add_for_shipping_methods(); end

  def before_add_for_shipping_methods=(val); end

  def before_add_for_shipping_methods?(); end

  def before_add_for_store_payment_methods(); end

  def before_add_for_store_payment_methods=(val); end

  def before_add_for_store_payment_methods?(); end

  def before_add_for_store_shipping_methods(); end

  def before_add_for_store_shipping_methods=(val); end

  def before_add_for_store_shipping_methods?(); end

  def before_remove_for_orders(); end

  def before_remove_for_orders=(val); end

  def before_remove_for_orders?(); end

  def before_remove_for_payment_methods(); end

  def before_remove_for_payment_methods=(val); end

  def before_remove_for_payment_methods?(); end

  def before_remove_for_shipping_methods(); end

  def before_remove_for_shipping_methods=(val); end

  def before_remove_for_shipping_methods?(); end

  def before_remove_for_store_payment_methods(); end

  def before_remove_for_store_payment_methods=(val); end

  def before_remove_for_store_payment_methods?(); end

  def before_remove_for_store_shipping_methods(); end

  def before_remove_for_store_shipping_methods=(val); end

  def before_remove_for_store_shipping_methods?(); end

  def validate_associated_records_for_orders(*args); end

  def validate_associated_records_for_payment_methods(*args); end

  def validate_associated_records_for_shipping_methods(*args); end

  def validate_associated_records_for_store_payment_methods(*args); end

  def validate_associated_records_for_store_shipping_methods(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Store::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Store::GeneratedRelationMethods
end

class Spree::Store::ActiveRecord_AssociationRelation
end

class Spree::Store::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Store::GeneratedRelationMethods
end

class Spree::Store::ActiveRecord_Associations_CollectionProxy
end

class Spree::Store::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Store::GeneratedRelationMethods
end

class Spree::Store::ActiveRecord_Relation
end

module Spree::Store::GeneratedAssociationMethods
  def order_ids(); end

  def order_ids=(ids); end

  def orders(); end

  def orders=(value); end

  def payment_method_ids(); end

  def payment_method_ids=(ids); end

  def payment_methods(); end

  def payment_methods=(value); end

  def shipping_method_ids(); end

  def shipping_method_ids=(ids); end

  def shipping_methods(); end

  def shipping_methods=(value); end

  def store_payment_method_ids(); end

  def store_payment_method_ids=(ids); end

  def store_payment_methods(); end

  def store_payment_methods=(value); end

  def store_shipping_method_ids(); end

  def store_shipping_method_ids=(ids); end

  def store_shipping_methods(); end

  def store_shipping_methods=(value); end
end

module Spree::Store::GeneratedAssociationMethods
end

module Spree::Store::GeneratedAttributeMethods
end

module Spree::Store::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Store::GeneratedRelationMethods
  def by_url(*args, &block); end
end

module Spree::Store::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Store
  def self.after_add_for_orders(); end

  def self.after_add_for_orders=(val); end

  def self.after_add_for_orders?(); end

  def self.after_add_for_payment_methods(); end

  def self.after_add_for_payment_methods=(val); end

  def self.after_add_for_payment_methods?(); end

  def self.after_add_for_shipping_methods(); end

  def self.after_add_for_shipping_methods=(val); end

  def self.after_add_for_shipping_methods?(); end

  def self.after_add_for_store_payment_methods(); end

  def self.after_add_for_store_payment_methods=(val); end

  def self.after_add_for_store_payment_methods?(); end

  def self.after_add_for_store_shipping_methods(); end

  def self.after_add_for_store_shipping_methods=(val); end

  def self.after_add_for_store_shipping_methods?(); end

  def self.after_remove_for_orders(); end

  def self.after_remove_for_orders=(val); end

  def self.after_remove_for_orders?(); end

  def self.after_remove_for_payment_methods(); end

  def self.after_remove_for_payment_methods=(val); end

  def self.after_remove_for_payment_methods?(); end

  def self.after_remove_for_shipping_methods(); end

  def self.after_remove_for_shipping_methods=(val); end

  def self.after_remove_for_shipping_methods?(); end

  def self.after_remove_for_store_payment_methods(); end

  def self.after_remove_for_store_payment_methods=(val); end

  def self.after_remove_for_store_payment_methods?(); end

  def self.after_remove_for_store_shipping_methods(); end

  def self.after_remove_for_store_shipping_methods=(val); end

  def self.after_remove_for_store_shipping_methods?(); end

  def self.before_add_for_orders(); end

  def self.before_add_for_orders=(val); end

  def self.before_add_for_orders?(); end

  def self.before_add_for_payment_methods(); end

  def self.before_add_for_payment_methods=(val); end

  def self.before_add_for_payment_methods?(); end

  def self.before_add_for_shipping_methods(); end

  def self.before_add_for_shipping_methods=(val); end

  def self.before_add_for_shipping_methods?(); end

  def self.before_add_for_store_payment_methods(); end

  def self.before_add_for_store_payment_methods=(val); end

  def self.before_add_for_store_payment_methods?(); end

  def self.before_add_for_store_shipping_methods(); end

  def self.before_add_for_store_shipping_methods=(val); end

  def self.before_add_for_store_shipping_methods?(); end

  def self.before_remove_for_orders(); end

  def self.before_remove_for_orders=(val); end

  def self.before_remove_for_orders?(); end

  def self.before_remove_for_payment_methods(); end

  def self.before_remove_for_payment_methods=(val); end

  def self.before_remove_for_payment_methods?(); end

  def self.before_remove_for_shipping_methods(); end

  def self.before_remove_for_shipping_methods=(val); end

  def self.before_remove_for_shipping_methods?(); end

  def self.before_remove_for_store_payment_methods(); end

  def self.before_remove_for_store_payment_methods=(val); end

  def self.before_remove_for_store_payment_methods?(); end

  def self.before_remove_for_store_shipping_methods(); end

  def self.before_remove_for_store_shipping_methods=(val); end

  def self.before_remove_for_store_shipping_methods?(); end

  def self.by_url(*args, &block); end
end

class Spree::StoreController
  include ::Spree::Core::ControllerHelpers::Pricing
  include ::Spree::Core::ControllerHelpers::Order
end

class Spree::StoreCredit
  include ::Spree::StoreCredit::GeneratedAttributeMethods
  include ::Spree::StoreCredit::GeneratedAssociationMethods
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def after_add_for_store_credit_events(); end

  def after_add_for_store_credit_events=(val); end

  def after_add_for_store_credit_events?(); end

  def after_remove_for_store_credit_events(); end

  def after_remove_for_store_credit_events=(val); end

  def after_remove_for_store_credit_events?(); end

  def autosave_associated_records_for_category(*args); end

  def autosave_associated_records_for_created_by(*args); end

  def autosave_associated_records_for_credit_type(*args); end

  def autosave_associated_records_for_store_credit_events(*args); end

  def autosave_associated_records_for_user(*args); end

  def before_add_for_store_credit_events(); end

  def before_add_for_store_credit_events=(val); end

  def before_add_for_store_credit_events?(); end

  def before_remove_for_store_credit_events(); end

  def before_remove_for_store_credit_events=(val); end

  def before_remove_for_store_credit_events?(); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def display_amount(); end

  def display_amount_authorized(); end

  def display_amount_used(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end

  def validate_associated_records_for_store_credit_events(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StoreCredit::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCredit::GeneratedRelationMethods
end

class Spree::StoreCredit::ActiveRecord_AssociationRelation
end

class Spree::StoreCredit::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCredit::GeneratedRelationMethods
end

class Spree::StoreCredit::ActiveRecord_Associations_CollectionProxy
end

class Spree::StoreCredit::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCredit::GeneratedRelationMethods
end

class Spree::StoreCredit::ActiveRecord_Relation
end

module Spree::StoreCredit::GeneratedAssociationMethods
  def build_category(*args, &block); end

  def build_created_by(*args, &block); end

  def build_credit_type(*args, &block); end

  def build_user(*args, &block); end

  def category(); end

  def category=(value); end

  def create_category(*args, &block); end

  def create_category!(*args, &block); end

  def create_created_by(*args, &block); end

  def create_created_by!(*args, &block); end

  def create_credit_type(*args, &block); end

  def create_credit_type!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def created_by(); end

  def created_by=(value); end

  def credit_type(); end

  def credit_type=(value); end

  def reload_category(); end

  def reload_created_by(); end

  def reload_credit_type(); end

  def reload_user(); end

  def store_credit_event_ids(); end

  def store_credit_event_ids=(ids); end

  def store_credit_events(); end

  def store_credit_events=(value); end

  def user(); end

  def user=(value); end
end

module Spree::StoreCredit::GeneratedAssociationMethods
end

module Spree::StoreCredit::GeneratedAttributeMethods
end

module Spree::StoreCredit::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StoreCredit::GeneratedRelationMethods
  def discarded(*args, &block); end

  def kept(*args, &block); end

  def order_by_priority(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::StoreCredit::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StoreCredit
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.after_add_for_store_credit_events(); end

  def self.after_add_for_store_credit_events=(val); end

  def self.after_add_for_store_credit_events?(); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_remove_for_store_credit_events(); end

  def self.after_remove_for_store_credit_events=(val); end

  def self.after_remove_for_store_credit_events?(); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.before_add_for_store_credit_events(); end

  def self.before_add_for_store_credit_events=(val); end

  def self.before_add_for_store_credit_events?(); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_remove_for_store_credit_events(); end

  def self.before_remove_for_store_credit_events=(val); end

  def self.before_remove_for_store_credit_events?(); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.kept(*args); end

  def self.order_by_priority(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.undiscarded(*args); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::StoreCreditCategory
  include ::Spree::StoreCreditCategory::GeneratedAttributeMethods
  include ::Spree::StoreCreditCategory::GeneratedAssociationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StoreCreditCategory::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditCategory::GeneratedRelationMethods
end

class Spree::StoreCreditCategory::ActiveRecord_AssociationRelation
end

class Spree::StoreCreditCategory::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditCategory::GeneratedRelationMethods
end

class Spree::StoreCreditCategory::ActiveRecord_Associations_CollectionProxy
end

class Spree::StoreCreditCategory::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditCategory::GeneratedRelationMethods
end

class Spree::StoreCreditCategory::ActiveRecord_Relation
end

module Spree::StoreCreditCategory::GeneratedAssociationMethods
end

module Spree::StoreCreditCategory::GeneratedAssociationMethods
end

module Spree::StoreCreditCategory::GeneratedAttributeMethods
end

module Spree::StoreCreditCategory::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StoreCreditCategory::GeneratedRelationMethods
end

module Spree::StoreCreditCategory::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StoreCreditEvent
  include ::Spree::StoreCreditEvent::GeneratedAttributeMethods
  include ::Spree::StoreCreditEvent::GeneratedAssociationMethods
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def autosave_associated_records_for_originator(*args); end

  def autosave_associated_records_for_store_credit(*args); end

  def autosave_associated_records_for_store_credit_reason(*args); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StoreCreditEvent::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditEvent::GeneratedRelationMethods
end

class Spree::StoreCreditEvent::ActiveRecord_AssociationRelation
end

class Spree::StoreCreditEvent::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditEvent::GeneratedRelationMethods
end

class Spree::StoreCreditEvent::ActiveRecord_Associations_CollectionProxy
end

class Spree::StoreCreditEvent::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditEvent::GeneratedRelationMethods
end

class Spree::StoreCreditEvent::ActiveRecord_Relation
end

module Spree::StoreCreditEvent::GeneratedAssociationMethods
  def build_store_credit(*args, &block); end

  def build_store_credit_reason(*args, &block); end

  def create_store_credit(*args, &block); end

  def create_store_credit!(*args, &block); end

  def create_store_credit_reason(*args, &block); end

  def create_store_credit_reason!(*args, &block); end

  def originator(); end

  def originator=(value); end

  def reload_originator(); end

  def reload_store_credit(); end

  def reload_store_credit_reason(); end

  def store_credit(); end

  def store_credit=(value); end

  def store_credit_reason(); end

  def store_credit_reason=(value); end
end

module Spree::StoreCreditEvent::GeneratedAssociationMethods
end

module Spree::StoreCreditEvent::GeneratedAttributeMethods
end

module Spree::StoreCreditEvent::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StoreCreditEvent::GeneratedRelationMethods
  def chronological(*args, &block); end

  def discarded(*args, &block); end

  def exposable_actions(*args, &block); end

  def exposed_events(*args, &block); end

  def kept(*args, &block); end

  def not_invalidated(*args, &block); end

  def reverse_chronological(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::StoreCreditEvent::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StoreCreditEvent
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.chronological(*args); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.exposable_actions(*args); end

  def self.exposed_events(*args); end

  def self.kept(*args); end

  def self.not_invalidated(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.reverse_chronological(*args); end

  def self.undiscarded(*args); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::StoreCreditReason
  include ::Spree::StoreCreditReason::GeneratedAttributeMethods
  include ::Spree::StoreCreditReason::GeneratedAssociationMethods
  def after_add_for_store_credit_events(); end

  def after_add_for_store_credit_events=(val); end

  def after_add_for_store_credit_events?(); end

  def after_remove_for_store_credit_events(); end

  def after_remove_for_store_credit_events=(val); end

  def after_remove_for_store_credit_events?(); end

  def autosave_associated_records_for_store_credit_events(*args); end

  def before_add_for_store_credit_events(); end

  def before_add_for_store_credit_events=(val); end

  def before_add_for_store_credit_events?(); end

  def before_remove_for_store_credit_events(); end

  def before_remove_for_store_credit_events=(val); end

  def before_remove_for_store_credit_events?(); end

  def validate_associated_records_for_store_credit_events(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StoreCreditReason::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditReason::GeneratedRelationMethods
end

class Spree::StoreCreditReason::ActiveRecord_AssociationRelation
end

class Spree::StoreCreditReason::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditReason::GeneratedRelationMethods
end

class Spree::StoreCreditReason::ActiveRecord_Associations_CollectionProxy
end

class Spree::StoreCreditReason::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditReason::GeneratedRelationMethods
end

class Spree::StoreCreditReason::ActiveRecord_Relation
end

module Spree::StoreCreditReason::GeneratedAssociationMethods
  def store_credit_event_ids(); end

  def store_credit_event_ids=(ids); end

  def store_credit_events(); end

  def store_credit_events=(value); end
end

module Spree::StoreCreditReason::GeneratedAssociationMethods
end

module Spree::StoreCreditReason::GeneratedAttributeMethods
end

module Spree::StoreCreditReason::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StoreCreditReason::GeneratedRelationMethods
  def active(*args, &block); end
end

module Spree::StoreCreditReason::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StoreCreditReason
  def self.active(*args); end

  def self.after_add_for_store_credit_events(); end

  def self.after_add_for_store_credit_events=(val); end

  def self.after_add_for_store_credit_events?(); end

  def self.after_remove_for_store_credit_events(); end

  def self.after_remove_for_store_credit_events=(val); end

  def self.after_remove_for_store_credit_events?(); end

  def self.before_add_for_store_credit_events(); end

  def self.before_add_for_store_credit_events=(val); end

  def self.before_add_for_store_credit_events?(); end

  def self.before_remove_for_store_credit_events(); end

  def self.before_remove_for_store_credit_events=(val); end

  def self.before_remove_for_store_credit_events?(); end
end

class Spree::StoreCreditType
  include ::Spree::StoreCreditType::GeneratedAttributeMethods
  include ::Spree::StoreCreditType::GeneratedAssociationMethods
  def after_add_for_store_credits(); end

  def after_add_for_store_credits=(val); end

  def after_add_for_store_credits?(); end

  def after_remove_for_store_credits(); end

  def after_remove_for_store_credits=(val); end

  def after_remove_for_store_credits?(); end

  def autosave_associated_records_for_store_credits(*args); end

  def before_add_for_store_credits(); end

  def before_add_for_store_credits=(val); end

  def before_add_for_store_credits?(); end

  def before_remove_for_store_credits(); end

  def before_remove_for_store_credits=(val); end

  def before_remove_for_store_credits?(); end

  def validate_associated_records_for_store_credits(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StoreCreditType::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditType::GeneratedRelationMethods
end

class Spree::StoreCreditType::ActiveRecord_AssociationRelation
end

class Spree::StoreCreditType::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditType::GeneratedRelationMethods
end

class Spree::StoreCreditType::ActiveRecord_Associations_CollectionProxy
end

class Spree::StoreCreditType::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreCreditType::GeneratedRelationMethods
end

class Spree::StoreCreditType::ActiveRecord_Relation
end

module Spree::StoreCreditType::GeneratedAssociationMethods
  def store_credit_ids(); end

  def store_credit_ids=(ids); end

  def store_credits(); end

  def store_credits=(value); end
end

module Spree::StoreCreditType::GeneratedAssociationMethods
end

module Spree::StoreCreditType::GeneratedAttributeMethods
end

module Spree::StoreCreditType::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StoreCreditType::GeneratedRelationMethods
end

module Spree::StoreCreditType::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StoreCreditType
  def self.after_add_for_store_credits(); end

  def self.after_add_for_store_credits=(val); end

  def self.after_add_for_store_credits?(); end

  def self.after_remove_for_store_credits(); end

  def self.after_remove_for_store_credits=(val); end

  def self.after_remove_for_store_credits?(); end

  def self.before_add_for_store_credits(); end

  def self.before_add_for_store_credits=(val); end

  def self.before_add_for_store_credits?(); end

  def self.before_remove_for_store_credits(); end

  def self.before_remove_for_store_credits=(val); end

  def self.before_remove_for_store_credits?(); end
end

class Spree::StorePaymentMethod
  include ::Spree::StorePaymentMethod::GeneratedAttributeMethods
  include ::Spree::StorePaymentMethod::GeneratedAssociationMethods
  def autosave_associated_records_for_payment_method(*args); end

  def autosave_associated_records_for_store(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StorePaymentMethod::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StorePaymentMethod::GeneratedRelationMethods
end

class Spree::StorePaymentMethod::ActiveRecord_AssociationRelation
end

class Spree::StorePaymentMethod::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StorePaymentMethod::GeneratedRelationMethods
end

class Spree::StorePaymentMethod::ActiveRecord_Associations_CollectionProxy
end

class Spree::StorePaymentMethod::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StorePaymentMethod::GeneratedRelationMethods
end

class Spree::StorePaymentMethod::ActiveRecord_Relation
end

module Spree::StorePaymentMethod::GeneratedAssociationMethods
  def build_payment_method(*args, &block); end

  def build_store(*args, &block); end

  def create_payment_method(*args, &block); end

  def create_payment_method!(*args, &block); end

  def create_store(*args, &block); end

  def create_store!(*args, &block); end

  def payment_method(); end

  def payment_method=(value); end

  def reload_payment_method(); end

  def reload_store(); end

  def store(); end

  def store=(value); end
end

module Spree::StorePaymentMethod::GeneratedAssociationMethods
end

module Spree::StorePaymentMethod::GeneratedAttributeMethods
end

module Spree::StorePaymentMethod::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StorePaymentMethod::GeneratedRelationMethods
end

module Spree::StorePaymentMethod::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::StoreShippingMethod
  include ::Spree::StoreShippingMethod::GeneratedAttributeMethods
  include ::Spree::StoreShippingMethod::GeneratedAssociationMethods
  def autosave_associated_records_for_shipping_method(*args); end

  def autosave_associated_records_for_store(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::StoreShippingMethod::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreShippingMethod::GeneratedRelationMethods
end

class Spree::StoreShippingMethod::ActiveRecord_AssociationRelation
end

class Spree::StoreShippingMethod::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreShippingMethod::GeneratedRelationMethods
end

class Spree::StoreShippingMethod::ActiveRecord_Associations_CollectionProxy
end

class Spree::StoreShippingMethod::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::StoreShippingMethod::GeneratedRelationMethods
end

class Spree::StoreShippingMethod::ActiveRecord_Relation
end

module Spree::StoreShippingMethod::GeneratedAssociationMethods
  def build_shipping_method(*args, &block); end

  def build_store(*args, &block); end

  def create_shipping_method(*args, &block); end

  def create_shipping_method!(*args, &block); end

  def create_store(*args, &block); end

  def create_store!(*args, &block); end

  def reload_shipping_method(); end

  def reload_store(); end

  def shipping_method(); end

  def shipping_method=(value); end

  def store(); end

  def store=(value); end
end

module Spree::StoreShippingMethod::GeneratedAssociationMethods
end

module Spree::StoreShippingMethod::GeneratedAttributeMethods
end

module Spree::StoreShippingMethod::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::StoreShippingMethod::GeneratedRelationMethods
end

module Spree::StoreShippingMethod::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Tax::ItemTax
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Spree::Tax::ItemTax
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Spree::Tax::OrderTax
  def __callbacks(); end

  def __callbacks?(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def model_name(*args, &block); end

  def validation_context(); end
end

class Spree::Tax::OrderTax
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(val); end

  def self._validators?(); end
end

class Spree::TaxCalculator::Default
  include ::Spree::Tax::TaxHelpers
end

class Spree::TaxCalculator::ShippingRate
  include ::Spree::Tax::TaxHelpers
end

class Spree::TaxCategory
  include ::Spree::TaxCategory::GeneratedAttributeMethods
  include ::Spree::TaxCategory::GeneratedAssociationMethods
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def after_add_for_tax_rate_tax_categories(); end

  def after_add_for_tax_rate_tax_categories=(val); end

  def after_add_for_tax_rate_tax_categories?(); end

  def after_add_for_tax_rates(); end

  def after_add_for_tax_rates=(val); end

  def after_add_for_tax_rates?(); end

  def after_remove_for_tax_rate_tax_categories(); end

  def after_remove_for_tax_rate_tax_categories=(val); end

  def after_remove_for_tax_rate_tax_categories?(); end

  def after_remove_for_tax_rates(); end

  def after_remove_for_tax_rates=(val); end

  def after_remove_for_tax_rates?(); end

  def autosave_associated_records_for_tax_rate_tax_categories(*args); end

  def autosave_associated_records_for_tax_rates(*args); end

  def before_add_for_tax_rate_tax_categories(); end

  def before_add_for_tax_rate_tax_categories=(val); end

  def before_add_for_tax_rate_tax_categories?(); end

  def before_add_for_tax_rates(); end

  def before_add_for_tax_rates=(val); end

  def before_add_for_tax_rates?(); end

  def before_remove_for_tax_rate_tax_categories(); end

  def before_remove_for_tax_rate_tax_categories=(val); end

  def before_remove_for_tax_rate_tax_categories?(); end

  def before_remove_for_tax_rates(); end

  def before_remove_for_tax_rates=(val); end

  def before_remove_for_tax_rates?(); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end

  def validate_associated_records_for_tax_rate_tax_categories(*args); end

  def validate_associated_records_for_tax_rates(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::TaxCategory::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxCategory::GeneratedRelationMethods
end

class Spree::TaxCategory::ActiveRecord_AssociationRelation
end

class Spree::TaxCategory::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxCategory::GeneratedRelationMethods
end

class Spree::TaxCategory::ActiveRecord_Associations_CollectionProxy
end

class Spree::TaxCategory::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxCategory::GeneratedRelationMethods
end

class Spree::TaxCategory::ActiveRecord_Relation
end

module Spree::TaxCategory::GeneratedAssociationMethods
  def tax_rate_ids(); end

  def tax_rate_ids=(ids); end

  def tax_rate_tax_categories(); end

  def tax_rate_tax_categories=(value); end

  def tax_rate_tax_category_ids(); end

  def tax_rate_tax_category_ids=(ids); end

  def tax_rates(); end

  def tax_rates=(value); end
end

module Spree::TaxCategory::GeneratedAssociationMethods
end

module Spree::TaxCategory::GeneratedAttributeMethods
end

module Spree::TaxCategory::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::TaxCategory::GeneratedRelationMethods
  def discarded(*args, &block); end

  def kept(*args, &block); end

  def paranoia_scope(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::TaxCategory::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::TaxCategory
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.after_add_for_tax_rate_tax_categories(); end

  def self.after_add_for_tax_rate_tax_categories=(val); end

  def self.after_add_for_tax_rate_tax_categories?(); end

  def self.after_add_for_tax_rates(); end

  def self.after_add_for_tax_rates=(val); end

  def self.after_add_for_tax_rates?(); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_remove_for_tax_rate_tax_categories(); end

  def self.after_remove_for_tax_rate_tax_categories=(val); end

  def self.after_remove_for_tax_rate_tax_categories?(); end

  def self.after_remove_for_tax_rates(); end

  def self.after_remove_for_tax_rates=(val); end

  def self.after_remove_for_tax_rates?(); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.before_add_for_tax_rate_tax_categories(); end

  def self.before_add_for_tax_rate_tax_categories=(val); end

  def self.before_add_for_tax_rate_tax_categories?(); end

  def self.before_add_for_tax_rates(); end

  def self.before_add_for_tax_rates=(val); end

  def self.before_add_for_tax_rates?(); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_remove_for_tax_rate_tax_categories(); end

  def self.before_remove_for_tax_rate_tax_categories=(val); end

  def self.before_remove_for_tax_rate_tax_categories?(); end

  def self.before_remove_for_tax_rates(); end

  def self.before_remove_for_tax_rates=(val); end

  def self.before_remove_for_tax_rates?(); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.kept(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.undiscarded(*args); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::TaxRate
  include ::Spree::TaxRate::GeneratedAttributeMethods
  include ::Spree::TaxRate::GeneratedAssociationMethods
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  include ::Spree::CalculatedAdjustments
  include ::Spree::AdjustmentSource
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def after_add_for_adjustments(); end

  def after_add_for_adjustments=(val); end

  def after_add_for_adjustments?(); end

  def after_add_for_shipping_rate_taxes(); end

  def after_add_for_shipping_rate_taxes=(val); end

  def after_add_for_shipping_rate_taxes?(); end

  def after_add_for_tax_categories(); end

  def after_add_for_tax_categories=(val); end

  def after_add_for_tax_categories?(); end

  def after_add_for_tax_rate_tax_categories(); end

  def after_add_for_tax_rate_tax_categories=(val); end

  def after_add_for_tax_rate_tax_categories?(); end

  def after_remove_for_adjustments(); end

  def after_remove_for_adjustments=(val); end

  def after_remove_for_adjustments?(); end

  def after_remove_for_shipping_rate_taxes(); end

  def after_remove_for_shipping_rate_taxes=(val); end

  def after_remove_for_shipping_rate_taxes?(); end

  def after_remove_for_tax_categories(); end

  def after_remove_for_tax_categories=(val); end

  def after_remove_for_tax_categories?(); end

  def after_remove_for_tax_rate_tax_categories(); end

  def after_remove_for_tax_rate_tax_categories=(val); end

  def after_remove_for_tax_rate_tax_categories?(); end

  def autosave_associated_records_for_adjustments(*args); end

  def autosave_associated_records_for_calculator(); end

  def autosave_associated_records_for_shipping_rate_taxes(*args); end

  def autosave_associated_records_for_tax_categories(*args); end

  def autosave_associated_records_for_tax_rate_tax_categories(*args); end

  def autosave_associated_records_for_zone(*args); end

  def before_add_for_adjustments(); end

  def before_add_for_adjustments=(val); end

  def before_add_for_adjustments?(); end

  def before_add_for_shipping_rate_taxes(); end

  def before_add_for_shipping_rate_taxes=(val); end

  def before_add_for_shipping_rate_taxes?(); end

  def before_add_for_tax_categories(); end

  def before_add_for_tax_categories=(val); end

  def before_add_for_tax_categories?(); end

  def before_add_for_tax_rate_tax_categories(); end

  def before_add_for_tax_rate_tax_categories=(val); end

  def before_add_for_tax_rate_tax_categories?(); end

  def before_remove_for_adjustments(); end

  def before_remove_for_adjustments=(val); end

  def before_remove_for_adjustments?(); end

  def before_remove_for_shipping_rate_taxes(); end

  def before_remove_for_shipping_rate_taxes=(val); end

  def before_remove_for_shipping_rate_taxes?(); end

  def before_remove_for_tax_categories(); end

  def before_remove_for_tax_categories=(val); end

  def before_remove_for_tax_categories?(); end

  def before_remove_for_tax_rate_tax_categories(); end

  def before_remove_for_tax_rate_tax_categories=(val); end

  def before_remove_for_tax_rate_tax_categories?(); end

  def destroy_without_paranoia(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def really_delete(); end

  def really_destroyed?(); end

  def validate_associated_records_for_adjustments(*args); end

  def validate_associated_records_for_calculator(*args); end

  def validate_associated_records_for_shipping_rate_taxes(*args); end

  def validate_associated_records_for_tax_categories(*args); end

  def validate_associated_records_for_tax_rate_tax_categories(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::TaxRate::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxRate::GeneratedRelationMethods
end

class Spree::TaxRate::ActiveRecord_AssociationRelation
end

class Spree::TaxRate::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxRate::GeneratedRelationMethods
end

class Spree::TaxRate::ActiveRecord_Associations_CollectionProxy
end

class Spree::TaxRate::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxRate::GeneratedRelationMethods
end

class Spree::TaxRate::ActiveRecord_Relation
end

module Spree::TaxRate::GeneratedAssociationMethods
  def adjustment_ids(); end

  def adjustment_ids=(ids); end

  def adjustments(); end

  def adjustments=(value); end

  def build_calculator(*args, &block); end

  def build_zone(*args, &block); end

  def calculator(); end

  def calculator=(value); end

  def calculator_attributes=(attributes); end

  def create_calculator(*args, &block); end

  def create_calculator!(*args, &block); end

  def create_zone(*args, &block); end

  def create_zone!(*args, &block); end

  def reload_calculator(); end

  def reload_zone(); end

  def shipping_rate_tax_ids(); end

  def shipping_rate_tax_ids=(ids); end

  def shipping_rate_taxes(); end

  def shipping_rate_taxes=(value); end

  def tax_categories(); end

  def tax_categories=(value); end

  def tax_category_ids(); end

  def tax_category_ids=(ids); end

  def tax_rate_tax_categories(); end

  def tax_rate_tax_categories=(value); end

  def tax_rate_tax_category_ids(); end

  def tax_rate_tax_category_ids=(ids); end

  def zone(); end

  def zone=(value); end
end

module Spree::TaxRate::GeneratedAssociationMethods
end

module Spree::TaxRate::GeneratedAttributeMethods
end

module Spree::TaxRate::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::TaxRate::GeneratedRelationMethods
  def active(*args, &block); end

  def discarded(*args, &block); end

  def for_address(*args, &block); end

  def for_country(*args, &block); end

  def for_zone(*args, &block); end

  def included_in_price(*args, &block); end

  def kept(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::TaxRate::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::TaxRate
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  extend ::Spree::CalculatedAdjustments::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.active(*args); end

  def self.after_add_for_adjustments(); end

  def self.after_add_for_adjustments=(val); end

  def self.after_add_for_adjustments?(); end

  def self.after_add_for_shipping_rate_taxes(); end

  def self.after_add_for_shipping_rate_taxes=(val); end

  def self.after_add_for_shipping_rate_taxes?(); end

  def self.after_add_for_tax_categories(); end

  def self.after_add_for_tax_categories=(val); end

  def self.after_add_for_tax_categories?(); end

  def self.after_add_for_tax_rate_tax_categories(); end

  def self.after_add_for_tax_rate_tax_categories=(val); end

  def self.after_add_for_tax_rate_tax_categories?(); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_remove_for_adjustments(); end

  def self.after_remove_for_adjustments=(val); end

  def self.after_remove_for_adjustments?(); end

  def self.after_remove_for_shipping_rate_taxes(); end

  def self.after_remove_for_shipping_rate_taxes=(val); end

  def self.after_remove_for_shipping_rate_taxes?(); end

  def self.after_remove_for_tax_categories(); end

  def self.after_remove_for_tax_categories=(val); end

  def self.after_remove_for_tax_categories?(); end

  def self.after_remove_for_tax_rate_tax_categories(); end

  def self.after_remove_for_tax_rate_tax_categories=(val); end

  def self.after_remove_for_tax_rate_tax_categories?(); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.before_add_for_adjustments(); end

  def self.before_add_for_adjustments=(val); end

  def self.before_add_for_adjustments?(); end

  def self.before_add_for_shipping_rate_taxes(); end

  def self.before_add_for_shipping_rate_taxes=(val); end

  def self.before_add_for_shipping_rate_taxes?(); end

  def self.before_add_for_tax_categories(); end

  def self.before_add_for_tax_categories=(val); end

  def self.before_add_for_tax_categories?(); end

  def self.before_add_for_tax_rate_tax_categories(); end

  def self.before_add_for_tax_rate_tax_categories=(val); end

  def self.before_add_for_tax_rate_tax_categories?(); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_remove_for_adjustments(); end

  def self.before_remove_for_adjustments=(val); end

  def self.before_remove_for_adjustments?(); end

  def self.before_remove_for_shipping_rate_taxes(); end

  def self.before_remove_for_shipping_rate_taxes=(val); end

  def self.before_remove_for_shipping_rate_taxes?(); end

  def self.before_remove_for_tax_categories(); end

  def self.before_remove_for_tax_categories=(val); end

  def self.before_remove_for_tax_categories?(); end

  def self.before_remove_for_tax_rate_tax_categories(); end

  def self.before_remove_for_tax_rate_tax_categories=(val); end

  def self.before_remove_for_tax_rate_tax_categories?(); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.for_address(*args); end

  def self.for_country(*args); end

  def self.for_zone(*args); end

  def self.included_in_price(*args); end

  def self.kept(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.undiscarded(*args); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::TaxRateTaxCategory
  include ::Spree::TaxRateTaxCategory::GeneratedAttributeMethods
  include ::Spree::TaxRateTaxCategory::GeneratedAssociationMethods
  def autosave_associated_records_for_tax_category(*args); end

  def autosave_associated_records_for_tax_rate(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::TaxRateTaxCategory::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxRateTaxCategory::GeneratedRelationMethods
end

class Spree::TaxRateTaxCategory::ActiveRecord_AssociationRelation
end

class Spree::TaxRateTaxCategory::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxRateTaxCategory::GeneratedRelationMethods
end

class Spree::TaxRateTaxCategory::ActiveRecord_Associations_CollectionProxy
end

class Spree::TaxRateTaxCategory::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::TaxRateTaxCategory::GeneratedRelationMethods
end

class Spree::TaxRateTaxCategory::ActiveRecord_Relation
end

module Spree::TaxRateTaxCategory::GeneratedAssociationMethods
  def build_tax_category(*args, &block); end

  def build_tax_rate(*args, &block); end

  def create_tax_category(*args, &block); end

  def create_tax_category!(*args, &block); end

  def create_tax_rate(*args, &block); end

  def create_tax_rate!(*args, &block); end

  def reload_tax_category(); end

  def reload_tax_rate(); end

  def tax_category(); end

  def tax_category=(value); end

  def tax_rate(); end

  def tax_rate=(value); end
end

module Spree::TaxRateTaxCategory::GeneratedAssociationMethods
end

module Spree::TaxRateTaxCategory::GeneratedAttributeMethods
end

module Spree::TaxRateTaxCategory::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::TaxRateTaxCategory::GeneratedRelationMethods
end

module Spree::TaxRateTaxCategory::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Taxon
  include ::Spree::Taxon::GeneratedAttributeMethods
  include ::Spree::Taxon::GeneratedAssociationMethods
  include ::CollectiveIdea::Acts::NestedSet::Model
  include ::AwesomeNestedSetOvveride::Model
  include ::CollectiveIdea::Acts::NestedSet::Model::Movable
  include ::CollectiveIdea::Acts::NestedSet::Model::Prunable
  include ::CollectiveIdea::Acts::NestedSet::Model::Relatable
  include ::CollectiveIdea::Acts::NestedSet::Model::Transactable
  include ::CollectiveIdea::Acts::NestedSet::Columns
  include ::Spree::Taxon::PaperclipAttachment
  def _icon_post_process_callbacks(); end

  def _move_callbacks(); end

  def _post_process_callbacks(); end

  def _run_icon_post_process_callbacks(&block); end

  def _run_move_callbacks(&block); end

  def _run_post_process_callbacks(&block); end

  def active_products(); end

  def acts_as_nested_set_options(); end

  def acts_as_nested_set_options=(val); end

  def acts_as_nested_set_options?(); end

  def after_add_for_children(); end

  def after_add_for_children=(val); end

  def after_add_for_children?(); end

  def after_add_for_classifications(); end

  def after_add_for_classifications=(val); end

  def after_add_for_classifications?(); end

  def after_add_for_products(); end

  def after_add_for_products=(val); end

  def after_add_for_products?(); end

  def after_add_for_promotion_rule_taxons(); end

  def after_add_for_promotion_rule_taxons=(val); end

  def after_add_for_promotion_rule_taxons?(); end

  def after_add_for_promotion_rules(); end

  def after_add_for_promotion_rules=(val); end

  def after_add_for_promotion_rules?(); end

  def after_remove_for_children(); end

  def after_remove_for_children=(val); end

  def after_remove_for_children?(); end

  def after_remove_for_classifications(); end

  def after_remove_for_classifications=(val); end

  def after_remove_for_classifications?(); end

  def after_remove_for_products(); end

  def after_remove_for_products=(val); end

  def after_remove_for_products?(); end

  def after_remove_for_promotion_rule_taxons(); end

  def after_remove_for_promotion_rule_taxons=(val); end

  def after_remove_for_promotion_rule_taxons?(); end

  def after_remove_for_promotion_rules(); end

  def after_remove_for_promotion_rules=(val); end

  def after_remove_for_promotion_rules?(); end

  def all_products(); end

  def all_variants(); end

  def applicable_filters(); end

  def arel_table(*args, &block); end

  def autosave_associated_records_for_children(*args); end

  def autosave_associated_records_for_classifications(*args); end

  def autosave_associated_records_for_parent(*args); end

  def autosave_associated_records_for_products(*args); end

  def autosave_associated_records_for_promotion_rule_taxons(*args); end

  def autosave_associated_records_for_promotion_rules(*args); end

  def autosave_associated_records_for_taxonomy(*args); end

  def before_add_for_children(); end

  def before_add_for_children=(val); end

  def before_add_for_children?(); end

  def before_add_for_classifications(); end

  def before_add_for_classifications=(val); end

  def before_add_for_classifications?(); end

  def before_add_for_products(); end

  def before_add_for_products=(val); end

  def before_add_for_products?(); end

  def before_add_for_promotion_rule_taxons(); end

  def before_add_for_promotion_rule_taxons=(val); end

  def before_add_for_promotion_rule_taxons?(); end

  def before_add_for_promotion_rules(); end

  def before_add_for_promotion_rules=(val); end

  def before_add_for_promotion_rules?(); end

  def before_remove_for_children(); end

  def before_remove_for_children=(val); end

  def before_remove_for_children?(); end

  def before_remove_for_classifications(); end

  def before_remove_for_classifications=(val); end

  def before_remove_for_classifications?(); end

  def before_remove_for_products(); end

  def before_remove_for_products=(val); end

  def before_remove_for_products?(); end

  def before_remove_for_promotion_rule_taxons(); end

  def before_remove_for_promotion_rule_taxons=(val); end

  def before_remove_for_promotion_rule_taxons?(); end

  def before_remove_for_promotion_rules(); end

  def before_remove_for_promotion_rules=(val); end

  def before_remove_for_promotion_rules?(); end

  def child_index=(idx); end

  def depth=(x); end

  def icon(*args); end

  def icon=(file); end

  def icon?(); end

  def lft=(x); end

  def permalink_part(); end

  def permalink_part=(value); end

  def pretty_name(); end

  def quoted_table_name(*args, &block); end

  def rgt=(x); end

  def seo_title(); end

  def set_permalink(); end

  def skip_before_destroy(); end

  def skip_before_destroy=(skip_before_destroy); end

  def update_child_permalinks(); end

  def update_permalinks(); end

  def validate_associated_records_for_children(*args); end

  def validate_associated_records_for_classifications(*args); end

  def validate_associated_records_for_products(*args); end

  def validate_associated_records_for_promotion_rule_taxons(*args); end

  def validate_associated_records_for_promotion_rules(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Taxon::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Taxon::GeneratedRelationMethods
end

class Spree::Taxon::ActiveRecord_AssociationRelation
end

class Spree::Taxon::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Taxon::GeneratedRelationMethods
end

class Spree::Taxon::ActiveRecord_Associations_CollectionProxy
end

class Spree::Taxon::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Taxon::GeneratedRelationMethods
end

class Spree::Taxon::ActiveRecord_Relation
end

module Spree::Taxon::GeneratedAssociationMethods
  def build_parent(*args, &block); end

  def build_taxonomy(*args, &block); end

  def child_ids(); end

  def child_ids=(ids); end

  def children(); end

  def children=(value); end

  def classification_ids(); end

  def classification_ids=(ids); end

  def classifications(); end

  def classifications=(value); end

  def create_parent(*args, &block); end

  def create_parent!(*args, &block); end

  def create_taxonomy(*args, &block); end

  def create_taxonomy!(*args, &block); end

  def parent(); end

  def parent=(value); end

  def product_ids(); end

  def product_ids=(ids); end

  def products(); end

  def products=(value); end

  def promotion_rule_ids(); end

  def promotion_rule_ids=(ids); end

  def promotion_rule_taxon_ids(); end

  def promotion_rule_taxon_ids=(ids); end

  def promotion_rule_taxons(); end

  def promotion_rule_taxons=(value); end

  def promotion_rules(); end

  def promotion_rules=(value); end

  def reload_parent(); end

  def reload_taxonomy(); end

  def taxonomy(); end

  def taxonomy=(value); end
end

module Spree::Taxon::GeneratedAssociationMethods
end

module Spree::Taxon::GeneratedAttributeMethods
end

module Spree::Taxon::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Taxon::GeneratedRelationMethods
end

module Spree::Taxon::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Taxon
  extend ::CollectiveIdea::Acts::NestedSet::Model::ClassMethods
  extend ::CollectiveIdea::Acts::NestedSet::Model::Validatable
  extend ::CollectiveIdea::Acts::NestedSet::Model::Rebuildable
  extend ::CollectiveIdea::Acts::NestedSet::Columns
  extend ::Paperclip::HasAttachedFile::ClassMethods
  def self._icon_post_process_callbacks(); end

  def self._icon_post_process_callbacks=(value); end

  def self._move_callbacks(); end

  def self._move_callbacks=(value); end

  def self._post_process_callbacks(); end

  def self._post_process_callbacks=(value); end

  def self.acts_as_nested_set_options(); end

  def self.acts_as_nested_set_options=(val); end

  def self.acts_as_nested_set_options?(); end

  def self.after_add_for_children(); end

  def self.after_add_for_children=(val); end

  def self.after_add_for_children?(); end

  def self.after_add_for_classifications(); end

  def self.after_add_for_classifications=(val); end

  def self.after_add_for_classifications?(); end

  def self.after_add_for_products(); end

  def self.after_add_for_products=(val); end

  def self.after_add_for_products?(); end

  def self.after_add_for_promotion_rule_taxons(); end

  def self.after_add_for_promotion_rule_taxons=(val); end

  def self.after_add_for_promotion_rule_taxons?(); end

  def self.after_add_for_promotion_rules(); end

  def self.after_add_for_promotion_rules=(val); end

  def self.after_add_for_promotion_rules?(); end

  def self.after_move(*args, **options, &block); end

  def self.after_remove_for_children(); end

  def self.after_remove_for_children=(val); end

  def self.after_remove_for_children?(); end

  def self.after_remove_for_classifications(); end

  def self.after_remove_for_classifications=(val); end

  def self.after_remove_for_classifications?(); end

  def self.after_remove_for_products(); end

  def self.after_remove_for_products=(val); end

  def self.after_remove_for_products?(); end

  def self.after_remove_for_promotion_rule_taxons(); end

  def self.after_remove_for_promotion_rule_taxons=(val); end

  def self.after_remove_for_promotion_rule_taxons?(); end

  def self.after_remove_for_promotion_rules(); end

  def self.after_remove_for_promotion_rules=(val); end

  def self.after_remove_for_promotion_rules?(); end

  def self.around_move(*args, **options, &block); end

  def self.before_add_for_children(); end

  def self.before_add_for_children=(val); end

  def self.before_add_for_children?(); end

  def self.before_add_for_classifications(); end

  def self.before_add_for_classifications=(val); end

  def self.before_add_for_classifications?(); end

  def self.before_add_for_products(); end

  def self.before_add_for_products=(val); end

  def self.before_add_for_products?(); end

  def self.before_add_for_promotion_rule_taxons(); end

  def self.before_add_for_promotion_rule_taxons=(val); end

  def self.before_add_for_promotion_rule_taxons?(); end

  def self.before_add_for_promotion_rules(); end

  def self.before_add_for_promotion_rules=(val); end

  def self.before_add_for_promotion_rules?(); end

  def self.before_move(*args, **options, &block); end

  def self.before_remove_for_children(); end

  def self.before_remove_for_children=(val); end

  def self.before_remove_for_children?(); end

  def self.before_remove_for_classifications(); end

  def self.before_remove_for_classifications=(val); end

  def self.before_remove_for_classifications?(); end

  def self.before_remove_for_products(); end

  def self.before_remove_for_products=(val); end

  def self.before_remove_for_products?(); end

  def self.before_remove_for_promotion_rule_taxons(); end

  def self.before_remove_for_promotion_rule_taxons=(val); end

  def self.before_remove_for_promotion_rule_taxons?(); end

  def self.before_remove_for_promotion_rules(); end

  def self.before_remove_for_promotion_rules=(val); end

  def self.before_remove_for_promotion_rules?(); end
end

class Spree::Taxonomy
  include ::Spree::Taxonomy::GeneratedAttributeMethods
  include ::Spree::Taxonomy::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def after_add_for_taxons(); end

  def after_add_for_taxons=(val); end

  def after_add_for_taxons?(); end

  def after_remove_for_taxons(); end

  def after_remove_for_taxons=(val); end

  def after_remove_for_taxons?(); end

  def autosave_associated_records_for_root(); end

  def autosave_associated_records_for_taxons(*args); end

  def before_add_for_taxons(); end

  def before_add_for_taxons=(val); end

  def before_add_for_taxons?(); end

  def before_remove_for_taxons(); end

  def before_remove_for_taxons=(val); end

  def before_remove_for_taxons?(); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end

  def validate_associated_records_for_taxons(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Taxonomy::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Taxonomy::GeneratedRelationMethods
end

class Spree::Taxonomy::ActiveRecord_AssociationRelation
end

class Spree::Taxonomy::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Taxonomy::GeneratedRelationMethods
end

class Spree::Taxonomy::ActiveRecord_Associations_CollectionProxy
end

class Spree::Taxonomy::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Taxonomy::GeneratedRelationMethods
end

class Spree::Taxonomy::ActiveRecord_Relation
end

module Spree::Taxonomy::GeneratedAssociationMethods
  def build_root(*args, &block); end

  def create_root(*args, &block); end

  def create_root!(*args, &block); end

  def reload_root(); end

  def root(); end

  def root=(value); end

  def taxon_ids(); end

  def taxon_ids=(ids); end

  def taxons(); end

  def taxons=(value); end
end

module Spree::Taxonomy::GeneratedAssociationMethods
end

module Spree::Taxonomy::GeneratedAttributeMethods
end

module Spree::Taxonomy::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Taxonomy::GeneratedRelationMethods
  def in_list(*args, &block); end
end

module Spree::Taxonomy::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Taxonomy
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.after_add_for_taxons(); end

  def self.after_add_for_taxons=(val); end

  def self.after_add_for_taxons?(); end

  def self.after_remove_for_taxons(); end

  def self.after_remove_for_taxons=(val); end

  def self.after_remove_for_taxons?(); end

  def self.before_add_for_taxons(); end

  def self.before_add_for_taxons=(val); end

  def self.before_add_for_taxons?(); end

  def self.before_remove_for_taxons(); end

  def self.before_remove_for_taxons=(val); end

  def self.before_remove_for_taxons?(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::TranslationHelperWrapper
  def debug_missing_translation(); end

  def debug_missing_translation=(obj); end
end

class Spree::TranslationHelperWrapper
  def self.debug_missing_translation(); end

  def self.debug_missing_translation=(obj); end
end

class Spree::UnitCancel
  include ::Spree::UnitCancel::GeneratedAttributeMethods
  include ::Spree::UnitCancel::GeneratedAssociationMethods
  def autosave_associated_records_for_adjustment(); end

  def autosave_associated_records_for_inventory_unit(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::UnitCancel::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UnitCancel::GeneratedRelationMethods
end

class Spree::UnitCancel::ActiveRecord_AssociationRelation
end

class Spree::UnitCancel::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UnitCancel::GeneratedRelationMethods
end

class Spree::UnitCancel::ActiveRecord_Associations_CollectionProxy
end

class Spree::UnitCancel::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UnitCancel::GeneratedRelationMethods
end

class Spree::UnitCancel::ActiveRecord_Relation
end

module Spree::UnitCancel::GeneratedAssociationMethods
  def adjustment(); end

  def adjustment=(value); end

  def build_adjustment(*args, &block); end

  def build_inventory_unit(*args, &block); end

  def create_adjustment(*args, &block); end

  def create_adjustment!(*args, &block); end

  def create_inventory_unit(*args, &block); end

  def create_inventory_unit!(*args, &block); end

  def inventory_unit(); end

  def inventory_unit=(value); end

  def reload_adjustment(); end

  def reload_inventory_unit(); end
end

module Spree::UnitCancel::GeneratedAssociationMethods
end

module Spree::UnitCancel::GeneratedAttributeMethods
end

module Spree::UnitCancel::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::UnitCancel::GeneratedRelationMethods
end

module Spree::UnitCancel::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::UserAddress
  include ::Spree::UserAddress::GeneratedAttributeMethods
  include ::Spree::UserAddress::GeneratedAssociationMethods
  def autosave_associated_records_for_address(*args); end

  def autosave_associated_records_for_user(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::UserAddress::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UserAddress::GeneratedRelationMethods
end

class Spree::UserAddress::ActiveRecord_AssociationRelation
end

class Spree::UserAddress::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UserAddress::GeneratedRelationMethods
end

class Spree::UserAddress::ActiveRecord_Associations_CollectionProxy
end

class Spree::UserAddress::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UserAddress::GeneratedRelationMethods
end

class Spree::UserAddress::ActiveRecord_Relation
end

module Spree::UserAddress::GeneratedAssociationMethods
  def address(); end

  def address=(value); end

  def build_address(*args, &block); end

  def build_user(*args, &block); end

  def create_address(*args, &block); end

  def create_address!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_address(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Spree::UserAddress::GeneratedAssociationMethods
end

module Spree::UserAddress::GeneratedAttributeMethods
end

module Spree::UserAddress::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::UserAddress::GeneratedRelationMethods
  def active(*args, &block); end

  def all_historical(*args, &block); end

  def default(*args, &block); end

  def default_billing(*args, &block); end

  def default_shipping(*args, &block); end

  def with_address_values(*args, &block); end
end

module Spree::UserAddress::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::UserAddress
  def self.active(*args); end

  def self.all_historical(*args); end

  def self.default(*args); end

  def self.default_billing(*args); end

  def self.default_shipping(*args); end

  def self.with_address_values(*args); end
end

module Spree::UserMethods
  include ::Spree::UserApiAuthentication
  include ::Spree::UserReporting
end

module Spree::UserReporting
  def display_average_order_value(); end

  def display_lifetime_value(); end
end

class Spree::UserStockLocation
  include ::Spree::UserStockLocation::GeneratedAttributeMethods
  include ::Spree::UserStockLocation::GeneratedAssociationMethods
  def autosave_associated_records_for_stock_location(*args); end

  def autosave_associated_records_for_user(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::UserStockLocation::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UserStockLocation::GeneratedRelationMethods
end

class Spree::UserStockLocation::ActiveRecord_AssociationRelation
end

class Spree::UserStockLocation::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UserStockLocation::GeneratedRelationMethods
end

class Spree::UserStockLocation::ActiveRecord_Associations_CollectionProxy
end

class Spree::UserStockLocation::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::UserStockLocation::GeneratedRelationMethods
end

class Spree::UserStockLocation::ActiveRecord_Relation
end

module Spree::UserStockLocation::GeneratedAssociationMethods
  def build_stock_location(*args, &block); end

  def build_user(*args, &block); end

  def create_stock_location(*args, &block); end

  def create_stock_location!(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def reload_stock_location(); end

  def reload_user(); end

  def stock_location(); end

  def stock_location=(value); end

  def user(); end

  def user=(value); end
end

module Spree::UserStockLocation::GeneratedAssociationMethods
end

module Spree::UserStockLocation::GeneratedAttributeMethods
end

module Spree::UserStockLocation::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::UserStockLocation::GeneratedRelationMethods
end

module Spree::UserStockLocation::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Variant
  include ::Spree::Variant::GeneratedAttributeMethods
  include ::Spree::Variant::GeneratedAssociationMethods
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  include ::Spree::SoftDeletable
  include ::Paranoia
  include ::Spree::ParanoiaDeprecations::InstanceMethods
  include ::Discard::Model
  include ::Spree::DefaultPrice
  include ::Spree::Variant::Scopes
  def _discard_callbacks(); end

  def _real_destroy_callbacks(); end

  def _restore_callbacks(); end

  def _run_discard_callbacks(&block); end

  def _run_real_destroy_callbacks(&block); end

  def _run_restore_callbacks(&block); end

  def _run_undiscard_callbacks(&block); end

  def _undiscard_callbacks(); end

  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def after_add_for_currently_valid_prices(); end

  def after_add_for_currently_valid_prices=(val); end

  def after_add_for_currently_valid_prices?(); end

  def after_add_for_images(); end

  def after_add_for_images=(val); end

  def after_add_for_images?(); end

  def after_add_for_inventory_units(); end

  def after_add_for_inventory_units=(val); end

  def after_add_for_inventory_units?(); end

  def after_add_for_line_items(); end

  def after_add_for_line_items=(val); end

  def after_add_for_line_items?(); end

  def after_add_for_option_values(); end

  def after_add_for_option_values=(val); end

  def after_add_for_option_values?(); end

  def after_add_for_option_values_variants(); end

  def after_add_for_option_values_variants=(val); end

  def after_add_for_option_values_variants?(); end

  def after_add_for_orders(); end

  def after_add_for_orders=(val); end

  def after_add_for_orders?(); end

  def after_add_for_prices(); end

  def after_add_for_prices=(val); end

  def after_add_for_prices?(); end

  def after_add_for_stock_items(); end

  def after_add_for_stock_items=(val); end

  def after_add_for_stock_items?(); end

  def after_add_for_stock_locations(); end

  def after_add_for_stock_locations=(val); end

  def after_add_for_stock_locations?(); end

  def after_add_for_stock_movements(); end

  def after_add_for_stock_movements=(val); end

  def after_add_for_stock_movements?(); end

  def after_remove_for_currently_valid_prices(); end

  def after_remove_for_currently_valid_prices=(val); end

  def after_remove_for_currently_valid_prices?(); end

  def after_remove_for_images(); end

  def after_remove_for_images=(val); end

  def after_remove_for_images?(); end

  def after_remove_for_inventory_units(); end

  def after_remove_for_inventory_units=(val); end

  def after_remove_for_inventory_units?(); end

  def after_remove_for_line_items(); end

  def after_remove_for_line_items=(val); end

  def after_remove_for_line_items?(); end

  def after_remove_for_option_values(); end

  def after_remove_for_option_values=(val); end

  def after_remove_for_option_values?(); end

  def after_remove_for_option_values_variants(); end

  def after_remove_for_option_values_variants=(val); end

  def after_remove_for_option_values_variants?(); end

  def after_remove_for_orders(); end

  def after_remove_for_orders=(val); end

  def after_remove_for_orders?(); end

  def after_remove_for_prices(); end

  def after_remove_for_prices=(val); end

  def after_remove_for_prices?(); end

  def after_remove_for_stock_items(); end

  def after_remove_for_stock_items=(val); end

  def after_remove_for_stock_items?(); end

  def after_remove_for_stock_locations(); end

  def after_remove_for_stock_locations=(val); end

  def after_remove_for_stock_locations?(); end

  def after_remove_for_stock_movements(); end

  def after_remove_for_stock_movements=(val); end

  def after_remove_for_stock_movements?(); end

  def autosave_associated_records_for_currently_valid_prices(*args); end

  def autosave_associated_records_for_default_price(); end

  def autosave_associated_records_for_images(*args); end

  def autosave_associated_records_for_inventory_units(*args); end

  def autosave_associated_records_for_line_items(*args); end

  def autosave_associated_records_for_option_values(*args); end

  def autosave_associated_records_for_option_values_variants(*args); end

  def autosave_associated_records_for_orders(*args); end

  def autosave_associated_records_for_prices(*args); end

  def autosave_associated_records_for_product(*args); end

  def autosave_associated_records_for_stock_items(*args); end

  def autosave_associated_records_for_stock_locations(*args); end

  def autosave_associated_records_for_stock_movements(*args); end

  def autosave_associated_records_for_tax_category(*args); end

  def before_add_for_currently_valid_prices(); end

  def before_add_for_currently_valid_prices=(val); end

  def before_add_for_currently_valid_prices?(); end

  def before_add_for_images(); end

  def before_add_for_images=(val); end

  def before_add_for_images?(); end

  def before_add_for_inventory_units(); end

  def before_add_for_inventory_units=(val); end

  def before_add_for_inventory_units?(); end

  def before_add_for_line_items(); end

  def before_add_for_line_items=(val); end

  def before_add_for_line_items?(); end

  def before_add_for_option_values(); end

  def before_add_for_option_values=(val); end

  def before_add_for_option_values?(); end

  def before_add_for_option_values_variants(); end

  def before_add_for_option_values_variants=(val); end

  def before_add_for_option_values_variants?(); end

  def before_add_for_orders(); end

  def before_add_for_orders=(val); end

  def before_add_for_orders?(); end

  def before_add_for_prices(); end

  def before_add_for_prices=(val); end

  def before_add_for_prices?(); end

  def before_add_for_stock_items(); end

  def before_add_for_stock_items=(val); end

  def before_add_for_stock_items?(); end

  def before_add_for_stock_locations(); end

  def before_add_for_stock_locations=(val); end

  def before_add_for_stock_locations?(); end

  def before_add_for_stock_movements(); end

  def before_add_for_stock_movements=(val); end

  def before_add_for_stock_movements?(); end

  def before_remove_for_currently_valid_prices(); end

  def before_remove_for_currently_valid_prices=(val); end

  def before_remove_for_currently_valid_prices?(); end

  def before_remove_for_images(); end

  def before_remove_for_images=(val); end

  def before_remove_for_images?(); end

  def before_remove_for_inventory_units(); end

  def before_remove_for_inventory_units=(val); end

  def before_remove_for_inventory_units?(); end

  def before_remove_for_line_items(); end

  def before_remove_for_line_items=(val); end

  def before_remove_for_line_items?(); end

  def before_remove_for_option_values(); end

  def before_remove_for_option_values=(val); end

  def before_remove_for_option_values?(); end

  def before_remove_for_option_values_variants(); end

  def before_remove_for_option_values_variants=(val); end

  def before_remove_for_option_values_variants?(); end

  def before_remove_for_orders(); end

  def before_remove_for_orders=(val); end

  def before_remove_for_orders?(); end

  def before_remove_for_prices(); end

  def before_remove_for_prices=(val); end

  def before_remove_for_prices?(); end

  def before_remove_for_stock_items(); end

  def before_remove_for_stock_items=(val); end

  def before_remove_for_stock_items?(); end

  def before_remove_for_stock_locations(); end

  def before_remove_for_stock_locations=(val); end

  def before_remove_for_stock_locations?(); end

  def before_remove_for_stock_movements(); end

  def before_remove_for_stock_movements=(val); end

  def before_remove_for_stock_movements?(); end

  def connection(*args, &block); end

  def destroy_without_paranoia(); end

  def destroyed_via_scope?(); end

  def discard_column(); end

  def discard_column=(val); end

  def discard_column?(); end

  def paranoia_column=(val); end

  def paranoia_column?(); end

  def paranoia_sentinel_value=(val); end

  def paranoia_sentinel_value?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def really_delete(); end

  def really_destroyed?(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end

  def validate_associated_records_for_currently_valid_prices(*args); end

  def validate_associated_records_for_default_price(*args); end

  def validate_associated_records_for_images(*args); end

  def validate_associated_records_for_inventory_units(*args); end

  def validate_associated_records_for_line_items(*args); end

  def validate_associated_records_for_option_values(*args); end

  def validate_associated_records_for_option_values_variants(*args); end

  def validate_associated_records_for_orders(*args); end

  def validate_associated_records_for_prices(*args); end

  def validate_associated_records_for_stock_items(*args); end

  def validate_associated_records_for_stock_locations(*args); end

  def validate_associated_records_for_stock_movements(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Variant::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Variant::GeneratedRelationMethods
end

class Spree::Variant::ActiveRecord_AssociationRelation
end

class Spree::Variant::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Variant::GeneratedRelationMethods
end

class Spree::Variant::ActiveRecord_Associations_CollectionProxy
end

class Spree::Variant::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Variant::GeneratedRelationMethods
end

class Spree::Variant::ActiveRecord_Relation
end

module Spree::Variant::GeneratedAssociationMethods
  def build_default_price(*args, &block); end

  def build_product(*args, &block); end

  def build_tax_category(*args, &block); end

  def create_default_price(*args, &block); end

  def create_default_price!(*args, &block); end

  def create_product(*args, &block); end

  def create_product!(*args, &block); end

  def create_tax_category(*args, &block); end

  def create_tax_category!(*args, &block); end

  def currently_valid_price_ids(); end

  def currently_valid_price_ids=(ids); end

  def currently_valid_prices(); end

  def currently_valid_prices=(value); end

  def default_price(); end

  def default_price=(value); end

  def image_ids(); end

  def image_ids=(ids); end

  def images(); end

  def images=(value); end

  def inventory_unit_ids(); end

  def inventory_unit_ids=(ids); end

  def inventory_units(); end

  def inventory_units=(value); end

  def line_item_ids(); end

  def line_item_ids=(ids); end

  def line_items(); end

  def line_items=(value); end

  def option_value_ids(); end

  def option_value_ids=(ids); end

  def option_values(); end

  def option_values=(value); end

  def option_values_variant_ids(); end

  def option_values_variant_ids=(ids); end

  def option_values_variants(); end

  def option_values_variants=(value); end

  def order_ids(); end

  def order_ids=(ids); end

  def orders(); end

  def orders=(value); end

  def price_ids(); end

  def price_ids=(ids); end

  def prices(); end

  def prices=(value); end

  def product(); end

  def product=(value); end

  def reload_default_price(); end

  def reload_product(); end

  def reload_tax_category(); end

  def stock_item_ids(); end

  def stock_item_ids=(ids); end

  def stock_items(); end

  def stock_items=(value); end

  def stock_location_ids(); end

  def stock_location_ids=(ids); end

  def stock_locations(); end

  def stock_locations=(value); end

  def stock_movement_ids(); end

  def stock_movement_ids=(ids); end

  def stock_movements(); end

  def stock_movements=(value); end

  def tax_category(); end

  def tax_category=(value); end
end

module Spree::Variant::GeneratedAssociationMethods
end

module Spree::Variant::GeneratedAttributeMethods
end

module Spree::Variant::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Variant::GeneratedRelationMethods
  def descend_by_popularity(*args, &block); end

  def discarded(*args, &block); end

  def in_list(*args, &block); end

  def kept(*args, &block); end

  def undiscarded(*args, &block); end

  def with_discarded(*args, &block); end
end

module Spree::Variant::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Variant
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  extend ::Paranoia::Query
  extend ::Spree::ParanoiaDeprecations::ClassMethods
  extend ::Discard::Model::ClassMethods
  def self._discard_callbacks(); end

  def self._discard_callbacks=(value); end

  def self._real_destroy_callbacks(); end

  def self._real_destroy_callbacks=(value); end

  def self._restore_callbacks(); end

  def self._restore_callbacks=(value); end

  def self._undiscard_callbacks(); end

  def self._undiscard_callbacks=(value); end

  def self.acts_as_list_top(); end

  def self.after_add_for_currently_valid_prices(); end

  def self.after_add_for_currently_valid_prices=(val); end

  def self.after_add_for_currently_valid_prices?(); end

  def self.after_add_for_images(); end

  def self.after_add_for_images=(val); end

  def self.after_add_for_images?(); end

  def self.after_add_for_inventory_units(); end

  def self.after_add_for_inventory_units=(val); end

  def self.after_add_for_inventory_units?(); end

  def self.after_add_for_line_items(); end

  def self.after_add_for_line_items=(val); end

  def self.after_add_for_line_items?(); end

  def self.after_add_for_option_values(); end

  def self.after_add_for_option_values=(val); end

  def self.after_add_for_option_values?(); end

  def self.after_add_for_option_values_variants(); end

  def self.after_add_for_option_values_variants=(val); end

  def self.after_add_for_option_values_variants?(); end

  def self.after_add_for_orders(); end

  def self.after_add_for_orders=(val); end

  def self.after_add_for_orders?(); end

  def self.after_add_for_prices(); end

  def self.after_add_for_prices=(val); end

  def self.after_add_for_prices?(); end

  def self.after_add_for_stock_items(); end

  def self.after_add_for_stock_items=(val); end

  def self.after_add_for_stock_items?(); end

  def self.after_add_for_stock_locations(); end

  def self.after_add_for_stock_locations=(val); end

  def self.after_add_for_stock_locations?(); end

  def self.after_add_for_stock_movements(); end

  def self.after_add_for_stock_movements=(val); end

  def self.after_add_for_stock_movements?(); end

  def self.after_discard(*args, **options, &block); end

  def self.after_real_destroy(*args, **options, &block); end

  def self.after_remove_for_currently_valid_prices(); end

  def self.after_remove_for_currently_valid_prices=(val); end

  def self.after_remove_for_currently_valid_prices?(); end

  def self.after_remove_for_images(); end

  def self.after_remove_for_images=(val); end

  def self.after_remove_for_images?(); end

  def self.after_remove_for_inventory_units(); end

  def self.after_remove_for_inventory_units=(val); end

  def self.after_remove_for_inventory_units?(); end

  def self.after_remove_for_line_items(); end

  def self.after_remove_for_line_items=(val); end

  def self.after_remove_for_line_items?(); end

  def self.after_remove_for_option_values(); end

  def self.after_remove_for_option_values=(val); end

  def self.after_remove_for_option_values?(); end

  def self.after_remove_for_option_values_variants(); end

  def self.after_remove_for_option_values_variants=(val); end

  def self.after_remove_for_option_values_variants?(); end

  def self.after_remove_for_orders(); end

  def self.after_remove_for_orders=(val); end

  def self.after_remove_for_orders?(); end

  def self.after_remove_for_prices(); end

  def self.after_remove_for_prices=(val); end

  def self.after_remove_for_prices?(); end

  def self.after_remove_for_stock_items(); end

  def self.after_remove_for_stock_items=(val); end

  def self.after_remove_for_stock_items?(); end

  def self.after_remove_for_stock_locations(); end

  def self.after_remove_for_stock_locations=(val); end

  def self.after_remove_for_stock_locations?(); end

  def self.after_remove_for_stock_movements(); end

  def self.after_remove_for_stock_movements=(val); end

  def self.after_remove_for_stock_movements?(); end

  def self.after_restore(*args, **options, &block); end

  def self.after_undiscard(*args, **options, &block); end

  def self.around_discard(*args, **options, &block); end

  def self.around_real_destroy(*args, **options, &block); end

  def self.around_restore(*args, **options, &block); end

  def self.around_undiscard(*args, **options, &block); end

  def self.before_add_for_currently_valid_prices(); end

  def self.before_add_for_currently_valid_prices=(val); end

  def self.before_add_for_currently_valid_prices?(); end

  def self.before_add_for_images(); end

  def self.before_add_for_images=(val); end

  def self.before_add_for_images?(); end

  def self.before_add_for_inventory_units(); end

  def self.before_add_for_inventory_units=(val); end

  def self.before_add_for_inventory_units?(); end

  def self.before_add_for_line_items(); end

  def self.before_add_for_line_items=(val); end

  def self.before_add_for_line_items?(); end

  def self.before_add_for_option_values(); end

  def self.before_add_for_option_values=(val); end

  def self.before_add_for_option_values?(); end

  def self.before_add_for_option_values_variants(); end

  def self.before_add_for_option_values_variants=(val); end

  def self.before_add_for_option_values_variants?(); end

  def self.before_add_for_orders(); end

  def self.before_add_for_orders=(val); end

  def self.before_add_for_orders?(); end

  def self.before_add_for_prices(); end

  def self.before_add_for_prices=(val); end

  def self.before_add_for_prices?(); end

  def self.before_add_for_stock_items(); end

  def self.before_add_for_stock_items=(val); end

  def self.before_add_for_stock_items?(); end

  def self.before_add_for_stock_locations(); end

  def self.before_add_for_stock_locations=(val); end

  def self.before_add_for_stock_locations?(); end

  def self.before_add_for_stock_movements(); end

  def self.before_add_for_stock_movements=(val); end

  def self.before_add_for_stock_movements?(); end

  def self.before_discard(*args, **options, &block); end

  def self.before_real_destroy(*args, **options, &block); end

  def self.before_remove_for_currently_valid_prices(); end

  def self.before_remove_for_currently_valid_prices=(val); end

  def self.before_remove_for_currently_valid_prices?(); end

  def self.before_remove_for_images(); end

  def self.before_remove_for_images=(val); end

  def self.before_remove_for_images?(); end

  def self.before_remove_for_inventory_units(); end

  def self.before_remove_for_inventory_units=(val); end

  def self.before_remove_for_inventory_units?(); end

  def self.before_remove_for_line_items(); end

  def self.before_remove_for_line_items=(val); end

  def self.before_remove_for_line_items?(); end

  def self.before_remove_for_option_values(); end

  def self.before_remove_for_option_values=(val); end

  def self.before_remove_for_option_values?(); end

  def self.before_remove_for_option_values_variants(); end

  def self.before_remove_for_option_values_variants=(val); end

  def self.before_remove_for_option_values_variants?(); end

  def self.before_remove_for_orders(); end

  def self.before_remove_for_orders=(val); end

  def self.before_remove_for_orders?(); end

  def self.before_remove_for_prices(); end

  def self.before_remove_for_prices=(val); end

  def self.before_remove_for_prices?(); end

  def self.before_remove_for_stock_items(); end

  def self.before_remove_for_stock_items=(val); end

  def self.before_remove_for_stock_items?(); end

  def self.before_remove_for_stock_locations(); end

  def self.before_remove_for_stock_locations=(val); end

  def self.before_remove_for_stock_locations?(); end

  def self.before_remove_for_stock_movements(); end

  def self.before_remove_for_stock_movements=(val); end

  def self.before_remove_for_stock_movements?(); end

  def self.before_restore(*args, **options, &block); end

  def self.before_undiscard(*args, **options, &block); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.descend_by_popularity(*args); end

  def self.discard_column(); end

  def self.discard_column=(val); end

  def self.discard_column?(); end

  def self.discarded(*args); end

  def self.has_option(option_type, *option_values); end

  def self.has_options(option_type, *option_values); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.kept(*args); end

  def self.paranoia_column(); end

  def self.paranoia_column=(val); end

  def self.paranoia_column?(); end

  def self.paranoia_scope(); end

  def self.paranoia_sentinel_value(); end

  def self.paranoia_sentinel_value=(val); end

  def self.paranoia_sentinel_value?(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.undiscarded(*args); end

  def self.update_all_with_touch(updates); end

  def self.with_discarded(*args); end

  def self.without_deleted(); end
end

class Spree::VariantPropertyRule
  include ::Spree::VariantPropertyRule::GeneratedAttributeMethods
  include ::Spree::VariantPropertyRule::GeneratedAssociationMethods
  def after_add_for_conditions(); end

  def after_add_for_conditions=(val); end

  def after_add_for_conditions?(); end

  def after_add_for_option_values(); end

  def after_add_for_option_values=(val); end

  def after_add_for_option_values?(); end

  def after_add_for_properties(); end

  def after_add_for_properties=(val); end

  def after_add_for_properties?(); end

  def after_add_for_values(); end

  def after_add_for_values=(val); end

  def after_add_for_values?(); end

  def after_remove_for_conditions(); end

  def after_remove_for_conditions=(val); end

  def after_remove_for_conditions?(); end

  def after_remove_for_option_values(); end

  def after_remove_for_option_values=(val); end

  def after_remove_for_option_values?(); end

  def after_remove_for_properties(); end

  def after_remove_for_properties=(val); end

  def after_remove_for_properties?(); end

  def after_remove_for_values(); end

  def after_remove_for_values=(val); end

  def after_remove_for_values?(); end

  def autosave_associated_records_for_conditions(*args); end

  def autosave_associated_records_for_option_values(*args); end

  def autosave_associated_records_for_product(*args); end

  def autosave_associated_records_for_properties(*args); end

  def autosave_associated_records_for_values(*args); end

  def before_add_for_conditions(); end

  def before_add_for_conditions=(val); end

  def before_add_for_conditions?(); end

  def before_add_for_option_values(); end

  def before_add_for_option_values=(val); end

  def before_add_for_option_values?(); end

  def before_add_for_properties(); end

  def before_add_for_properties=(val); end

  def before_add_for_properties?(); end

  def before_add_for_values(); end

  def before_add_for_values=(val); end

  def before_add_for_values?(); end

  def before_remove_for_conditions(); end

  def before_remove_for_conditions=(val); end

  def before_remove_for_conditions?(); end

  def before_remove_for_option_values(); end

  def before_remove_for_option_values=(val); end

  def before_remove_for_option_values?(); end

  def before_remove_for_properties(); end

  def before_remove_for_properties=(val); end

  def before_remove_for_properties?(); end

  def before_remove_for_values(); end

  def before_remove_for_values=(val); end

  def before_remove_for_values?(); end

  def validate_associated_records_for_conditions(*args); end

  def validate_associated_records_for_option_values(*args); end

  def validate_associated_records_for_properties(*args); end

  def validate_associated_records_for_values(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::VariantPropertyRule::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRule::GeneratedRelationMethods
end

class Spree::VariantPropertyRule::ActiveRecord_AssociationRelation
end

class Spree::VariantPropertyRule::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRule::GeneratedRelationMethods
end

class Spree::VariantPropertyRule::ActiveRecord_Associations_CollectionProxy
end

class Spree::VariantPropertyRule::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRule::GeneratedRelationMethods
end

class Spree::VariantPropertyRule::ActiveRecord_Relation
end

module Spree::VariantPropertyRule::GeneratedAssociationMethods
  def build_product(*args, &block); end

  def condition_ids(); end

  def condition_ids=(ids); end

  def conditions(); end

  def conditions=(value); end

  def create_product(*args, &block); end

  def create_product!(*args, &block); end

  def option_value_ids(); end

  def option_value_ids=(ids); end

  def option_values(); end

  def option_values=(value); end

  def product(); end

  def product=(value); end

  def properties(); end

  def properties=(value); end

  def property_ids(); end

  def property_ids=(ids); end

  def reload_product(); end

  def value_ids(); end

  def value_ids=(ids); end

  def values(); end

  def values=(value); end

  def values_attributes=(attributes); end
end

module Spree::VariantPropertyRule::GeneratedAssociationMethods
end

module Spree::VariantPropertyRule::GeneratedAttributeMethods
end

module Spree::VariantPropertyRule::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::VariantPropertyRule::GeneratedRelationMethods
end

module Spree::VariantPropertyRule::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::VariantPropertyRule
  def self.after_add_for_conditions(); end

  def self.after_add_for_conditions=(val); end

  def self.after_add_for_conditions?(); end

  def self.after_add_for_option_values(); end

  def self.after_add_for_option_values=(val); end

  def self.after_add_for_option_values?(); end

  def self.after_add_for_properties(); end

  def self.after_add_for_properties=(val); end

  def self.after_add_for_properties?(); end

  def self.after_add_for_values(); end

  def self.after_add_for_values=(val); end

  def self.after_add_for_values?(); end

  def self.after_remove_for_conditions(); end

  def self.after_remove_for_conditions=(val); end

  def self.after_remove_for_conditions?(); end

  def self.after_remove_for_option_values(); end

  def self.after_remove_for_option_values=(val); end

  def self.after_remove_for_option_values?(); end

  def self.after_remove_for_properties(); end

  def self.after_remove_for_properties=(val); end

  def self.after_remove_for_properties?(); end

  def self.after_remove_for_values(); end

  def self.after_remove_for_values=(val); end

  def self.after_remove_for_values?(); end

  def self.before_add_for_conditions(); end

  def self.before_add_for_conditions=(val); end

  def self.before_add_for_conditions?(); end

  def self.before_add_for_option_values(); end

  def self.before_add_for_option_values=(val); end

  def self.before_add_for_option_values?(); end

  def self.before_add_for_properties(); end

  def self.before_add_for_properties=(val); end

  def self.before_add_for_properties?(); end

  def self.before_add_for_values(); end

  def self.before_add_for_values=(val); end

  def self.before_add_for_values?(); end

  def self.before_remove_for_conditions(); end

  def self.before_remove_for_conditions=(val); end

  def self.before_remove_for_conditions?(); end

  def self.before_remove_for_option_values(); end

  def self.before_remove_for_option_values=(val); end

  def self.before_remove_for_option_values?(); end

  def self.before_remove_for_properties(); end

  def self.before_remove_for_properties=(val); end

  def self.before_remove_for_properties?(); end

  def self.before_remove_for_values(); end

  def self.before_remove_for_values=(val); end

  def self.before_remove_for_values?(); end
end

class Spree::VariantPropertyRuleCondition
  include ::Spree::VariantPropertyRuleCondition::GeneratedAttributeMethods
  include ::Spree::VariantPropertyRuleCondition::GeneratedAssociationMethods
  def autosave_associated_records_for_option_value(*args); end

  def autosave_associated_records_for_variant_property_rule(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::VariantPropertyRuleCondition::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRuleCondition::GeneratedRelationMethods
end

class Spree::VariantPropertyRuleCondition::ActiveRecord_AssociationRelation
end

class Spree::VariantPropertyRuleCondition::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRuleCondition::GeneratedRelationMethods
end

class Spree::VariantPropertyRuleCondition::ActiveRecord_Associations_CollectionProxy
end

class Spree::VariantPropertyRuleCondition::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRuleCondition::GeneratedRelationMethods
end

class Spree::VariantPropertyRuleCondition::ActiveRecord_Relation
end

module Spree::VariantPropertyRuleCondition::GeneratedAssociationMethods
  def build_option_value(*args, &block); end

  def build_variant_property_rule(*args, &block); end

  def create_option_value(*args, &block); end

  def create_option_value!(*args, &block); end

  def create_variant_property_rule(*args, &block); end

  def create_variant_property_rule!(*args, &block); end

  def option_value(); end

  def option_value=(value); end

  def reload_option_value(); end

  def reload_variant_property_rule(); end

  def variant_property_rule(); end

  def variant_property_rule=(value); end
end

module Spree::VariantPropertyRuleCondition::GeneratedAssociationMethods
end

module Spree::VariantPropertyRuleCondition::GeneratedAttributeMethods
end

module Spree::VariantPropertyRuleCondition::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::VariantPropertyRuleCondition::GeneratedRelationMethods
end

module Spree::VariantPropertyRuleCondition::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::VariantPropertyRuleValue
  include ::Spree::VariantPropertyRuleValue::GeneratedAttributeMethods
  include ::Spree::VariantPropertyRuleValue::GeneratedAssociationMethods
  include ::Spree::OrderedPropertyValueList
  include ::ActiveRecord::Acts::List::InstanceMethods
  include ::ActiveRecord::Acts::List::NoUpdate
  def acts_as_list_class(); end

  def acts_as_list_top(); end

  def add_new_at(); end

  def autosave_associated_records_for_property(*args); end

  def autosave_associated_records_for_variant_property_rule(*args); end

  def connection(*args, &block); end

  def destroyed_via_scope?(); end

  def position=(position); end

  def position_changed(); end

  def position_column(); end

  def scope_changed?(); end

  def scope_name(); end

  def touch_record_sql(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::VariantPropertyRuleValue::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRuleValue::GeneratedRelationMethods
end

class Spree::VariantPropertyRuleValue::ActiveRecord_AssociationRelation
end

class Spree::VariantPropertyRuleValue::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRuleValue::GeneratedRelationMethods
end

class Spree::VariantPropertyRuleValue::ActiveRecord_Associations_CollectionProxy
end

class Spree::VariantPropertyRuleValue::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::VariantPropertyRuleValue::GeneratedRelationMethods
end

class Spree::VariantPropertyRuleValue::ActiveRecord_Relation
end

module Spree::VariantPropertyRuleValue::GeneratedAssociationMethods
  def build_property(*args, &block); end

  def build_variant_property_rule(*args, &block); end

  def create_property(*args, &block); end

  def create_property!(*args, &block); end

  def create_variant_property_rule(*args, &block); end

  def create_variant_property_rule!(*args, &block); end

  def property(); end

  def property=(value); end

  def reload_property(); end

  def reload_variant_property_rule(); end

  def variant_property_rule(); end

  def variant_property_rule=(value); end
end

module Spree::VariantPropertyRuleValue::GeneratedAssociationMethods
end

module Spree::VariantPropertyRuleValue::GeneratedAttributeMethods
end

module Spree::VariantPropertyRuleValue::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::VariantPropertyRuleValue::GeneratedRelationMethods
  def in_list(*args, &block); end
end

module Spree::VariantPropertyRuleValue::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::VariantPropertyRuleValue
  extend ::ActiveRecord::Acts::List::NoUpdate::ClassMethods
  def self.acts_as_list_top(); end

  def self.decrement_all(); end

  def self.decrement_sequentially(); end

  def self.in_list(*args); end

  def self.increment_all(); end

  def self.increment_sequentially(); end

  def self.quoted_position_column(); end

  def self.quoted_position_column_with_table_name(); end

  def self.touch_record_sql(); end

  def self.update_all_with_touch(updates); end
end

class Spree::WalletPaymentSource
  include ::Spree::WalletPaymentSource::GeneratedAttributeMethods
  include ::Spree::WalletPaymentSource::GeneratedAssociationMethods
  def autosave_associated_records_for_payment_source(*args); end

  def autosave_associated_records_for_user(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::WalletPaymentSource::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::WalletPaymentSource::GeneratedRelationMethods
end

class Spree::WalletPaymentSource::ActiveRecord_AssociationRelation
end

class Spree::WalletPaymentSource::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::WalletPaymentSource::GeneratedRelationMethods
end

class Spree::WalletPaymentSource::ActiveRecord_Associations_CollectionProxy
end

class Spree::WalletPaymentSource::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::WalletPaymentSource::GeneratedRelationMethods
end

class Spree::WalletPaymentSource::ActiveRecord_Relation
end

module Spree::WalletPaymentSource::GeneratedAssociationMethods
  def build_user(*args, &block); end

  def create_user(*args, &block); end

  def create_user!(*args, &block); end

  def payment_source(); end

  def payment_source=(value); end

  def reload_payment_source(); end

  def reload_user(); end

  def user(); end

  def user=(value); end
end

module Spree::WalletPaymentSource::GeneratedAssociationMethods
end

module Spree::WalletPaymentSource::GeneratedAttributeMethods
end

module Spree::WalletPaymentSource::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::WalletPaymentSource::GeneratedRelationMethods
end

module Spree::WalletPaymentSource::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Zone
  include ::Spree::Zone::GeneratedAttributeMethods
  include ::Spree::Zone::GeneratedAssociationMethods
  def after_add_for_countries(); end

  def after_add_for_countries=(val); end

  def after_add_for_countries?(); end

  def after_add_for_shipping_method_zones(); end

  def after_add_for_shipping_method_zones=(val); end

  def after_add_for_shipping_method_zones?(); end

  def after_add_for_shipping_methods(); end

  def after_add_for_shipping_methods=(val); end

  def after_add_for_shipping_methods?(); end

  def after_add_for_states(); end

  def after_add_for_states=(val); end

  def after_add_for_states?(); end

  def after_add_for_tax_rates(); end

  def after_add_for_tax_rates=(val); end

  def after_add_for_tax_rates?(); end

  def after_add_for_zone_members(); end

  def after_add_for_zone_members=(val); end

  def after_add_for_zone_members?(); end

  def after_remove_for_countries(); end

  def after_remove_for_countries=(val); end

  def after_remove_for_countries?(); end

  def after_remove_for_shipping_method_zones(); end

  def after_remove_for_shipping_method_zones=(val); end

  def after_remove_for_shipping_method_zones?(); end

  def after_remove_for_shipping_methods(); end

  def after_remove_for_shipping_methods=(val); end

  def after_remove_for_shipping_methods?(); end

  def after_remove_for_states(); end

  def after_remove_for_states=(val); end

  def after_remove_for_states?(); end

  def after_remove_for_tax_rates(); end

  def after_remove_for_tax_rates=(val); end

  def after_remove_for_tax_rates?(); end

  def after_remove_for_zone_members(); end

  def after_remove_for_zone_members=(val); end

  def after_remove_for_zone_members?(); end

  def autosave_associated_records_for_countries(*args); end

  def autosave_associated_records_for_shipping_method_zones(*args); end

  def autosave_associated_records_for_shipping_methods(*args); end

  def autosave_associated_records_for_states(*args); end

  def autosave_associated_records_for_tax_rates(*args); end

  def autosave_associated_records_for_zone_members(*args); end

  def before_add_for_countries(); end

  def before_add_for_countries=(val); end

  def before_add_for_countries?(); end

  def before_add_for_shipping_method_zones(); end

  def before_add_for_shipping_method_zones=(val); end

  def before_add_for_shipping_method_zones?(); end

  def before_add_for_shipping_methods(); end

  def before_add_for_shipping_methods=(val); end

  def before_add_for_shipping_methods?(); end

  def before_add_for_states(); end

  def before_add_for_states=(val); end

  def before_add_for_states?(); end

  def before_add_for_tax_rates(); end

  def before_add_for_tax_rates=(val); end

  def before_add_for_tax_rates?(); end

  def before_add_for_zone_members(); end

  def before_add_for_zone_members=(val); end

  def before_add_for_zone_members?(); end

  def before_remove_for_countries(); end

  def before_remove_for_countries=(val); end

  def before_remove_for_countries?(); end

  def before_remove_for_shipping_method_zones(); end

  def before_remove_for_shipping_method_zones=(val); end

  def before_remove_for_shipping_method_zones?(); end

  def before_remove_for_shipping_methods(); end

  def before_remove_for_shipping_methods=(val); end

  def before_remove_for_shipping_methods?(); end

  def before_remove_for_states(); end

  def before_remove_for_states=(val); end

  def before_remove_for_states?(); end

  def before_remove_for_tax_rates(); end

  def before_remove_for_tax_rates=(val); end

  def before_remove_for_tax_rates?(); end

  def before_remove_for_zone_members(); end

  def before_remove_for_zone_members=(val); end

  def before_remove_for_zone_members?(); end

  def country_list(); end

  def include?(address); end

  def kind(); end

  def kind=(value); end

  def members(); end

  def validate_associated_records_for_countries(*args); end

  def validate_associated_records_for_shipping_method_zones(*args); end

  def validate_associated_records_for_shipping_methods(*args); end

  def validate_associated_records_for_states(*args); end

  def validate_associated_records_for_tax_rates(*args); end

  def validate_associated_records_for_zone_members(*args); end

  def zoneables(); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::Zone::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Zone::GeneratedRelationMethods
end

class Spree::Zone::ActiveRecord_AssociationRelation
end

class Spree::Zone::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Zone::GeneratedRelationMethods
end

class Spree::Zone::ActiveRecord_Associations_CollectionProxy
end

class Spree::Zone::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::Zone::GeneratedRelationMethods
end

class Spree::Zone::ActiveRecord_Relation
end

module Spree::Zone::GeneratedAssociationMethods
  def countries(); end

  def countries=(value); end

  def country_ids(); end

  def country_ids=(ids); end

  def shipping_method_ids(); end

  def shipping_method_ids=(ids); end

  def shipping_method_zone_ids(); end

  def shipping_method_zone_ids=(ids); end

  def shipping_method_zones(); end

  def shipping_method_zones=(value); end

  def shipping_methods(); end

  def shipping_methods=(value); end

  def state_ids(); end

  def state_ids=(ids); end

  def states(); end

  def states=(value); end

  def tax_rate_ids(); end

  def tax_rate_ids=(ids); end

  def tax_rates(); end

  def tax_rates=(value); end

  def zone_member_ids(); end

  def zone_member_ids=(ids); end

  def zone_members(); end

  def zone_members=(value); end

  def zone_members_attributes=(attributes); end
end

module Spree::Zone::GeneratedAssociationMethods
end

module Spree::Zone::GeneratedAttributeMethods
end

module Spree::Zone::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::Zone::GeneratedRelationMethods
  def for_address(*args, &block); end

  def with_member_ids(*args, &block); end
end

module Spree::Zone::GeneratedRelationMethods
  extend ::Mutex_m
end

class Spree::Zone
  def self.after_add_for_countries(); end

  def self.after_add_for_countries=(val); end

  def self.after_add_for_countries?(); end

  def self.after_add_for_shipping_method_zones(); end

  def self.after_add_for_shipping_method_zones=(val); end

  def self.after_add_for_shipping_method_zones?(); end

  def self.after_add_for_shipping_methods(); end

  def self.after_add_for_shipping_methods=(val); end

  def self.after_add_for_shipping_methods?(); end

  def self.after_add_for_states(); end

  def self.after_add_for_states=(val); end

  def self.after_add_for_states?(); end

  def self.after_add_for_tax_rates(); end

  def self.after_add_for_tax_rates=(val); end

  def self.after_add_for_tax_rates?(); end

  def self.after_add_for_zone_members(); end

  def self.after_add_for_zone_members=(val); end

  def self.after_add_for_zone_members?(); end

  def self.after_remove_for_countries(); end

  def self.after_remove_for_countries=(val); end

  def self.after_remove_for_countries?(); end

  def self.after_remove_for_shipping_method_zones(); end

  def self.after_remove_for_shipping_method_zones=(val); end

  def self.after_remove_for_shipping_method_zones?(); end

  def self.after_remove_for_shipping_methods(); end

  def self.after_remove_for_shipping_methods=(val); end

  def self.after_remove_for_shipping_methods?(); end

  def self.after_remove_for_states(); end

  def self.after_remove_for_states=(val); end

  def self.after_remove_for_states?(); end

  def self.after_remove_for_tax_rates(); end

  def self.after_remove_for_tax_rates=(val); end

  def self.after_remove_for_tax_rates?(); end

  def self.after_remove_for_zone_members(); end

  def self.after_remove_for_zone_members=(val); end

  def self.after_remove_for_zone_members?(); end

  def self.before_add_for_countries(); end

  def self.before_add_for_countries=(val); end

  def self.before_add_for_countries?(); end

  def self.before_add_for_shipping_method_zones(); end

  def self.before_add_for_shipping_method_zones=(val); end

  def self.before_add_for_shipping_method_zones?(); end

  def self.before_add_for_shipping_methods(); end

  def self.before_add_for_shipping_methods=(val); end

  def self.before_add_for_shipping_methods?(); end

  def self.before_add_for_states(); end

  def self.before_add_for_states=(val); end

  def self.before_add_for_states?(); end

  def self.before_add_for_tax_rates(); end

  def self.before_add_for_tax_rates=(val); end

  def self.before_add_for_tax_rates?(); end

  def self.before_add_for_zone_members(); end

  def self.before_add_for_zone_members=(val); end

  def self.before_add_for_zone_members?(); end

  def self.before_remove_for_countries(); end

  def self.before_remove_for_countries=(val); end

  def self.before_remove_for_countries?(); end

  def self.before_remove_for_shipping_method_zones(); end

  def self.before_remove_for_shipping_method_zones=(val); end

  def self.before_remove_for_shipping_method_zones?(); end

  def self.before_remove_for_shipping_methods(); end

  def self.before_remove_for_shipping_methods=(val); end

  def self.before_remove_for_shipping_methods?(); end

  def self.before_remove_for_states(); end

  def self.before_remove_for_states=(val); end

  def self.before_remove_for_states?(); end

  def self.before_remove_for_tax_rates(); end

  def self.before_remove_for_tax_rates=(val); end

  def self.before_remove_for_tax_rates?(); end

  def self.before_remove_for_zone_members(); end

  def self.before_remove_for_zone_members=(val); end

  def self.before_remove_for_zone_members?(); end

  def self.for_address(*args); end

  def self.with_member_ids(*args); end

  def self.with_shared_members(zone); end
end

class Spree::ZoneMember
  include ::Spree::ZoneMember::GeneratedAttributeMethods
  include ::Spree::ZoneMember::GeneratedAssociationMethods
  def autosave_associated_records_for_zone(*args); end

  def autosave_associated_records_for_zoneable(*args); end
  RelationType = ::T.let(nil, ::T.untyped)
end

class Spree::ZoneMember::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ZoneMember::GeneratedRelationMethods
end

class Spree::ZoneMember::ActiveRecord_AssociationRelation
end

class Spree::ZoneMember::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ZoneMember::GeneratedRelationMethods
end

class Spree::ZoneMember::ActiveRecord_Associations_CollectionProxy
end

class Spree::ZoneMember::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Spree::ZoneMember::GeneratedRelationMethods
end

class Spree::ZoneMember::ActiveRecord_Relation
end

module Spree::ZoneMember::GeneratedAssociationMethods
  def build_zone(*args, &block); end

  def create_zone(*args, &block); end

  def create_zone!(*args, &block); end

  def reload_zone(); end

  def reload_zoneable(); end

  def zone(); end

  def zone=(value); end

  def zoneable(); end

  def zoneable=(value); end
end

module Spree::ZoneMember::GeneratedAssociationMethods
end

module Spree::ZoneMember::GeneratedAttributeMethods
end

module Spree::ZoneMember::GeneratedAttributeMethods
  extend ::Mutex_m
end

module Spree::ZoneMember::GeneratedRelationMethods
end

module Spree::ZoneMember::GeneratedRelationMethods
  extend ::Mutex_m
end

module Spree
  def self.railtie_helpers_paths(); end

  def self.railtie_namespace(); end

  def self.railtie_routes_url_helpers(include_path_helpers=T.unsafe(nil)); end

  def self.table_name_prefix(); end

  def self.use_relative_model_naming?(); end
end

module Sprockets
  VERSION = ::T.let(nil, ::T.untyped)
end

Sprockets::Autoload::CoffeeScript = CoffeeScript

class Sprockets::Base
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Loader
  include ::Sprockets::DigestUtils
  include ::Sprockets::Transformers
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::Engines
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
end

module Sprockets::Bower
  POSSIBLE_BOWER_JSONS = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache
  PEEK_SIZE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::FileStore
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::MemoryStore
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::NullStore
  def get(key); end

  def set(key, value); end
end

class Sprockets::Cache::NullStore
end

class Sprockets::CachedEnvironment
  include ::Teaspoon::SprocketsInstrumentation
end

class Sprockets::ClosureCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::Configuration
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Processing
  include ::Sprockets::Transformers
  include ::Sprockets::Engines
  include ::Sprockets::Mime
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
  include ::Sprockets::DigestUtils
end

module Sprockets::Dependencies
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
end

module Sprockets::DigestUtils
  DIGEST_SIZES = ::T.let(nil, ::T.untyped)
  HASH_ALGORITHMS = ::T.let(nil, ::T.untyped)
end

class Sprockets::DirectiveProcessor
  DIRECTIVE_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::ERBTemplate
  def call(*args); end
end

class Sprockets::ERBTemplate
end

module Sprockets::EcoProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::EjsProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::EncodingUtils
  BOM = ::T.let(nil, ::T.untyped)
  CHARSET_DETECT = ::T.let(nil, ::T.untyped)
  CHARSET_SIZE = ::T.let(nil, ::T.untyped)
  CHARSET_START = ::T.let(nil, ::T.untyped)
end

class Sprockets::Environment
  include ::Teaspoon::SprocketsInstrumentation
end

Sprockets::Index = Sprockets::CachedEnvironment

module Sprockets::Loader
  include ::Sprockets::Transformers
  include ::Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::URIUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
end

module Sprockets::ManifestUtils
  LEGACY_MANIFEST_RE = ::T.let(nil, ::T.untyped)
  MANIFEST_RE = ::T.let(nil, ::T.untyped)
end

module Sprockets::Mime
  include ::Sprockets::Utils
end

module Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
end

module Sprockets::PathUtils
  SEPARATOR_PATTERN = ::T.let(nil, ::T.untyped)
end

module Sprockets::Paths
  include ::Sprockets::Utils
end

module Sprockets::Processing
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
end

module Sprockets::ProcessorUtils
  VALID_METADATA_COMPOUND_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_COMPOUND_TYPES_HASH = ::T.let(nil, ::T.untyped)
  VALID_METADATA_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES_HASH = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails::Helper
  VIEW_ACCESSORS = ::T.let(nil, ::T.untyped)
end

class Sprockets::Railtie
  LOOSE_APP_ASSETS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::URIUtils
end

class Sprockets::SassCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

class Sprockets::SassTemplate
end

class Sprockets::SassTemplate
  def self.call(*args); end
end

class Sprockets::ScssTemplate
end

class Sprockets::ScssTemplate
  def self.call(*args); end
end

module Sprockets::Transformers
  include ::Sprockets::Utils
  include ::Sprockets::ProcessorUtils
end

class Sprockets::UglifierCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::Utils
  UNBOUND_METHODS_BIND_TO_ANY_OBJECT = ::T.let(nil, ::T.untyped)
end

class Sprockets::Utils::Gzip
  COMPRESSABLE_MIME_TYPES = ::T.let(nil, ::T.untyped)
end

class Sprockets::YUICompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Processing
  extend ::Sprockets::Transformers
  extend ::Sprockets::Engines
  extend ::Sprockets::Mime
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::DigestUtils
end

module StateMachines
  VERSION = ::T.let(nil, ::T.untyped)
end

module StateMachines::Integrations::ActiveModel
  VERSION = ::T.let(nil, ::T.untyped)
end

module StateMachines::Integrations::ActiveRecord
  VERSION = ::T.let(nil, ::T.untyped)
end

class String
  include ::JSON::Ext::Generator::GeneratorMethods::String
  def ext(newext=T.unsafe(nil)); end

  def parse_csv(**options); end

  def pathmap(spec=T.unsafe(nil), &block); end

  def pathmap_explode(); end

  def pathmap_partial(n); end

  def pathmap_replace(patterns, &block); end

  def shellescape(); end

  def shellsplit(); end
  BLANK_RE = ::T.let(nil, ::T.untyped)
  ENCODED_BLANKS = ::T.let(nil, ::T.untyped)
end

class StringScanner
  def bol?(); end

  def initialize(*_); end
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Struct
  def filter(*_); end
end

Struct::Group = Etc::Group

Struct::Passwd = Etc::Passwd

Struct::Tms = Process::Tms

class TA
  Elem = type_member
end

class TA
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Teaspoon
  VERSION = ::T.let(nil, ::T.untyped)
end

class Teaspoon::Configuration
  ENV_OVERRIDES = ::T.let(nil, ::T.untyped)
end

module Teaspoon::Mocha
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tempfile
  def _close(); end

  def inspect(); end
end

class Tempfile::Remover
  def call(*args); end

  def initialize(tmpfile); end
end

class Tempfile::Remover
end

class Terminal::Table
  VERSION = ::T.let(nil, ::T.untyped)
end

module Terrapin
  OS = ::T.let(nil, ::T.untyped)
end

module Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
end

module ThreadSafe
  NULL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

ThreadSafe::Array = Array

class ThreadSafe::AtomicReferenceCacheBackend
  def [](key); end

  def []=(key, value); end

  def clear(); end

  def compute(key); end

  def compute_if_absent(key); end

  def compute_if_present(key); end

  def delete(key); end

  def delete_pair(key, value); end

  def each_pair(); end

  def empty?(); end

  def get_and_set(key, value); end

  def get_or_default(key, else_value=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def key?(key); end

  def merge_pair(key, value); end

  def replace_if_exists(key, new_value); end

  def replace_pair(key, old_value, new_value); end

  def size(); end
  DEFAULT_CAPACITY = ::T.let(nil, ::T.untyped)
  HASH_BITS = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MAX_CAPACITY = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  NOW_RESIZING = ::T.let(nil, ::T.untyped)
  TRANSFER_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::AtomicReferenceCacheBackend::Node
  include ::ThreadSafe::Util::CheapLockable
  def initialize(hash, key, value, next_node=T.unsafe(nil)); end

  def key(); end

  def key?(key); end

  def locked?(); end

  def matches?(key, hash); end

  def pure_hash(); end

  def try_await_lock(table, i); end

  def try_lock_via_hash(node_hash=T.unsafe(nil)); end

  def unlock_via_hash(locked_hash, node_hash); end
  HASH_BITS = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  SPIN_LOCK_ATTEMPTS = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::AtomicReferenceCacheBackend::Node
  extend ::ThreadSafe::Util::Volatile
  def self.locked_hash?(hash); end
end

class ThreadSafe::AtomicReferenceCacheBackend::Table
  def cas_new_node(i, hash, key, value); end

  def delete_node_at(i, node, predecessor_node); end

  def try_lock_via_hash(i, node, node_hash); end

  def try_to_cas_in_computed(i, hash, key); end
end

class ThreadSafe::AtomicReferenceCacheBackend::Table
end

class ThreadSafe::AtomicReferenceCacheBackend
  extend ::ThreadSafe::Util::Volatile
end

ThreadSafe::ConcurrentCacheBackend = ThreadSafe::MriCacheBackend

ThreadSafe::Hash = Hash

class ThreadSafe::MriCacheBackend
  WRITE_LOCK = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::SynchronizedCacheBackend
  include ::Mutex_m
  def lock(); end

  def locked?(); end

  def synchronize(&block); end

  def try_lock(); end

  def unlock(); end
end

class ThreadSafe::SynchronizedCacheBackend
end

module ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::Util::Adder
  def add(x); end

  def decrement(); end

  def increment(); end

  def reset(); end

  def sum(); end
end

class ThreadSafe::Util::Adder
end

class ThreadSafe::Util::AtomicReference
  def compare_and_set(old_value, new_value); end

  def get(); end

  def initialize(value=T.unsafe(nil)); end

  def set(new_value); end

  def value(); end

  def value=(new_value); end
end

class ThreadSafe::Util::AtomicReference
end

module ThreadSafe::Util::CheapLockable
  def cas_mutex(old_value, new_value); end

  def compare_and_set_mutex(old_value, new_value); end

  def lazy_set_mutex(value); end

  def mutex(); end

  def mutex=(value); end
end

module ThreadSafe::Util::CheapLockable
  extend ::ThreadSafe::Util::Volatile
end

class ThreadSafe::Util::PowerOfTwoTuple
  def hash_to_index(hash); end

  def next_in_size_table(); end

  def volatile_get_by_hash(hash); end

  def volatile_set_by_hash(hash, value); end
end

class ThreadSafe::Util::PowerOfTwoTuple
end

class ThreadSafe::Util::Striped64
  def busy?(); end

  def initialize(); end

  def retry_update(x, hash_code, was_uncontended); end
  THREAD_LOCAL_KEY = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::Util::Striped64::Cell
  def cas(old_value, new_value); end

  def cas_computed(); end

  def padding_(); end
end

class ThreadSafe::Util::Striped64::Cell
end

class ThreadSafe::Util::Striped64
  extend ::ThreadSafe::Util::Volatile
end

module ThreadSafe::Util::Volatile
  def attr_volatile(*attr_names); end
end

module ThreadSafe::Util::Volatile
end

class ThreadSafe::Util::VolatileTuple
  include ::Enumerable
  def cas(i, old_value, new_value); end

  def compare_and_set(i, old_value, new_value); end

  def each(&blk); end

  def initialize(size); end

  def size(); end

  def volatile_get(i); end

  def volatile_set(i, value); end
end

class ThreadSafe::Util::VolatileTuple
end

module ThreadSafe::Util::XorShiftRandom
  def get(); end

  def xorshift(x); end
  MAX_XOR_SHIFTABLE_INT = ::T.let(nil, ::T.untyped)
end

module ThreadSafe::Util::XorShiftRandom
  extend ::ThreadSafe::Util::XorShiftRandom
end

module ThreadSafe::Util
end

module Tilt
  LOCK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tilt::BuilderTemplate
  def precompiled_postamble(locals); end

  def precompiled_template(locals); end
end

class Tilt::BuilderTemplate
end

class Tilt::CSVTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::CSVTemplate
  def self.engine(); end
end

class Tilt::CoffeeScriptLiterateTemplate
end

class Tilt::CoffeeScriptLiterateTemplate
end

class Tilt::CoffeeScriptTemplate
  def allows_script?(); end
end

class Tilt::CoffeeScriptTemplate
  def self.default_bare(); end

  def self.default_bare=(value); end

  def self.default_no_wrap(); end

  def self.default_no_wrap=(value); end

  def self.literate?(); end
end

class Tilt::ERBTemplate
  def precompiled(locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  SUPPORTS_KVARGS = ::T.let(nil, ::T.untyped)
end

class Tilt::ERBTemplate
  def self.default_output_variable(); end

  def self.default_output_variable=(name); end
end

class Tilt::ErubiTemplate
  def precompiled_template(locals); end
end

class Tilt::ErubiTemplate
end

class Tilt::EtanniTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::EtanniTemplate
end

class Tilt::Mapping
  AUTOLOAD_IS_BROKEN = ::T.let(nil, ::T.untyped)
  LOCK = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
  def evaluate(scope, locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  DOCUMENT_HEADER = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
end

class Tilt::PlainTemplate
end

class Tilt::PlainTemplate
end

class Tilt::RDocTemplate
  def allows_script?(); end

  def markup(); end
end

class Tilt::RDocTemplate
end

class Tilt::SassTemplate
  def allows_script?(); end
end

Tilt::SassTemplate::Sass = SassC

class Tilt::SassTemplate
end

class Tilt::ScssTemplate
end

class Tilt::ScssTemplate
end

class Tilt::SigilTemplate
  def allows_script?(); end
end

class Tilt::SigilTemplate
end

class Tilt::StringTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::StringTemplate
end

Tilt::TOPOBJECT = Tilt::CompiledTemplates

class Time
  COMMON_YEAR_DAYS_IN_MONTH = ::T.let(nil, ::T.untyped)
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
end

class TracePoint
  def __enable(_, _1); end

  def eval_script(); end

  def instruction_sequence(); end

  def parameters(); end
end

class TransformTaxRateCategoryRelation::TaxRate
  include ::TransformTaxRateCategoryRelation::TaxRate::GeneratedAttributeMethods
  include ::TransformTaxRateCategoryRelation::TaxRate::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class TransformTaxRateCategoryRelation::TaxRate::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::TransformTaxRateCategoryRelation::TaxRate::GeneratedRelationMethods
end

class TransformTaxRateCategoryRelation::TaxRate::ActiveRecord_AssociationRelation
end

class TransformTaxRateCategoryRelation::TaxRate::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::TransformTaxRateCategoryRelation::TaxRate::GeneratedRelationMethods
end

class TransformTaxRateCategoryRelation::TaxRate::ActiveRecord_Associations_CollectionProxy
end

class TransformTaxRateCategoryRelation::TaxRate::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::TransformTaxRateCategoryRelation::TaxRate::GeneratedRelationMethods
end

class TransformTaxRateCategoryRelation::TaxRate::ActiveRecord_Relation
end

module TransformTaxRateCategoryRelation::TaxRate::GeneratedAssociationMethods
end

module TransformTaxRateCategoryRelation::TaxRate::GeneratedAssociationMethods
end

module TransformTaxRateCategoryRelation::TaxRate::GeneratedAttributeMethods
end

module TransformTaxRateCategoryRelation::TaxRate::GeneratedAttributeMethods
  extend ::Mutex_m
end

module TransformTaxRateCategoryRelation::TaxRate::GeneratedRelationMethods
end

module TransformTaxRateCategoryRelation::TaxRate::GeneratedRelationMethods
  extend ::Mutex_m
end

class TransformTaxRateCategoryRelation::TaxRate
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class TransformTaxRateCategoryRelation::TaxRateTaxCategory
  include ::TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedAttributeMethods
  include ::TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class TransformTaxRateCategoryRelation::TaxRateTaxCategory::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedRelationMethods
end

class TransformTaxRateCategoryRelation::TaxRateTaxCategory::ActiveRecord_AssociationRelation
end

class TransformTaxRateCategoryRelation::TaxRateTaxCategory::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedRelationMethods
end

class TransformTaxRateCategoryRelation::TaxRateTaxCategory::ActiveRecord_Associations_CollectionProxy
end

class TransformTaxRateCategoryRelation::TaxRateTaxCategory::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedRelationMethods
end

class TransformTaxRateCategoryRelation::TaxRateTaxCategory::ActiveRecord_Relation
end

module TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedAssociationMethods
end

module TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedAssociationMethods
end

module TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedAttributeMethods
end

module TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedAttributeMethods
  extend ::Mutex_m
end

module TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedRelationMethods
end

module TransformTaxRateCategoryRelation::TaxRateTaxCategory::GeneratedRelationMethods
  extend ::Mutex_m
end

class TransformTaxRateCategoryRelation::TaxRateTaxCategory
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class TrueClass
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
end

module TruncateHtml
  VERSION = ::T.let(nil, ::T.untyped)
end

class TruncateHtml::HtmlString
  REGEX = ::T.let(nil, ::T.untyped)
  UNPAIRED_TAGS = ::T.let(nil, ::T.untyped)
end

module TypeCoerce::Configuration
  extend ::T::Private::Methods::SingletonMethodHooks
end

class TypeCoerce::Converter
  PRIMITIVE_TYPES = ::T.let(nil, ::T.untyped)
end

module URI
  include ::URI::RFC2396_REGEXP
end

class URI::FTP
  def buffer_open(buf, proxy, options); end
end

class URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::File
end

class URI::GID
  COMPONENT = ::T.let(nil, ::T.untyped)
  PATH_REGEXP = ::T.let(nil, ::T.untyped)
end

class URI::HTTP
  def buffer_open(buf, proxy, options); end
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::MailTo
  def initialize(*arg); end
end

URI::Parser = URI::RFC2396_Parser

URI::REGEXP = URI::RFC2396_REGEXP

class URI::RFC2396_Parser
  def initialize(opts=T.unsafe(nil)); end
end

class URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

module URI::Util
  def self.make_components_hash(klass, array_hash); end
end

module URI
  extend ::URI::Escape
  def self.get_encoding(label); end
end

module Unicode::DisplayWidth
  DATA_DIRECTORY = ::T.let(nil, ::T.untyped)
  DEPTHS = ::T.let(nil, ::T.untyped)
  INDEX = ::T.let(nil, ::T.untyped)
  INDEX_FILENAME = ::T.let(nil, ::T.untyped)
  NO_STRING_EXT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module UnicodeNormalize
end

module UnicodeNormalize
end

class Vector
  include ::ExceptionForMatrix
  include ::Matrix::CoercionHelper
  def [](i); end

  def []=(i, v); end

  def collect!(&block); end

  def covector(); end

  def elements(); end

  def initialize(array); end

  def map!(&block); end
end

class Vector::ZeroVectorError
end

class Vector::ZeroVectorError
end

class Vector
  extend ::Exception2MessageMapper
  extend ::Matrix::ConversionHelper
  def self.included(mod); end
end

module Warning
  extend ::Warning
end

class WeakRef
  def initialize(orig); end
end

class WebSocket::Driver
  BINARY = ::T.let(nil, ::T.untyped)
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  STATES = ::T.let(nil, ::T.untyped)
  UNICODE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def headers(); end

  def proxy(origin, options=T.unsafe(nil)); end

  def status(); end
  VALID_SCHEMES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def self.generate_key(); end
end

class WebSocket::Driver::Draft75
  def frame(buffer, type=T.unsafe(nil), error_type=T.unsafe(nil)); end

  def parse(chunk); end

  def version(); end
end

class WebSocket::Driver::Draft75
end

class WebSocket::Driver::Draft76
  BODY_SIZE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Draft76
end

class WebSocket::Driver::Headers
  def [](name); end

  def []=(name, value); end

  def clear(); end

  def initialize(received=T.unsafe(nil)); end

  def to_h(); end
  ALLOWED_DUPLICATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Headers
end

class WebSocket::Driver::Hybi
  def frame(buffer, type=T.unsafe(nil), code=T.unsafe(nil)); end

  def parse(chunk); end

  def ping(message=T.unsafe(nil), &callback); end

  def pong(message=T.unsafe(nil)); end

  def version(); end
  BYTE = ::T.let(nil, ::T.untyped)
  DEFAULT_ERROR_CODE = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
  ERROR_CODES = ::T.let(nil, ::T.untyped)
  FIN = ::T.let(nil, ::T.untyped)
  GUID = ::T.let(nil, ::T.untyped)
  LENGTH = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  MAX_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
  MIN_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  OPCODE = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OPCODE_CODES = ::T.let(nil, ::T.untyped)
  OPENING_OPCODES = ::T.let(nil, ::T.untyped)
  PACK_FORMATS = ::T.let(nil, ::T.untyped)
  RSV1 = ::T.let(nil, ::T.untyped)
  RSV2 = ::T.let(nil, ::T.untyped)
  RSV3 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Hybi::Frame
  def final(); end

  def final=(final); end

  def length(); end

  def length=(length); end

  def length_bytes(); end

  def length_bytes=(length_bytes); end

  def masked(); end

  def masked=(masked); end

  def masking_key(); end

  def masking_key=(masking_key); end

  def opcode(); end

  def opcode=(opcode); end

  def payload(); end

  def payload=(payload); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Frame
end

class WebSocket::Driver::Hybi::Message
  def <<(frame); end

  def data(); end

  def data=(data); end

  def opcode(); end

  def opcode=(opcode); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Message
end

class WebSocket::Driver::Hybi
  def self.generate_accept(key); end
end

class WebSocket::Driver::Proxy
  include ::WebSocket::Driver::EventEmitter
  def headers(); end

  def initialize(client, origin, options); end

  def parse(chunk); end

  def set_header(name, value); end

  def start(); end

  def status(); end
  PORTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Proxy
end

class WebSocket::Driver::Server
  def add_extension(*args, &block); end

  def binary(*args, &block); end

  def close(*args, &block); end

  def env(); end

  def frame(*args, &block); end

  def parse(chunk); end

  def ping(*args, &block); end

  def set_header(*args, &block); end

  def start(*args, &block); end

  def text(*args, &block); end

  def url(); end

  def version(); end

  def write(buffer); end
  EVENTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Server
end

class WebSocket::Driver::StreamReader
  def each_byte(); end

  def put(chunk); end

  def read(length); end
  MINIMUM_AUTOMATIC_PRUNE_OFFSET = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::StreamReader
end

class WebSocket::Extensions
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser
  EXT = ::T.let(nil, ::T.untyped)
  EXT_LIST = ::T.let(nil, ::T.untyped)
  NOTOKEN = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  PARAM = ::T.let(nil, ::T.untyped)
  QUOTED = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser
  def self.parse_header(header); end

  def self.serialize_params(name, params); end
end

module WebSocket::HTTP
end

module WebSocket::HTTP::Headers
  def complete?(); end

  def error?(); end

  def headers(); end

  def initialize(); end

  def parse(chunk); end
  CR = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  MAX_LINE_LENGTH = ::T.let(nil, ::T.untyped)
end

module WebSocket::HTTP::Headers
end

class WebSocket::HTTP::Request
  include ::WebSocket::HTTP::Headers
  def env(); end
  REQUEST_LINE = ::T.let(nil, ::T.untyped)
  REQUEST_TARGET = ::T.let(nil, ::T.untyped)
  RESERVED_HEADERS = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Request
end

class WebSocket::HTTP::Response
  include ::WebSocket::HTTP::Headers
  def [](name); end

  def body(); end

  def code(); end
  STATUS_LINE = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Response
end

module WebSocket::HTTP
  def self.normalize_header(name); end
end

module Webdrivers
  DEFAULT_CACHE_TIME = ::T.let(nil, ::T.untyped)
  DEFAULT_INSTALL_DIR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module WithModel
  VERSION = ::T.let(nil, ::T.untyped)
end

module XPath::DSL
  AXES = ::T.let(nil, ::T.untyped)
  LOWERCASE_LETTERS = ::T.let(nil, ::T.untyped)
  METHODS = ::T.let(nil, ::T.untyped)
  OPERATORS = ::T.let(nil, ::T.untyped)
  UPPERCASE_LETTERS = ::T.let(nil, ::T.untyped)
end

module YARD
  CONFIG_DIR = ::T.let(nil, ::T.untyped)
  ROOT = ::T.let(nil, ::T.untyped)
  TEMPLATE_ROOT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class YARD::CLI::CommandParser
  def run(*args); end
end

class YARD::CLI::CommandParser
  def self.commands(); end

  def self.commands=(commands); end

  def self.default_command(); end

  def self.default_command=(default_command); end

  def self.run(*args); end
end

class YARD::CLI::Config
  def append(); end

  def append=(append); end

  def as_list(); end

  def as_list=(as_list); end

  def gem_install_cmd(); end

  def gem_install_cmd=(gem_install_cmd); end

  def key(); end

  def key=(key); end

  def reset(); end

  def reset=(reset); end

  def run(*args); end

  def values(); end

  def values=(values); end
end

class YARD::CLI::Config
end

class YARD::CLI::Diff
  def run(*args); end
end

class YARD::CLI::Diff
end

class YARD::CLI::Display
  def format_objects(); end

  def initialize(*args); end

  def wrap_layout(contents); end
end

class YARD::CLI::Display
end

class YARD::CLI::Gems
  def run(*args); end
end

class YARD::CLI::Gems
end

class YARD::CLI::Graph
  def objects(); end

  def options(); end

  def run(*args); end
end

class YARD::CLI::Graph
end

class YARD::CLI::Help
  def run(*args); end
end

class YARD::CLI::Help
end

class YARD::CLI::I18n
end

class YARD::CLI::I18n
end

class YARD::CLI::List
  def run(*args); end
end

class YARD::CLI::List
end

class YARD::CLI::MarkupTypes
  def run(*args); end
end

class YARD::CLI::MarkupTypes
end

class YARD::CLI::Server
  def adapter(); end

  def adapter=(adapter); end

  def libraries(); end

  def libraries=(libraries); end

  def options(); end

  def options=(options); end

  def run(*args); end

  def scripts(); end

  def scripts=(scripts); end

  def server_options(); end

  def server_options=(server_options); end

  def template_paths(); end

  def template_paths=(template_paths); end
end

class YARD::CLI::Server
end

class YARD::CLI::Stats
  include ::YARD::Templates::Helpers::BaseHelper
  def initialize(parse=T.unsafe(nil)); end

  def output(name, data, undoc=T.unsafe(nil)); end

  def parse(); end

  def parse=(parse); end

  def print_statistics(); end

  def print_undocumented_objects(); end

  def stats_for_attributes(); end

  def stats_for_classes(); end

  def stats_for_constants(); end

  def stats_for_files(); end

  def stats_for_methods(); end

  def stats_for_modules(); end
  STATS_ORDER = ::T.let(nil, ::T.untyped)
end

class YARD::CLI::Stats
end

class YARD::CLI::YRI
  def cache_object(name, path); end

  def find_object(name); end

  def print_object(object); end

  def print_usage(); end

  def run(*args); end
  CACHE_FILE = ::T.let(nil, ::T.untyped)
  DEFAULT_SEARCH_PATHS = ::T.let(nil, ::T.untyped)
  SEARCH_PATHS_FILE = ::T.let(nil, ::T.untyped)
end

class YARD::CLI::YRI
end

class YARD::CLI::YardoptsCommand
  DEFAULT_YARDOPTS_FILE = ::T.let(nil, ::T.untyped)
end

module YARD::CodeObjects
  BUILTIN_ALL = ::T.let(nil, ::T.untyped)
  BUILTIN_CLASSES = ::T.let(nil, ::T.untyped)
  BUILTIN_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  BUILTIN_EXCEPTIONS_HASH = ::T.let(nil, ::T.untyped)
  BUILTIN_MODULES = ::T.let(nil, ::T.untyped)
  CONSTANTMATCH = ::T.let(nil, ::T.untyped)
  CONSTANTSTART = ::T.let(nil, ::T.untyped)
  CSEP = ::T.let(nil, ::T.untyped)
  CSEPQ = ::T.let(nil, ::T.untyped)
  ISEP = ::T.let(nil, ::T.untyped)
  ISEPQ = ::T.let(nil, ::T.untyped)
  METHODMATCH = ::T.let(nil, ::T.untyped)
  METHODNAMEMATCH = ::T.let(nil, ::T.untyped)
  NAMESPACEMATCH = ::T.let(nil, ::T.untyped)
  NSEP = ::T.let(nil, ::T.untyped)
  NSEPQ = ::T.let(nil, ::T.untyped)
  PROXY_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::CodeObjects::ClassObject
  def inheritance_tree(include_mods=T.unsafe(nil)); end

  def inherited_constants(); end

  def inherited_meths(opts=T.unsafe(nil)); end

  def is_exception?(); end

  def superclass(); end

  def superclass=(object); end
end

class YARD::CodeObjects::ClassObject
end

class YARD::CodeObjects::ClassVariableObject
  def value(); end

  def value=(value); end
end

class YARD::CodeObjects::ClassVariableObject
end

class YARD::CodeObjects::ConstantObject
  def value(); end

  def value=(value); end
end

class YARD::CodeObjects::ConstantObject
end

class YARD::CodeObjects::ExtendedMethodObject
  def initialize(obj); end

  def method_missing(sym, *args, &block); end

  def scope(); end
end

class YARD::CodeObjects::ExtendedMethodObject
end

class YARD::CodeObjects::ExtraFileObject
  def ==(other); end

  def attributes(); end

  def attributes=(attributes); end

  def contents(); end

  def contents=(contents); end

  def eql?(other); end

  def equal?(other); end

  def filename(); end

  def filename=(filename); end

  def initialize(filename, contents=T.unsafe(nil)); end

  def locale(); end

  def locale=(locale); end

  def name(); end

  def name=(name); end

  def path(); end

  def title(); end

  def type(); end
end

class YARD::CodeObjects::ExtraFileObject
end

class YARD::CodeObjects::MacroObject
  def attached?(); end

  def expand(call_params=T.unsafe(nil), full_source=T.unsafe(nil), block_source=T.unsafe(nil)); end

  def macro_data(); end

  def macro_data=(macro_data); end

  def method_object(); end

  def method_object=(method_object); end
  MACRO_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::CodeObjects::MacroObject
  def self.apply(docstring, call_params=T.unsafe(nil), full_source=T.unsafe(nil), block_source=T.unsafe(nil), _method_object=T.unsafe(nil)); end

  def self.apply_macro(macro, docstring, call_params=T.unsafe(nil), full_source=T.unsafe(nil), block_source=T.unsafe(nil)); end

  def self.create(macro_name, data, method_object=T.unsafe(nil)); end

  def self.create_docstring(macro_name, data, method_object=T.unsafe(nil)); end

  def self.expand(macro_data, call_params=T.unsafe(nil), full_source=T.unsafe(nil), block_source=T.unsafe(nil)); end

  def self.find(macro_name); end

  def self.find_or_create(macro_name, data, method_object=T.unsafe(nil)); end
end

class YARD::CodeObjects::ModuleObject
  def inheritance_tree(include_mods=T.unsafe(nil)); end
end

class YARD::CodeObjects::ModuleObject
end

class YARD::CodeObjects::NamespaceObject
  def aliases(); end

  def attributes(); end

  def child(opts=T.unsafe(nil)); end

  def children(); end

  def class_attributes(); end

  def class_mixins(); end

  def constants(opts=T.unsafe(nil)); end

  def cvars(); end

  def groups(); end

  def groups=(groups); end

  def included_constants(); end

  def included_meths(opts=T.unsafe(nil)); end

  def initialize(namespace, name, *args, &block); end

  def instance_attributes(); end

  def instance_mixins(); end

  def meths(opts=T.unsafe(nil)); end

  def mixins(*scopes); end
end

class YARD::CodeObjects::NamespaceObject
end

class YARD::CodeObjects::Proxy
  def ==(other); end

  def ===(other); end

  def equal?(other); end

  def initialize(namespace, name, type=T.unsafe(nil)); end

  def instance_of?(klass); end

  def is_a?(klass); end

  def kind_of?(klass); end

  def method_missing(meth, *args, &block); end

  def name(prefix=T.unsafe(nil)); end

  def namespace(); end

  def parent(); end

  def path(); end

  def respond_to?(meth, include_private=T.unsafe(nil)); end

  def root?(); end

  def title(); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class YARD::CodeObjects::Proxy
  def self.===(other); end
end

class YARD::CodeObjects::ProxyMethodError
end

class YARD::CodeObjects::ProxyMethodError
end

class YARD::CodeObjects::RootObject
end

class YARD::CodeObjects::RootObject
end

class YARD::Config
  CONFIG_DIR = ::T.let(nil, ::T.untyped)
  CONFIG_FILE = ::T.let(nil, ::T.untyped)
  DEFAULT_CONFIG_OPTIONS = ::T.let(nil, ::T.untyped)
  IGNORED_PLUGINS = ::T.let(nil, ::T.untyped)
  YARD_PLUGIN_PREFIX = ::T.let(nil, ::T.untyped)
end

class YARD::Docstring
  META_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::DocstringParser
  META_MATCH = ::T.let(nil, ::T.untyped)
end

module YARD::GemIndex
end

module YARD::GemIndex
  def self.all(); end

  def self.each(&block); end

  def self.find_all_by_name(*args); end
end

class YARD::Handlers::C::AliasHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::AliasHandler
end

class YARD::Handlers::C::AttributeHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::AttributeHandler
end

class YARD::Handlers::C::Base
  include ::YARD::Handlers::C::HandlerMethods
  include ::YARD::Parser::C
  include ::YARD::Handlers::Common::MethodHandler
  def ensure_variable_defined!(var, max_retries=T.unsafe(nil)); end

  def namespace_for_variable(var); end

  def namespaces(); end

  def override_comments(); end

  def parse_block(opts=T.unsafe(nil)); end

  def process_file(file, object); end

  def processed_files(); end

  def symbols(); end
  ERROR_CLASS_NAMES = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::Base
  def self.handles?(statement, processor); end

  def self.statement_class(type=T.unsafe(nil)); end
end

class YARD::Handlers::C::ClassHandler
  MATCH1 = ::T.let(nil, ::T.untyped)
  MATCH2 = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::ClassHandler
end

class YARD::Handlers::C::ConstantHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::ConstantHandler
end

module YARD::Handlers::C::HandlerMethods
  include ::YARD::Parser::C
  include ::YARD::CodeObjects
  include ::YARD::Handlers::Common::MethodHandler
  def handle_alias(var_name, new_name, old_name); end

  def handle_attribute(var_name, name, read, write); end

  def handle_class(var_name, class_name, parent, in_module=T.unsafe(nil)); end

  def handle_constants(type, var_name, const_name, value); end

  def handle_method(scope, var_name, name, func_name, _source_file=T.unsafe(nil)); end

  def handle_module(var_name, module_name, in_module=T.unsafe(nil)); end
end

module YARD::Handlers::C::HandlerMethods
end

class YARD::Handlers::C::InitHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::InitHandler
end

class YARD::Handlers::C::MethodHandler
  MATCH1 = ::T.let(nil, ::T.untyped)
  MATCH2 = ::T.let(nil, ::T.untyped)
  MATCH3 = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::MethodHandler
end

class YARD::Handlers::C::MixinHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::MixinHandler
end

class YARD::Handlers::C::ModuleHandler
  MATCH1 = ::T.let(nil, ::T.untyped)
  MATCH2 = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::ModuleHandler
end

class YARD::Handlers::C::OverrideCommentHandler
end

class YARD::Handlers::C::OverrideCommentHandler
end

class YARD::Handlers::C::PathHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::PathHandler
end

class YARD::Handlers::C::StructHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::StructHandler
end

class YARD::Handlers::C::SymbolHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::SymbolHandler
end

module YARD::Handlers::Common::MethodHandler
  def add_predicate_return_tag(obj); end
end

module YARD::Handlers::Common::MethodHandler
end

class YARD::Handlers::Processor
  def extra_state(); end

  def extra_state=(extra_state); end

  def file(); end

  def file=(file); end

  def find_handlers(statement); end

  def globals(); end

  def globals=(globals); end

  def initialize(parser); end

  def namespace(); end

  def namespace=(namespace); end

  def owner(); end

  def owner=(owner); end

  def parse_remaining_files(); end

  def parser_type(); end

  def parser_type=(parser_type); end

  def process(statements); end

  def scope(); end

  def scope=(scope); end

  def visibility(); end

  def visibility=(visibility); end
end

class YARD::Handlers::Processor
  def self.namespace_for_handler(); end

  def self.register_handler_namespace(type, ns); end
end

class YARD::Handlers::Ruby::AliasHandler
end

class YARD::Handlers::Ruby::AliasHandler
end

class YARD::Handlers::Ruby::AttributeHandler
  def validated_attribute_names(params); end
end

class YARD::Handlers::Ruby::AttributeHandler
end

class YARD::Handlers::Ruby::Base
  extend ::YARD::Parser::Ruby
end

class YARD::Handlers::Ruby::ClassConditionHandler
  def parse_condition(); end

  def parse_else_block(); end

  def parse_then_block(); end
end

class YARD::Handlers::Ruby::ClassConditionHandler
end

class YARD::Handlers::Ruby::ClassHandler
  include ::YARD::Handlers::Ruby::StructHandlerMethods
end

class YARD::Handlers::Ruby::ClassHandler
end

class YARD::Handlers::Ruby::ClassVariableHandler
end

class YARD::Handlers::Ruby::ClassVariableHandler
end

class YARD::Handlers::Ruby::CommentHandler
end

class YARD::Handlers::Ruby::CommentHandler
end

class YARD::Handlers::Ruby::ConstantHandler
  include ::YARD::Handlers::Ruby::StructHandlerMethods
end

class YARD::Handlers::Ruby::ConstantHandler
end

class YARD::Handlers::Ruby::DSLHandler
  include ::YARD::Handlers::Ruby::DSLHandlerMethods
end

class YARD::Handlers::Ruby::DSLHandler
end

module YARD::Handlers::Ruby::DSLHandlerMethods
  include ::YARD::CodeObjects
  include ::YARD::Parser
  def handle_comments(); end

  def register_docstring(object, docstring=T.unsafe(nil), stmt=T.unsafe(nil)); end
  IGNORE_METHODS = ::T.let(nil, ::T.untyped)
end

module YARD::Handlers::Ruby::DSLHandlerMethods
end

module YARD::Handlers::Ruby::DecoratorHandlerMethods
  def process_decorator(*nodes, &block); end
end

module YARD::Handlers::Ruby::DecoratorHandlerMethods
end

class YARD::Handlers::Ruby::ExceptionHandler
end

class YARD::Handlers::Ruby::ExceptionHandler
end

class YARD::Handlers::Ruby::ExtendHandler
end

class YARD::Handlers::Ruby::ExtendHandler
end

class YARD::Handlers::Ruby::Legacy::AliasHandler
end

class YARD::Handlers::Ruby::Legacy::AliasHandler
end

class YARD::Handlers::Ruby::Legacy::AttributeHandler
end

class YARD::Handlers::Ruby::Legacy::AttributeHandler
end

class YARD::Handlers::Ruby::Legacy::Base
  include ::YARD::Parser::Ruby::Legacy::RubyToken
  def parse_block(opts=T.unsafe(nil)); end
end

class YARD::Handlers::Ruby::Legacy::Base
  def self.handles?(stmt); end
end

class YARD::Handlers::Ruby::Legacy::ClassConditionHandler
  def parse_condition(); end

  def parse_else_block(); end

  def parse_then_block(); end
end

class YARD::Handlers::Ruby::Legacy::ClassConditionHandler
end

class YARD::Handlers::Ruby::Legacy::ClassHandler
  include ::YARD::Handlers::Ruby::StructHandlerMethods
end

class YARD::Handlers::Ruby::Legacy::ClassHandler
end

class YARD::Handlers::Ruby::Legacy::ClassVariableHandler
  HANDLER_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::Ruby::Legacy::ClassVariableHandler
end

class YARD::Handlers::Ruby::Legacy::CommentHandler
end

class YARD::Handlers::Ruby::Legacy::CommentHandler
end

class YARD::Handlers::Ruby::Legacy::ConstantHandler
  include ::YARD::Handlers::Ruby::StructHandlerMethods
  HANDLER_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::Ruby::Legacy::ConstantHandler
end

class YARD::Handlers::Ruby::Legacy::DSLHandler
  include ::YARD::Handlers::Ruby::DSLHandlerMethods
end

class YARD::Handlers::Ruby::Legacy::DSLHandler
end

class YARD::Handlers::Ruby::Legacy::ExceptionHandler
end

class YARD::Handlers::Ruby::Legacy::ExceptionHandler
end

class YARD::Handlers::Ruby::Legacy::ExtendHandler
end

class YARD::Handlers::Ruby::Legacy::ExtendHandler
end

class YARD::Handlers::Ruby::Legacy::MethodHandler
end

class YARD::Handlers::Ruby::Legacy::MethodHandler
end

class YARD::Handlers::Ruby::Legacy::MixinHandler
end

class YARD::Handlers::Ruby::Legacy::MixinHandler
end

class YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler
end

class YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler
end

class YARD::Handlers::Ruby::Legacy::ModuleHandler
end

class YARD::Handlers::Ruby::Legacy::ModuleHandler
end

class YARD::Handlers::Ruby::Legacy::PrivateClassMethodHandler
end

class YARD::Handlers::Ruby::Legacy::PrivateClassMethodHandler
end

class YARD::Handlers::Ruby::Legacy::PrivateConstantHandler
end

class YARD::Handlers::Ruby::Legacy::PrivateConstantHandler
end

class YARD::Handlers::Ruby::Legacy::VisibilityHandler
end

class YARD::Handlers::Ruby::Legacy::VisibilityHandler
end

class YARD::Handlers::Ruby::Legacy::YieldHandler
end

class YARD::Handlers::Ruby::Legacy::YieldHandler
end

class YARD::Handlers::Ruby::MethodConditionHandler
end

class YARD::Handlers::Ruby::MethodConditionHandler
end

class YARD::Handlers::Ruby::MethodHandler
  include ::YARD::Handlers::Common::MethodHandler
  def format_args(); end
end

class YARD::Handlers::Ruby::MethodHandler
end

class YARD::Handlers::Ruby::MixinHandler
  def process_mixin(mixin); end

  def recipient(mixin); end
end

class YARD::Handlers::Ruby::MixinHandler
end

class YARD::Handlers::Ruby::ModuleFunctionHandler
end

class YARD::Handlers::Ruby::ModuleFunctionHandler
end

class YARD::Handlers::Ruby::ModuleHandler
end

class YARD::Handlers::Ruby::ModuleHandler
end

class YARD::Handlers::Ruby::PrivateClassMethodHandler
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
end

class YARD::Handlers::Ruby::PrivateClassMethodHandler
end

class YARD::Handlers::Ruby::PrivateConstantHandler
end

class YARD::Handlers::Ruby::PrivateConstantHandler
end

class YARD::Handlers::Ruby::PublicClassMethodHandler
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
end

class YARD::Handlers::Ruby::PublicClassMethodHandler
end

module YARD::Handlers::Ruby::StructHandlerMethods
  include ::YARD::CodeObjects
  def add_reader_tags(klass, new_method, member); end

  def add_writer_tags(klass, new_method, member); end

  def create_attributes(klass, members); end

  def create_class(classname, superclass); end

  def create_member_method?(klass, member, type=T.unsafe(nil)); end

  def create_reader(klass, member); end

  def create_writer(klass, member); end

  def member_tag_for_member(klass, member, type=T.unsafe(nil)); end

  def members_from_tags(klass); end

  def return_type_from_tag(member_tag); end
end

module YARD::Handlers::Ruby::StructHandlerMethods
end

class YARD::Handlers::Ruby::VisibilityHandler
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
end

class YARD::Handlers::Ruby::VisibilityHandler
end

class YARD::Handlers::Ruby::YieldHandler
end

class YARD::Handlers::Ruby::YieldHandler
end

class YARD::I18n::Locale
  def initialize(name); end

  def load(locale_directory); end

  def name(); end

  def translate(message); end
end

class YARD::I18n::Locale
  def self.default(); end

  def self.default=(locale); end
end

class YARD::I18n::Message
  def ==(other); end

  def add_comment(comment); end

  def add_location(path, line); end

  def comments(); end

  def id(); end

  def initialize(id); end

  def locations(); end
end

class YARD::I18n::Message
end

class YARD::I18n::Messages
  include ::Enumerable
  def ==(other); end

  def [](id); end

  def each(&block); end

  def messages(); end

  def register(id); end
end

class YARD::I18n::Messages
end

class YARD::I18n::PotGenerator
  def generate(); end

  def initialize(relative_base_path); end

  def messages(); end

  def parse_files(files); end

  def parse_objects(objects); end
end

class YARD::I18n::PotGenerator
end

class YARD::I18n::Text
  def extract_messages(); end

  def initialize(input, options=T.unsafe(nil)); end

  def translate(locale); end
end

class YARD::I18n::Text
end

class YARD::Logger
  def <<(msg=T.unsafe(nil)); end

  def backtrace(exc, level_meth=T.unsafe(nil)); end

  def capture(msg, nontty_log=T.unsafe(nil)); end

  def clear_progress(); end

  def debug(*args); end

  def enter_level(new_level=T.unsafe(nil)); end

  def initialize(pipe, *args); end

  def io(); end

  def io=(pipe); end

  def print(msg=T.unsafe(nil)); end

  def progress(msg, nontty_log=T.unsafe(nil)); end

  def puts(msg=T.unsafe(nil)); end

  def show_backtraces(); end

  def show_backtraces=(show_backtraces); end

  def show_progress(); end

  def show_progress=(show_progress); end

  def warn(*args); end

  def warn_no_continuations(); end

  def warned(); end

  def warned=(warned); end
  PROGRESS_INDICATORS = ::T.let(nil, ::T.untyped)
end

class YARD::Logger
  def self.instance(pipe=T.unsafe(nil)); end
end

module YARD::Parser::Ruby::Legacy::RubyToken
  def Token(token, value=T.unsafe(nil)); end

  def set_token_position(line, char); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  NEWLINE_TOKEN = ::T.let(nil, ::T.untyped)
  TkReading2Token = ::T.let(nil, ::T.untyped)
  TkSymbol2Token = ::T.let(nil, ::T.untyped)
  TokenDefinitions = ::T.let(nil, ::T.untyped)
end

module YARD::Parser::Ruby::Legacy::RubyToken
  def self.def_token(token_n, super_token=T.unsafe(nil), reading=T.unsafe(nil), *opts); end
end

class YARD::Parser::SourceParser
  DEFAULT_PATH_GLOB = ::T.let(nil, ::T.untyped)
  ENCODING_BYTE_ORDER_MARKS = ::T.let(nil, ::T.untyped)
  ENCODING_LINE = ::T.let(nil, ::T.untyped)
  FROZEN_STRING_LINE = ::T.let(nil, ::T.untyped)
  SHEBANG_LINE = ::T.let(nil, ::T.untyped)
end

class YARD::Rake::YardocTask
  def after(); end

  def after=(after); end

  def before(); end

  def before=(before); end

  def define(); end

  def files(); end

  def files=(files); end

  def initialize(name=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def options(); end

  def options=(options); end

  def stats_options(); end

  def stats_options=(stats_options); end

  def verifier(); end

  def verifier=(verifier); end
end

class YARD::Rake::YardocTask
end

module YARD::Registry
  DEFAULT_PO_DIR = ::T.let(nil, ::T.untyped)
  DEFAULT_YARDOC_FILE = ::T.let(nil, ::T.untyped)
  LOCAL_YARDOC_INDEX = ::T.let(nil, ::T.untyped)
end

class YARD::RegistryResolver
  include ::YARD::CodeObjects::NamespaceMapper
  def initialize(registry=T.unsafe(nil)); end

  def lookup_by_path(path, opts=T.unsafe(nil)); end
end

class YARD::RegistryResolver
end

class YARD::RegistryStore
  def [](key); end

  def []=(key, value); end

  def checksums(); end

  def checksums_path(); end

  def delete(key); end

  def destroy(force=T.unsafe(nil)); end

  def file(); end

  def get(key); end

  def keys(reload=T.unsafe(nil)); end

  def load(file=T.unsafe(nil)); end

  def load!(file=T.unsafe(nil)); end

  def load_all(); end

  def load_yardoc(); end

  def locale(name); end

  def lock_for_writing(file=T.unsafe(nil), &block); end

  def locked_for_writing?(file=T.unsafe(nil)); end

  def object_types_path(); end

  def objects_path(); end

  def paths_for_type(type, reload=T.unsafe(nil)); end

  def proxy_types(); end

  def proxy_types_path(); end

  def put(key, value); end

  def root(); end

  def save(merge=T.unsafe(nil), file=T.unsafe(nil)); end

  def values(reload=T.unsafe(nil)); end

  def values_for_type(type, reload=T.unsafe(nil)); end
end

class YARD::RegistryStore
end

class YARD::Serializers::Base
  def after_serialize(data); end

  def before_serialize(); end

  def exists?(object); end

  def initialize(opts=T.unsafe(nil)); end

  def options(); end

  def serialize(object, data); end

  def serialized_path(object); end
end

class YARD::Serializers::Base
end

class YARD::Serializers::FileSystemSerializer
  def basepath(); end

  def basepath=(value); end

  def extension(); end

  def extension=(value); end
end

class YARD::Serializers::FileSystemSerializer
end

class YARD::Serializers::ProcessSerializer
  def initialize(cmd); end

  def serialize(_object, data); end
end

class YARD::Serializers::ProcessSerializer
end

class YARD::Serializers::StdoutSerializer
  def initialize(wrap=T.unsafe(nil)); end

  def serialize(_object, data); end
end

class YARD::Serializers::StdoutSerializer
end

class YARD::Serializers::YardocSerializer
  def checksums_path(); end

  def complete?(); end

  def complete_lock_path(); end

  def deserialize(path, is_path=T.unsafe(nil)); end

  def initialize(yfile); end

  def lock_for_writing(); end

  def locked_for_writing?(); end

  def object_types_path(); end

  def objects_path(); end

  def processing_path(); end

  def proxy_types_path(); end

  def serialize(object); end
end

class YARD::Serializers::YardocSerializer
end

class YARD::Server::Adapter
  def add_library(library); end

  def document_root(); end

  def document_root=(document_root); end

  def initialize(libs, opts=T.unsafe(nil), server_opts=T.unsafe(nil)); end

  def libraries(); end

  def libraries=(libraries); end

  def options(); end

  def options=(options); end

  def router(); end

  def router=(router); end

  def server_options(); end

  def server_options=(server_options); end

  def start(); end
end

class YARD::Server::Adapter
  def self.setup(); end

  def self.shutdown(); end
end

class YARD::Server::Commands::Base
  def adapter(); end

  def adapter=(adapter); end

  def body(); end

  def body=(body); end

  def cache(data); end

  def caching(); end

  def caching=(caching); end

  def call(request); end

  def command_options(); end

  def command_options=(command_options); end

  def headers(); end

  def headers=(headers); end

  def initialize(opts=T.unsafe(nil)); end

  def not_found(); end

  def path(); end

  def path=(path); end

  def redirect(url); end

  def render(object=T.unsafe(nil)); end

  def request(); end

  def request=(request); end

  def run(); end

  def status(); end

  def status=(status); end
end

class YARD::Server::Commands::Base
end

class YARD::Server::Commands::DisplayFileCommand
  def index(); end

  def index=(index); end
end

class YARD::Server::Commands::DisplayFileCommand
end

class YARD::Server::Commands::DisplayObjectCommand
  include ::YARD::Server::DocServerHelper
  def index(); end
end

class YARD::Server::Commands::DisplayObjectCommand
end

class YARD::Server::Commands::FramesCommand
end

class YARD::Server::Commands::FramesCommand
end

class YARD::Server::Commands::LibraryCommand
  def incremental(); end

  def incremental=(incremental); end

  def library(); end

  def library=(library); end

  def options(); end

  def options=(options); end

  def serializer(); end

  def serializer=(serializer); end

  def single_library(); end

  def single_library=(single_library); end

  def use_fork(); end

  def use_fork=(use_fork); end
  CAN_FORK = ::T.let(nil, ::T.untyped)
end

class YARD::Server::Commands::LibraryCommand
end

class YARD::Server::Commands::LibraryIndexCommand
  def options(); end

  def options=(options); end
end

class YARD::Server::Commands::LibraryIndexCommand
end

class YARD::Server::Commands::ListCommand
  include ::YARD::Templates::Helpers::BaseHelper
end

class YARD::Server::Commands::ListCommand
end

class YARD::Server::Commands::RootRequestCommand
  include ::YARD::Server::Commands::StaticFileHelpers
  include ::WEBrick::HTTPUtils
end

class YARD::Server::Commands::RootRequestCommand
end

class YARD::Server::Commands::SearchCommand
  include ::YARD::Templates::Helpers::BaseHelper
  include ::YARD::Templates::Helpers::ModuleHelper
  include ::YARD::Server::DocServerHelper
  def query(); end

  def query=(query); end

  def results(); end

  def results=(results); end

  def visible_results(); end
end

class YARD::Server::Commands::SearchCommand
end

class YARD::Server::Commands::StaticFileCommand
  include ::YARD::Server::Commands::StaticFileHelpers
  include ::WEBrick::HTTPUtils
  STATIC_PATHS = ::T.let(nil, ::T.untyped)
end

class YARD::Server::Commands::StaticFileCommand
end

module YARD::Server::Commands::StaticFileHelpers
  include ::WEBrick::HTTPUtils
  def favicon?(); end

  def static_template_file?(); end
end

module YARD::Server::Commands::StaticFileHelpers
  def self.find_file(adapter, url); end
end

module YARD::Server::DocServerHelper
  def abs_url(*path_components); end

  def base_path(path); end

  def mtime(file); end

  def mtime_url(file); end

  def router(); end

  def url_for(obj, anchor=T.unsafe(nil), relative=T.unsafe(nil)); end

  def url_for_file(filename, anchor=T.unsafe(nil)); end

  def url_for_frameset(); end

  def url_for_index(); end

  def url_for_list(type); end

  def url_for_main(); end
end

module YARD::Server::DocServerHelper
end

class YARD::Server::DocServerSerializer
  def initialize(_command=T.unsafe(nil)); end
end

class YARD::Server::DocServerSerializer
end

class YARD::Server::FinishRequest
end

class YARD::Server::FinishRequest
end

class YARD::Server::LibraryVersion
  def ==(other); end

  def eql?(other); end

  def equal?(other); end

  def gemspec(); end

  def initialize(name, version=T.unsafe(nil), yardoc=T.unsafe(nil), source=T.unsafe(nil)); end

  def load_yardoc_from_disk(); end

  def load_yardoc_from_gem(); end

  def name(); end

  def name=(name); end

  def prepare!(); end

  def ready?(); end

  def source(); end

  def source=(source); end

  def source_path(); end

  def source_path=(source_path); end

  def source_path_for_disk(); end

  def source_path_for_gem(); end

  def to_s(url_format=T.unsafe(nil)); end

  def version(); end

  def version=(version); end

  def yardoc_file(); end

  def yardoc_file=(yardoc_file); end

  def yardoc_file_for_gem(); end
end

class YARD::Server::LibraryVersion
end

class YARD::Server::NotFoundError
end

class YARD::Server::NotFoundError
end

class YARD::Server::RackAdapter
  include ::WEBrick::HTTPUtils
  def call(env); end
end

class YARD::Server::RackAdapter
end

class YARD::Server::RackMiddleware
  def call(env); end

  def initialize(app, opts=T.unsafe(nil)); end
end

class YARD::Server::RackMiddleware
end

class YARD::Server::Router
  include ::YARD::Server::StaticCaching
  include ::YARD::Server::Commands
  def adapter(); end

  def adapter=(adapter); end

  def call(request); end

  def docs_prefix(); end

  def final_options(library, paths); end

  def initialize(adapter); end

  def list_prefix(); end

  def parse_library_from_path(paths); end

  def request(); end

  def request=(request); end

  def route(path=T.unsafe(nil)); end

  def route_docs(library, paths); end

  def route_index(); end

  def route_list(library, paths); end

  def route_search(library, paths); end

  def route_static(library, paths); end

  def search_prefix(); end

  def static_prefix(); end
end

class YARD::Server::Router
end

module YARD::Server::StaticCaching
  def check_static_cache(); end
end

module YARD::Server::StaticCaching
end

class YARD::Server::WebrickAdapter
end

class YARD::Server::WebrickAdapter
end

class YARD::Server::WebrickServlet
  def adapter(); end

  def adapter=(adapter); end

  def do_GET(request, response); end

  def initialize(server, adapter); end
end

class YARD::Server::WebrickServlet
end

class YARD::StubProxy
  def _dump(_depth); end

  def initialize(path, transient=T.unsafe(nil)); end

  def method_missing(meth, *args, &block); end
  FILELEN = ::T.let(nil, ::T.untyped)
end

class YARD::StubProxy
  def self._load(str); end
end

class YARD::Tags::DefaultFactory
  def parse_tag(tag_name, text); end

  def parse_tag_with_name(tag_name, text); end

  def parse_tag_with_options(tag_name, text); end

  def parse_tag_with_title_and_text(tag_name, text); end

  def parse_tag_with_types(tag_name, text); end

  def parse_tag_with_types_and_name(tag_name, text); end

  def parse_tag_with_types_and_title(tag_name, text); end

  def parse_tag_with_types_name_and_default(tag_name, text); end
  TYPELIST_CLOSING_CHARS = ::T.let(nil, ::T.untyped)
  TYPELIST_OPENING_CHARS = ::T.let(nil, ::T.untyped)
end

class YARD::Tags::DefaultFactory
end

class YARD::Tags::DefaultTag
  def defaults(); end

  def initialize(tag_name, text, types=T.unsafe(nil), name=T.unsafe(nil), defaults=T.unsafe(nil)); end
end

class YARD::Tags::DefaultTag
end

class YARD::Tags::MethodDirective
  SCOPE_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Tags::OptionTag
  def initialize(tag_name, name, pair); end

  def pair(); end

  def pair=(pair); end
end

class YARD::Tags::OptionTag
end

module YARD::Tags::RefTag
  def owner(); end

  def owner=(owner); end
end

module YARD::Tags::RefTag
end

class YARD::Tags::RefTagList
  def initialize(tag_name, owner, name=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def owner(); end

  def owner=(owner); end

  def tag_name(); end

  def tag_name=(tag_name); end

  def tags(); end
end

class YARD::Tags::RefTagList
end

class YARD::Tags::TagFormatError
end

class YARD::Tags::TagFormatError
end

class YARD::Tags::TypesExplainer
end

class YARD::Tags::TypesExplainer::CollectionType
  def initialize(name, types); end

  def to_s(_singular=T.unsafe(nil)); end

  def types(); end

  def types=(types); end
end

class YARD::Tags::TypesExplainer::CollectionType
end

class YARD::Tags::TypesExplainer::FixedCollectionType
end

class YARD::Tags::TypesExplainer::FixedCollectionType
end

class YARD::Tags::TypesExplainer::HashCollectionType
  def initialize(name, key_types, value_types); end

  def key_types(); end

  def key_types=(key_types); end

  def to_s(_singular=T.unsafe(nil)); end

  def value_types(); end

  def value_types=(value_types); end
end

class YARD::Tags::TypesExplainer::HashCollectionType
end

class YARD::Tags::TypesExplainer::Parser
  include ::YARD::CodeObjects
  def initialize(string); end

  def parse(); end
  TOKENS = ::T.let(nil, ::T.untyped)
end

class YARD::Tags::TypesExplainer::Parser
  def self.parse(string); end
end

class YARD::Tags::TypesExplainer::Type
  def initialize(name); end

  def name(); end

  def name=(name); end

  def to_s(singular=T.unsafe(nil)); end
end

class YARD::Tags::TypesExplainer::Type
end

class YARD::Tags::TypesExplainer
  def self.explain(*types); end

  def self.explain!(*types); end
end

module YARD::Templates::Engine
end

module YARD::Templates::Engine
  def self.generate(objects, options=T.unsafe(nil)); end

  def self.register_template_path(path); end

  def self.render(options=T.unsafe(nil)); end

  def self.template(*path); end

  def self.template!(path, full_paths=T.unsafe(nil)); end

  def self.template_paths(); end

  def self.template_paths=(template_paths); end

  def self.with_serializer(object, serializer); end
end

module YARD::Templates::ErbCache
end

module YARD::Templates::ErbCache
  def self.clear!(); end

  def self.method_for(filename); end
end

module YARD::Templates::Helpers::BaseHelper
  def format_object_title(object); end

  def format_object_type(object); end

  def format_source(value); end

  def format_types(list, brackets=T.unsafe(nil)); end

  def globals(); end

  def h(text); end

  def link_file(filename, title=T.unsafe(nil), anchor=T.unsafe(nil)); end

  def link_include_file(file); end

  def link_include_object(obj); end

  def link_object(obj, title=T.unsafe(nil)); end

  def link_url(url, title=T.unsafe(nil), params=T.unsafe(nil)); end

  def linkify(*args); end

  def object(); end

  def object=(object); end

  def owner(); end

  def run_verifier(list); end

  def serializer(); end

  def serializer=(serializer); end
end

module YARD::Templates::Helpers::BaseHelper
end

module YARD::Templates::Helpers::FilterHelper
  def is_class?(object); end

  def is_method?(object); end

  def is_module?(object); end

  def is_namespace?(object); end
end

module YARD::Templates::Helpers::FilterHelper
end

module YARD::Templates::Helpers::HtmlHelper
  include ::YARD::Templates::Helpers::MarkupHelper
  include ::YARD::Templates::Helpers::HtmlSyntaxHighlightHelper
  include ::YARD::Templates::Helpers::ModuleHelper
  def anchor_for(object); end

  def charset(); end

  def format_object_name_list(objects); end

  def format_types(typelist, brackets=T.unsafe(nil)); end

  def h(text); end

  def html_markup_asciidoc(text); end

  def html_markup_html(text); end

  def html_markup_markdown(text); end

  def html_markup_none(text); end

  def html_markup_org(text); end

  def html_markup_pre(text); end

  def html_markup_rdoc(text); end

  def html_markup_ruby(source); end

  def html_markup_text(text); end

  def html_markup_textile(text); end

  def html_markup_textile_strict(text); end

  def html_syntax_highlight(source, type=T.unsafe(nil)); end

  def html_syntax_highlight_plain(source); end

  def htmlify(text, markup=T.unsafe(nil)); end

  def htmlify_line(*args); end

  def insert_include(text, markup=T.unsafe(nil)); end

  def link_file(filename, title=T.unsafe(nil), anchor=T.unsafe(nil)); end

  def link_include_file(file); end

  def link_include_object(obj); end

  def link_object(obj, title=T.unsafe(nil), anchor=T.unsafe(nil), relative=T.unsafe(nil)); end

  def link_url(url, title=T.unsafe(nil), params=T.unsafe(nil)); end

  def mtime(_file); end

  def mtime_url(obj, anchor=T.unsafe(nil), relative=T.unsafe(nil)); end

  def resolve_links(text); end

  def signature(meth, link=T.unsafe(nil), show_extras=T.unsafe(nil), full_attr_name=T.unsafe(nil)); end

  def signature_types(meth, link=T.unsafe(nil)); end

  def url_for(obj, anchor=T.unsafe(nil), relative=T.unsafe(nil)); end

  def url_for_file(filename, anchor=T.unsafe(nil)); end

  def url_for_frameset(); end

  def url_for_index(); end

  def url_for_list(type); end

  def url_for_main(); end
  ASCIIDOC_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  URLMATCH = ::T.let(nil, ::T.untyped)
end

module YARD::Templates::Helpers::HtmlHelper
  def self.urlencode(text); end
end

module YARD::Templates::Helpers::HtmlSyntaxHighlightHelper
  include ::YARD::Templates::Helpers::ModuleHelper
  def html_syntax_highlight_ruby(source); end
end

module YARD::Templates::Helpers::HtmlSyntaxHighlightHelper
end

class YARD::Templates::Helpers::Markup::RDocMarkdown
  def fix_typewriter(html); end
end

class YARD::Templates::Helpers::Markup::RDocMarkdown
end

class YARD::Templates::Helpers::Markup::RDocMarkup
  def from_path(); end

  def from_path=(from_path); end

  def initialize(text); end

  def to_html(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP
  def add_html(tag, name); end

  def add_regexp_handling(pattern, name); end

  def add_word_pair(start, stop, name); end

  def attribute_manager(); end

  def convert(input, formatter); end

  def initialize(attribute_manager=T.unsafe(nil)); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::AttrChanger
  def turn_off(); end

  def turn_off=(_); end

  def turn_on(); end

  def turn_on=(_); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::AttrChanger
  def self.[](*_); end

  def self.members(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::AttrSpan
  def [](n); end

  def initialize(length); end

  def set_attrs(start, length, bits); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::AttrSpan
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::AttributeManager
  def add_html(tag, name); end

  def add_regexp_handling(pattern, name); end

  def add_word_pair(start, stop, name); end

  def attribute(turn_on, turn_off); end

  def attributes(); end

  def change_attribute(current, new); end

  def changed_attribute_by_name(current_set, new_set); end

  def convert_attrs(str, attrs); end

  def convert_html(str, attrs); end

  def convert_regexp_handlings(str, attrs); end

  def copy_string(start_pos, end_pos); end

  def display_attributes(); end

  def flow(str); end

  def html_tags(); end

  def mask_protected_sequences(); end

  def matching_word_pairs(); end

  def protectable(); end

  def regexp_handlings(); end

  def split_into_flow(); end

  def unmask_protected_sequences(); end

  def word_pair_map(); end
  A_PROTECT = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  PROTECT_ATTR = ::T.let(nil, ::T.untyped)
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::AttributeManager
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Attributes
  def as_string(bitmap); end

  def bitmap_for(name); end

  def each_name_of(bitmap); end

  def regexp_handling(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Attributes
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::BlankLine
  def accept(visitor); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::BlankLine
  def self.new(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::BlockQuote
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::BlockQuote
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Document
  include ::Enumerable
  def <<(part); end

  def ==(other); end

  def accept(visitor); end

  def concat(parts); end

  def each(&block); end

  def empty?(); end

  def file(); end

  def file=(location); end

  def initialize(*parts); end

  def merge(other); end

  def merged?(); end

  def omit_headings_below(); end

  def omit_headings_below=(omit_headings_below); end

  def parts(); end

  def push(*parts); end

  def table_of_contents(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Document
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Formatter
  def accept_document(document); end

  def add_regexp_handling_RDOCLINK(); end

  def add_regexp_handling_TIDYLINK(); end

  def add_tag(name, start, stop); end

  def annotate(tag); end

  def convert(content); end

  def convert_flow(flow); end

  def convert_regexp_handling(target); end

  def convert_string(string); end

  def ignore(*node); end

  def in_tt?(); end

  def initialize(options, markup=T.unsafe(nil)); end

  def off_tags(res, item); end

  def on_tags(res, item); end

  def parse_url(url); end

  def tt?(tag); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Formatter::InlineTag
  def bit(); end

  def bit=(_); end

  def off(); end

  def off=(_); end

  def on(); end

  def on=(_); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Formatter::InlineTag
  def self.[](*_); end

  def self.members(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Formatter
  def self.gen_relative_url(path, target); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::HardBreak
  def ==(other); end

  def accept(visitor); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::HardBreak
  def self.new(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Heading
  def accept(visitor); end

  def aref(); end

  def label(context=T.unsafe(nil)); end

  def level(); end

  def level=(_); end

  def plain_html(); end

  def text(); end

  def text=(_); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Heading
  def self.[](*_); end

  def self.members(); end

  def self.to_html(); end

  def self.to_label(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Include
  def ==(other); end

  def file(); end

  def include_path(); end

  def initialize(file, include_path); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Include
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::IndentedParagraph
  def indent(); end

  def initialize(indent, *parts); end

  def text(hard_break=T.unsafe(nil)); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::IndentedParagraph
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::List
  def <<(item); end

  def ==(other); end

  def accept(visitor); end

  def empty?(); end

  def initialize(type=T.unsafe(nil), *items); end

  def items(); end

  def last(); end

  def push(*items); end

  def type(); end

  def type=(type); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::List
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ListItem
  def <<(part); end

  def ==(other); end

  def accept(visitor); end

  def empty?(); end

  def initialize(label=T.unsafe(nil), *parts); end

  def label(); end

  def label=(label); end

  def length(); end

  def parts(); end

  def push(*parts); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ListItem
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Paragraph
  def text(hard_break=T.unsafe(nil)); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Paragraph
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Parser
  include ::RDoc::Text
  def build_heading(level); end

  def build_list(margin); end

  def build_paragraph(margin); end

  def build_verbatim(margin); end

  def char_pos(byte_offset); end

  def debug(); end

  def debug=(debug); end

  def get(); end

  def parse(parent, indent=T.unsafe(nil)); end

  def parse_text(parent, indent); end

  def peek_token(); end

  def setup_scanner(input); end

  def skip(token_type, error=T.unsafe(nil)); end

  def token_pos(byte_offset); end

  def tokenize(input); end

  def tokens(); end

  def unget(); end
  LIST_TOKENS = ::T.let(nil, ::T.untyped)
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Parser::Error
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Parser::Error
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Parser::ParseError
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Parser::ParseError
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Parser
  def self.parse(str); end

  def self.tokenize(str); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::PreProcess
  def find_include_file(name); end

  def handle(text, code_object=T.unsafe(nil), &block); end

  def handle_directive(prefix, directive, param, code_object=T.unsafe(nil), encoding=T.unsafe(nil)); end

  def include_file(name, indent, encoding); end

  def initialize(input_file_name, include_path); end

  def options(); end

  def options=(options); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::PreProcess
  def self.post_process(&block); end

  def self.post_processors(); end

  def self.register(directive, &block); end

  def self.registered(); end

  def self.reset(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Raw
  def <<(text); end

  def ==(other); end

  def accept(visitor); end

  def initialize(*parts); end

  def merge(other); end

  def parts(); end

  def push(*texts); end

  def text(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Raw
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::RegexpHandling
  def ==(o); end

  def initialize(type, text); end

  def text(); end

  def text=(text); end

  def type(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::RegexpHandling
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Rule
  def accept(visitor); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Rule
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToAnsi
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToAnsi
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToBs
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToBs
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToHtml
  include ::RDoc::Text
  def accept_blank_line(blank_line); end

  def accept_block_quote(block_quote); end

  def accept_heading(heading); end

  def accept_list_end(list); end

  def accept_list_item_end(list_item); end

  def accept_list_item_start(list_item); end

  def accept_list_start(list); end

  def accept_paragraph(paragraph); end

  def accept_raw(raw); end

  def accept_rule(rule); end

  def accept_verbatim(verbatim); end

  def code_object(); end

  def code_object=(code_object); end

  def convert_string(text); end

  def end_accepting(); end

  def from_path(); end

  def from_path=(from_path); end

  def gen_url(url, text); end

  def handle_RDOCLINK(url); end

  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_HYPERLINK(target); end

  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end

  def html_list_name(list_type, open_tag); end

  def in_list_entry(); end

  def init_tags(); end

  def list(); end

  def list_end_for(list_type); end

  def list_item_start(list_item, list_type); end

  def parseable?(text); end

  def res(); end

  def start_accepting(); end

  def to_html(item); end
  LIST_TYPE_TO_HTML = ::T.let(nil, ::T.untyped)
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToHtml
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToHtmlCrossref
  def context(); end

  def context=(context); end

  def cross_reference(name, text=T.unsafe(nil), code=T.unsafe(nil)); end

  def handle_regexp_CROSSREF(target); end

  def initialize(options, from_path, context, markup=T.unsafe(nil)); end

  def link(name, text, code=T.unsafe(nil)); end

  def show_hash(); end

  def show_hash=(show_hash); end
  ALL_CROSSREF_REGEXP = ::T.let(nil, ::T.untyped)
  CLASS_REGEXP_STR = ::T.let(nil, ::T.untyped)
  CROSSREF_REGEXP = ::T.let(nil, ::T.untyped)
  METHOD_REGEXP_STR = ::T.let(nil, ::T.untyped)
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToHtmlCrossref
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToHtmlSnippet
  def accept_raw(*node); end

  def accept_rule(*node); end

  def add_paragraph(); end

  def character_limit(); end

  def characters(); end

  def handle_regexp_CROSSREF(target); end

  def initialize(options, characters=T.unsafe(nil), paragraphs=T.unsafe(nil), markup=T.unsafe(nil)); end

  def mask(); end

  def paragraph_limit(); end

  def paragraphs(); end

  def truncate(text); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToHtmlSnippet
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToJoinedParagraph
  def accept_block_quote(*node); end

  def accept_heading(*node); end

  def accept_list_end(*node); end

  def accept_list_item_end(*node); end

  def accept_list_item_start(*node); end

  def accept_list_start(*node); end

  def accept_paragraph(paragraph); end

  def accept_raw(*node); end

  def accept_rule(*node); end

  def accept_verbatim(*node); end

  def end_accepting(); end

  def initialize(); end

  def start_accepting(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToJoinedParagraph
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToLabel
  def accept_blank_line(*node); end

  def accept_block_quote(*node); end

  def accept_heading(*node); end

  def accept_list_end(*node); end

  def accept_list_item_end(*node); end

  def accept_list_item_start(*node); end

  def accept_list_start(*node); end

  def accept_paragraph(*node); end

  def accept_raw(*node); end

  def accept_rule(*node); end

  def accept_verbatim(*node); end

  def convert(text); end

  def end_accepting(*node); end

  def handle_regexp_CROSSREF(target); end

  def handle_regexp_HARD_BREAK(*node); end

  def handle_regexp_TIDYLINK(target); end

  def initialize(markup=T.unsafe(nil)); end

  def res(); end

  def start_accepting(*node); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToLabel
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToMarkdown
  def gen_url(url, text); end

  def handle_rdoc_link(url); end

  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToMarkdown
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToRdoc
  def accept_blank_line(blank_line); end

  def accept_block_quote(block_quote); end

  def accept_heading(heading); end

  def accept_indented_paragraph(paragraph); end

  def accept_list_end(list); end

  def accept_list_item_end(list_item); end

  def accept_list_item_start(list_item); end

  def accept_list_start(list); end

  def accept_paragraph(paragraph); end

  def accept_raw(raw); end

  def accept_rule(rule); end

  def accept_verbatim(verbatim); end

  def attributes(text); end

  def end_accepting(); end

  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_SUPPRESSED_CROSSREF(target); end

  def indent(); end

  def indent=(indent); end

  def init_tags(); end

  def initialize(markup=T.unsafe(nil)); end

  def list_index(); end

  def list_type(); end

  def list_width(); end

  def prefix(); end

  def res(); end

  def start_accepting(); end

  def use_prefix(); end

  def width(); end

  def width=(width); end

  def wrap(text); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToRdoc
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToTableOfContents
  def accept_blank_line(*node); end

  def accept_block_quote(*node); end

  def accept_heading(heading); end

  def accept_list_end(*node); end

  def accept_list_end_bullet(*node); end

  def accept_list_item_end(*node); end

  def accept_list_item_start(*node); end

  def accept_list_start(*node); end

  def accept_paragraph(*node); end

  def accept_raw(*node); end

  def accept_rule(*node); end

  def accept_verbatim(*node); end

  def end_accepting(); end

  def initialize(); end

  def omit_headings_below(); end

  def omit_headings_below=(omit_headings_below); end

  def res(); end

  def start_accepting(); end

  def suppressed?(heading); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToTableOfContents
  def self.to_toc(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToTest
  def accept_blank_line(blank_line); end

  def accept_heading(heading); end

  def accept_list_end(list); end

  def accept_list_item_end(list_item); end

  def accept_list_item_start(list_item); end

  def accept_list_start(list); end

  def accept_paragraph(paragraph); end

  def accept_raw(raw); end

  def accept_rule(rule); end

  def accept_verbatim(verbatim); end

  def end_accepting(); end

  def start_accepting(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToTest
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToTtOnly
  def accept_blank_line(markup_item); end

  def accept_block_quote(block_quote); end

  def accept_heading(markup_item); end

  def accept_list_end(list); end

  def accept_list_item_end(markup_item); end

  def accept_list_item_start(list_item); end

  def accept_list_start(list); end

  def accept_paragraph(paragraph); end

  def accept_raw(markup_item); end

  def accept_rule(markup_item); end

  def accept_verbatim(markup_item); end

  def do_nothing(markup_item); end

  def end_accepting(); end

  def initialize(markup=T.unsafe(nil)); end

  def list_type(); end

  def res(); end

  def start_accepting(); end

  def tt_sections(text); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::ToTtOnly
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Verbatim
  def format(); end

  def format=(format); end

  def normalize(); end

  def ruby?(); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP::Verbatim
end

class YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP
  def self.parse(str); end
end

class YARD::Templates::Helpers::Markup::RDocMarkup
end

module YARD::Templates::Helpers::MarkupHelper
  def load_markup_provider(type=T.unsafe(nil)); end

  def markup_class(type=T.unsafe(nil)); end

  def markup_file_contents(contents); end

  def markup_for_file(contents, filename); end

  def markup_provider(type=T.unsafe(nil)); end
  MARKUP_EXTENSIONS = ::T.let(nil, ::T.untyped)
  MARKUP_FILE_SHEBANG = ::T.let(nil, ::T.untyped)
  MARKUP_PROVIDERS = ::T.let(nil, ::T.untyped)
end

module YARD::Templates::Helpers::MarkupHelper
  def self.clear_markup_cache(); end

  def self.markup_cache(); end

  def self.markup_cache=(markup_cache); end
end

module YARD::Templates::Helpers::MethodHelper
  def format_args(object); end

  def format_block(object); end

  def format_code(object, _show_lines=T.unsafe(nil)); end

  def format_constant(value); end

  def format_lines(object); end

  def format_return_types(object); end
end

module YARD::Templates::Helpers::MethodHelper
end

module YARD::Templates::Helpers::ModuleHelper
  def prune_method_listing(list, hide_attributes=T.unsafe(nil)); end
end

module YARD::Templates::Helpers::ModuleHelper
end

module YARD::Templates::Helpers::TextHelper
  def align_right(text, spacer=T.unsafe(nil), col=T.unsafe(nil)); end

  def h(text); end

  def hr(col=T.unsafe(nil), sep=T.unsafe(nil)); end

  def indent(text, len=T.unsafe(nil)); end

  def signature(meth); end

  def title_align_right(text, col=T.unsafe(nil)); end

  def wrap(text, col=T.unsafe(nil)); end
end

module YARD::Templates::Helpers::TextHelper
end

module YARD::Templates::Helpers::UMLHelper
  def format_path(object); end

  def h(text); end

  def tidy(data); end

  def uml_visibility(object); end
end

module YARD::Templates::Helpers::UMLHelper
end

class YARD::Templates::Section
  def <<(*args); end

  def ==(other); end

  def [](*args); end

  def any(item); end

  def eql?(other); end

  def initialize(name, *args); end

  def name(); end

  def name=(name); end

  def place(*args); end

  def push(*args); end

  def unshift(*args); end
end

class YARD::Templates::Section
end

module YARD::Templates::Template
  include ::YARD::Templates::ErbCache
  include ::YARD::Templates::Helpers::BaseHelper
  include ::YARD::Templates::Helpers::MethodHelper
  def T(*path); end

  def class(); end

  def class=(_); end

  def erb(section, &block); end

  def erb_file_for(section); end

  def erb_with(content, filename=T.unsafe(nil)); end

  def file(basename, allow_inherited=T.unsafe(nil)); end

  def init(); end

  def initialize(opts=T.unsafe(nil)); end

  def inspect(); end

  def options(); end

  def options=(value); end

  def run(opts=T.unsafe(nil), sects=T.unsafe(nil), start_at=T.unsafe(nil), break_first=T.unsafe(nil), &block); end

  def section(); end

  def section=(section); end

  def sections(*args); end

  def superb(sect=T.unsafe(nil), &block); end

  def yieldall(opts=T.unsafe(nil), &block); end
end

module YARD::Templates::Template::ClassMethods
  def S(*args); end

  def T(*path); end

  def find_file(basename); end

  def find_nth_file(basename, index=T.unsafe(nil)); end

  def full_path(); end

  def full_path=(full_path); end

  def full_paths(); end

  def initialize(path, full_paths); end

  def is_a?(klass); end

  def new(*args); end

  def path(); end

  def path=(path); end

  def reset_full_paths(); end

  def run(*args); end
end

module YARD::Templates::Template::ClassMethods
end

module YARD::Templates::Template
  def self.extra_includes(); end

  def self.extra_includes=(extra_includes); end

  def self.include_extra(template, options); end

  def self.included(klass); end
end

class YARD::Verifier
  def add_expressions(*expressions); end

  def call(object); end

  def expressions(); end

  def expressions=(value); end

  def initialize(*expressions); end

  def method_missing(sym, *args, &block); end

  def o(); end

  def object(); end

  def run(list); end
  NILCLASS_METHODS = ::T.let(nil, ::T.untyped)
end

class YARD::Verifier
end

module Zip
  CDIR_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  CENTRAL_DIRECTORY_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHODS = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_AES = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_BZIP2 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_DEFLATE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_DEFLATE_64 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_CMPSC = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_LZ77 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_TERSE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IMPLODE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_JPEG = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_LZMA = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_PKWARE_DCLI = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_PPMD = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_1 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_2 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_3 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_4 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_SHRINK = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_STORE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_WAVPACK = ::T.let(nil, ::T.untyped)
  FILE_TYPE_DIR = ::T.let(nil, ::T.untyped)
  FILE_TYPE_FILE = ::T.let(nil, ::T.untyped)
  FILE_TYPE_SYMLINK = ::T.let(nil, ::T.untyped)
  FSTYPES = ::T.let(nil, ::T.untyped)
  FSTYPE_ACORN = ::T.let(nil, ::T.untyped)
  FSTYPE_AMIGA = ::T.let(nil, ::T.untyped)
  FSTYPE_ATARI = ::T.let(nil, ::T.untyped)
  FSTYPE_ATHEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_BEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_CPM = ::T.let(nil, ::T.untyped)
  FSTYPE_FAT = ::T.let(nil, ::T.untyped)
  FSTYPE_HPFS = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC_OSX = ::T.let(nil, ::T.untyped)
  FSTYPE_MVS = ::T.let(nil, ::T.untyped)
  FSTYPE_NTFS = ::T.let(nil, ::T.untyped)
  FSTYPE_QDOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TANDEM = ::T.let(nil, ::T.untyped)
  FSTYPE_THEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TOPS20 = ::T.let(nil, ::T.untyped)
  FSTYPE_UNIX = ::T.let(nil, ::T.untyped)
  FSTYPE_VFAT = ::T.let(nil, ::T.untyped)
  FSTYPE_VMS = ::T.let(nil, ::T.untyped)
  FSTYPE_VM_CMS = ::T.let(nil, ::T.untyped)
  FSTYPE_Z_SYSTEM = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_TRAILING_DESCRIPTOR_LENGTH = ::T.let(nil, ::T.untyped)
  RUNNING_ON_WINDOWS = ::T.let(nil, ::T.untyped)
  VERSION_MADE_BY = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT_ZIP64 = ::T.let(nil, ::T.untyped)
end

class Zip::CentralDirectory
  END_OF_CDS = ::T.let(nil, ::T.untyped)
  MAX_END_OF_CDS_SIZE = ::T.let(nil, ::T.untyped)
  STATIC_EOCD_SIZE = ::T.let(nil, ::T.untyped)
  ZIP64_END_OF_CDS = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_LOCATOR = ::T.let(nil, ::T.untyped)
end

class Zip::Decompressor
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::DecryptedIo
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::Entry
  DEFLATED = ::T.let(nil, ::T.untyped)
  EFS = ::T.let(nil, ::T.untyped)
  STORED = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField
  ID_MAP = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::IUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::NTFS
  HEADER_ID = ::T.let(nil, ::T.untyped)
  SEC_TO_UNIX_EPOCH = ::T.let(nil, ::T.untyped)
  WINDOWS_TICK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::OldUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::UniversalTime
  ATIME_MASK = ::T.let(nil, ::T.untyped)
  CTIME_MASK = ::T.let(nil, ::T.untyped)
  HEADER_ID = ::T.let(nil, ::T.untyped)
  MTIME_MASK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64Placeholder
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::File
  CREATE = ::T.let(nil, ::T.untyped)
  DATA_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  IO_METHODS = ::T.let(nil, ::T.untyped)
  MAX_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  MIN_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  SPLIT_SIGNATURE = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_SIGNATURE = ::T.let(nil, ::T.untyped)
end

module Zip::IOExtras
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  RANGE_ALL = ::T.let(nil, ::T.untyped)
end

module Zip::IOExtras::AbstractInputStream
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

class Zip::InputStream
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

module Zip::NullInputStream
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

Zip::ZipCompressionMethodError = Zip::CompressionMethodError

Zip::ZipDestinationFileExistsError = Zip::DestinationFileExistsError

Zip::ZipEntryExistsError = Zip::EntryExistsError

Zip::ZipEntryNameError = Zip::EntryNameError

Zip::ZipError = Zip::Error

Zip::ZipInternalError = Zip::InternalError

class Zlib::Deflate
  def initialize(*_); end
end

class Zlib::GzipReader
  def initialize(*_); end
end

class Zlib::GzipWriter
  def initialize(*_); end
end

class Zlib::Inflate
  def initialize(*_); end
end
